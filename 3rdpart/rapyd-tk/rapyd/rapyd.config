
# Hi!

# Section "General" contains all the settings and options that affect the
# overall running of Rapyd. Each option has some text describing what it
# does and what the valid settings are.

# Section "Code Editor Schemes" is where you specify the keybindings and
# code colorization preferences for one or more schemes. As shipped from the
# factory, so to speak, there are two predefined schemes: "Idle" and
# "MidnightCommander". You can define more schemes if you wish. The scheme
# that Rapyd will actually use is set by the "DefaultEditorScheme" option
# near the bottom of section "General". To change editor schemes you have to
# exit Rapyd, change the DefaultEditorScheme setting and restart Rapyd. We
# thought about adding a facility so you could change schemes of the fly but
# it started to look like a whole lot of work for something that would be
# infrequently used.

# The sections "EnumeratedOptionTypes" and "Widgets" are really only of
# interest to heavy duty Rapyd hackers. Suggest you leave them as-is
# unless you really know what you are doing.

#-------------------------------------------------------------------------------#
#                                                                               #
#                                                                               #
#                                                                               #
#                             General Settings                                  #
#                                                                               #
#                                                                               #
#                                                                               #
#-------------------------------------------------------------------------------#

[General] 

# The type of backup to do when a project is saved.
# 0: (unsafe)    No backup; just save the project over it's existing file.
# 1: (safe)      Rename to existing file to be "whatever.bak" before saving.
# 2: (very safe) Rename the exising file to be "whatever.rpj.nnnn" where nnnn is
#    a number one greater than any existing backup copy of this project. Backup
#    files will accumulate forever; remove them by hand as seems necessary.
Backup = 1


# The directory in which we look for icons. If an asterisk ('*') then we
#     look for icons in directory 'Icons' in the same directory in which we
#     found the config file. Otherwise specify a path to to the icon directory.
IconDir = *


# The path and filename of the help file. If an asterisk ('*') then
#     we used the filename 'rapyd.help' in the same directory as this config
#     file was found. Otherwise specify a full path and filename to locate
#     the help file eg "/home/jane/mystuff/rapyd.help".
HelpPath = *


# The default directory to be used by the "new project" dialog. If an
#     asterisk ('*') is specified then the "new project" dialog uses the
#     current working directory as the default directory.
DefaultDir = *


# If AutoMangle is true then initial suggested widget and event handler names
#   start with "__" to enable Python "name mangling" on them. If AutoMangle is 0
#   then the names do not start with "__".
AutoMangle: 1


#The color used when rendering links in help text. If not specified it
#    defaults to #007000, a muted green color.
LinkColor = #0000ff


# The font we use for everything except the code editor. The font
#     for the code editor is specified in the editor scheme. This can be either
#     a (Family,Size,Modifiers) tuple of an X-style font string.
Font = ('helvetica','10','bold')

#These two numbers specify the size of the regular help text and the heading
#    help text. Help always uses Helvetica for narative text and Courier for 
#    fixed-pitch text. A comma between the two numbers is required.
HelpTextSize = 12, 14


# This config file can contain one or more code editor schemes (see below). The
#     code editor scheme named here is the one that will be used.
DefaultEditorScheme = Idle


#-------------------------------------------------------------------------------#
#                                                                               #
#                                                                               #
#                                                                               #
#                            Code Editor Schemes                                #
#                                                                               #
#                                                                               #
#                                                                               #
#-------------------------------------------------------------------------------#


# One or more code editor schemes should be specified. The scheme actually used
#     is specified by DefaultEditorScheme above.
#
# Colorizer
# ---------
#
# For the colorizer, you specify a color and then list all the syntactic elements
#     which are to appear in that color, like this:
#
# Color_rrggbb: <elements>
#
# Where "rrggbb" specifies red, green and blue in hexadecimal notation and 
#     <elements> are the syntactic elements for that color.
#
# Some syntatic elements have single-character names, some have multi character
#      names. For those elements with single-character names, the name is the 
#      element. The single character syntactic elements are:
#
#     ~ ! % ^ & * - + = | < > / : ; ( ) [ ] { } , .
#
#     For multi-character syntactic elements, the name represents some class of 
#         element. The multi-character elements are:
#
#         o "background" The background on which all user entered text is drawn.
#
#         o "bgldt" The background for Rapyd-generated "Look-Don't-Touch" text.
#
#         o "builtin" Names of Python builtin functions and exceptions as 
#           reported by dir(__builtins__)
#
#         o "comment" Comments. Note that text which begins with a number sign
#            (#) is a comment, as is text inside triple double-quotes (""").
#
#         o "cursor" The insertion cursor of the code editor.
#
#         o "keyword" Python keywords as reported by keyword.kwlist (eg "and,
#            assert, break, class" and so on).
#
#         o "format" Format phrase inside a string (eg %5s)
#
#         o "escape" An escape sequence inside a string (eg \n)
#
#         o "other" Everything not otherwise mentioned, that is, ordinary text.
#
#         o "special" Any name which begins and ends with double underscores,
#            and the ever ubiquitious word "self". Technically "self" isn't 
#            intrinsically special (you can use "banana" or whatever and it will
#            still work) but self is so commonly used that it is, IMHO, worth 
#            colorizing.
#
#         o "string" Text enclosed in single or double quotes. Also text inside
#            triple single quotes (''')
#
# Key Bindings
# ------------
#
# For binding actions to keys, you specify the action and then the event string
#     which identifies the key which is to initiate the action, like this:
#
# Action_actionname: eventstring
#
# For example, to bind the action "outdent" to the F9 key you would use:
#
#     Action_Outdent: <F9>
#
# Note that there are a number of editor actions whose binding is fixed and
#     immutable and thus you don't get to specify them here:
#
#     Cursor up/down/left/right
#     PageUp, PageDown
#     Backspace, Delete
#     Enter
#
# You are not obliged to create a binding for every action. If you don't 
#     specify a binding for a particular action then that action will not be
#     available via a keystroke. Most actions are also available via menus.
#
# The bindings you specify here automatically show up in the menus and in
#     the help messages.
#
# <Rant> I don't much like tabs. I think the concept of tab-character-in-text
#     should have gone the way of the dinosaur years ago along with the teletype
#     machine from whence it came. Tabs made sense decades ago as a kluge for 
#     speeding up the sending of hardcopy messages between clunky 
#     electromechanical machines over slow, expensive lines. IMHO they have no
#     place in present day computers. Other than that it converts Tabs to an
#     appropriate number of spaces when reading a text file, Rapyd has no truck
#     nor trade with Tabs. Internally all whitespace is represented by spaces. 
#     The "Tab" key is typically mapped to the "indent" function which injects
#     enough spaces into the line so that the cursor lands on a spot that is a
#     multiple of the indent amount, which is a configuration specified value.
# </Rant>

# The available actions are:
#
# Copy: Clear the clipboard and copy the currently selected text into it.
#
# CopyAppend: Append the currently selected text to the clipboard WITHOUT first
#     clearing the clipboard.
#
# CopyToFile: Copy the currently selected text to a file of the users choosing.
#
# Cut: Clear the clipboard and cut the currently selected text into it.
#
# CutAppend. Cut the currently selected text into the clipboard WITHOUT first
#     clearing the clipboard.
#
# DeleteLine: Delete the line the cursor is on.
#
# ProjectExit: Exit Rapyd.
#
# FindMatch: If the character to the right of the cursor is a square bracket,
#     a parentheses or a brace, look for and highlight it's matching character.
#
# FormAlternate: Switch to the last form in the current module that we were on 
#     prior to the current one
#
# FormSwapCodeLayout: Toggle current form between code editor and layout editor.
#
# Goto: Asks the user for a line number and positions the cursor there. If the 
#     line number is greater than the number of lines, we position the cursor on
#     the last line.
#
# Indent: Inject spaces into the current line until the cursor lands on a 
#     multiple of the indent amount. See Rant above.
#
# IndentBlock: Indent every line of the current block by the indent amount. If
#     no text is selected, indent only the current line.
#
# ModuleAlternate: Switch to the last module we were editing prior to the 
#     current one.
#
# ModuleNext: Switch to the next module in alphabetic order. If we are on the 
#     last module, then switch to the first one.
#
# Outdent: This is the inverse of the "indent" action (see Rant above). Left to
#     it's own devices it backs up, deleting spaces as it goes, until the cursor
#     lands on a spot that is a multiple of the indent amount. Indent amount is 
#     a configuration value defined with each scheme. Outdent will only delete 
#     SPACES; it halts early if it runs into a non-space or the start of the 
#     line.
#
# OutdentBlock: Outdent every line of the current block by the indent amount. 
#     If one or mores lines have insufficient spaces at the front of the line to
#     complete the indent then NONE of the lines are outdented. If no text is 
#     selected, only the the current line is outdented.
#
# Paste: The content of the clipboard is inserted at the current cursor 
#     position. The clipboard is not cleared.
#
# PasteFile: Insert a file of the users choosing at the current cursor position.
#
# ProjectBuild: Build the current project.
#
# ProjectBuildRun: Build then run the current project.
#
# ProjectLoad: Load a new project.
#
# ProjectSave: Save the current project.
#
# ProjectSaveBuild: Save then build the current project.
#
# ProjectSaveBuildRun: Save, then build then run the current project.
#
# PopToLineNumber: If the line number stack is not empty, we pop the most recent
#     value from it and go to that line.
#
# PushLineNumber: The number of the current line is pushed onto the line number 
#     stack.
#
# Search: Initiate a search for user specified text.
#
# SearchReplace. Like Search but with the ability to replace found text.
#
# SearchAgain: Continue the most recent search. 
#
# SelectAll: All text is selected.
#
# SwapWithTop: Goto the line number that was on the top of the line stack, and
#     replace the top entry of the line stack with the number of the line we 
#     we are on.

#-------------------------------------------------------------------------------
[EditorScheme MidnightCommander]
#-------------------------------------------------------------------------------
# This color scheme is very close to the one used by Midnight Commander and the 
#     key bindings bear a passing resemblence to those of Midnight Commander.

#The font the editor is to use. You can specify either a (Family,Size,Modifiers) 
# tuple or an X-style font string here. Adjust this number to make the font
# larger or smaller as needed 
#                ---------.
#                         |
#                        vv
Font: ('DejaVuSansMono','14')

#The indent and outdent actions work in multiples of this value. If an 
#    EditorScheme does not define indent, it will default to 4.
Indent: 4

#Rapyd-generated code will be wrapped if it exceeds this number of characters.
#    If not specified it defaults to 80. This does not apply to user entered
#    code; it never wraps.
Wrap: 80

# Actions and the events that are to trigger them
#------------------------------------------------------

Action_Bottom:          <Alt-Down>
Action_Copy:            <Control-c>
Action_CopyAppend:      <Alt-c>
Action_CopyToFile:      <Control-f>
Action_Cut:             <Control-x>
Action_CutAppend:       <Alt-x>
Action_DeleteLine:      <F8>
Action_FindMatch:       <Control-m>
Action_Goto:            <Alt-l>
Action_Indent:          <Tab>
Action_IndentBlock:     <Alt-bracketright>
Action_Outdent:         <F11>
Action_OutdentBlock:    <Alt-bracketleft>
Action_Paste:           <Control-v>
Action_PasteFile:       <Shift-F5>
Action_PopToLineNumber: <F6>
Action_PushLineNumber:  <F5>
Action_Recolorize:      <Control-r>
Action_Search:          <F7>
Action_SearchAgain:     <Shift-F7>
Action_SearchReplace:   <F4>
Action_SelectAll:       <Control-a>
Action_SwapWithTop:     <Alt-s>
Action_Top:             <Alt-Up>

Action_ProjectSave:             <F2>
Action_ProjectSaveBuildRun:     <F3>
Action_FormSwapCodeLayout:      <Shift-F9>
Action_FormAlternate:           <F9>
Action_ModuleAlternate:         <F12>
Action_ModuleNext:              <Shift-F12>
Action_Exit:                    <Alt-q>

#White
Color_FFFFFF: cursor .

#Blue
Color_0000A8: background

#Pale blue
Color_4040C0: bgldt

#Light gray
Color_c0c0c0: other

#Dark red
Color_AD5050: comment

#Yellow
Color_FFFF00: keyword ~ ! % ^ & * - + = | < > / !

#Red
Color_FF0000: special : ;

#Dark green
Color_00B000: string

#Bright green
Color_00FF00: format escape

#Cyan
Color_00FFFF: builtin ( ) [ ] { } ,


#-------------------------------------------------------------------------------
[EditorScheme Idle]
#-------------------------------------------------------------------------------
# This editor scheme attempts to mimic, to the extent possible, the
# Idle editing scheme.

#The font the editor is to use. You can specify either a (Family,Size,Modifiers) 
# tuple or an X-style font string here. Adjust this number to make the font
# larger or smaller as needed
#                ---------.
#                         |
#                        vv
Font: ('DejaVuSansMono','14')

Indent: 4
Wrap: 80

#These actions are similar or identical to the corresponding Idle actions
#    and have the same bindings.
Action_Copy:            <Alt-w>
Action_Cut:             <Control-w>
Action_Goto:            <Alt-g>
Action_Indent:          <Tab>
Action_IndentBlock:     <Alt-bracketright>
Action_OutdentBlock:    <Alt-bracketleft>
Action_Paste:           <Control-y>
Action_Search:          <Control-u><Control-u><Control-s>
Action_SearchAgain:     <Control-u><Control-s>
Action_SearchReplace:   <Control-r>
Action_SelectAll:       <Alt-a>

#These actions don't appear to have an Idle equivalent and have been assigned
#    bindings that seemed reasonable at the time.
Action_CopyAppend:      <Alt-c>            
Action_CopyToFile:      <Control-f>        
Action_CutAppend:       <Control-c>        
Action_DeleteLine:      <F8>
Action_FindMatch:       <Control-m>        
Action_Outdent:         <F11>               
Action_PasteFile:       <Shift-F5>         
Action_PopToLineNumber: <F6>               
Action_PushLineNumber:  <F5>               
Action_Recolorize:      <Control-r>         
Action_SwapWithTop:     <Alt-s>            

Action_ProjectSave:             <F2>
Action_ProjectSaveBuildRun:     <F3>
Action_FormSwapCodeLayout:      <Shift-F9>
Action_FormAlternate:           <F9>
Action_ModuleAlternate:         <F12>
Action_ModuleNext:              <Shift-F12>
Action_Exit:                    <Alt-q>

#These are pretty close to the Idle colors. I couldn't resist
#    doing in-string format phrases and escapes in a different
#    color of green just because we could. If this offends
#    you, feel free to move "format" and "escape" up to "dark
#    green".
#Black
Color_000000: cursor other . , ~ ! % ^ & * - + = | < > / special : [ ] { } ( ) builtin

#White
Color_FFFFFF: background

#Light gray
Color_F0F0F0: bgldt

#Dark red
Color_AD5050: comment

#Red
Color_FF0000: keyword

#Dark green
Color_00B000: string 

#Bright green
Color_00FF00: format escape

#-------------------------------------------------------------------------------#
#                                                                               #
#                                                                               #
#                                                                               #
#                         Enumerated OptionTypes                                #
#                                                                               #
#                                                                               #
#                                                                               #
#-------------------------------------------------------------------------------#

[EnumeratedOptionTypes] 

# Here we define option types which consist simply of a list from which the
#     user gets to choose. Form is: <type name>: <choice-0> ... <choice-n>
#
# Enumerated options can not have a name which is the same as the name of
#     one of the built-in option types.The builtin option types are:
#         bitmap
#         bbox
#         color
#         command
#         cursor
#         cvar
#         dim
#         float
#         font
#         image
#         int
#         pmwcomp      Specifies a nested Pmw component
#         pmwdatatype
#         tabs
#         text
#         verbatim     User text is taken verbatim as the value of the option.
#         xy
#
# If the choice as given below is of the form '<yada-1>:<yada-2>' then the user
#     is shown only the <yada-1> part but when it comes time to actually
#     set the option we use the <yada-2> part. The <yada-1> part is implicitly
#     a string; don't put quotes around it. The <yada-2> part can be any legal
#     python constant, thus if it is to be a string it must be quoted. The
#     boolean option below is an example.
#
# If both yada's are identical and both are strings then you can code simply 
#     <yada-1> and omit the colon and <yada-2>. The anchor option below is an 
#     example.
#
# Note: For a number of enumerated options the valid values are various strings 
#     and the python None object. For example, the "tabpos" option allow either 
#     the string "n" or None. You have to use the longer <yada-1>:<yada-2> form 
#     for these options. Why? Because if you were to specify something like:
#
#     tabpos:   n, None
#
#     Then the choices would be either the string "n" or *the string* "None". 
#     Since in this case we want the OBJECT None not the STRING "None" you have 
#     to use the full form.
#
# labelpos. For most enumerated options you specify them as part of widget like 
#     this:
#
#       optionname:  optiontype defaultvalue
#
#       where "optiontype" is one of the enumerated types listed below. For the
#       "labelpos" enumerated option there is an additional forth argument so 
#       you code it thus:
#
#       optionname:  labelpos defaultvalue targetlabel
#
#       where "targetlabel" is the optionname of the label to which this labelpos 
#       pertains. Pmw only creates that label component if this labelpos is set 
#       to a value other than None. Special code in Rapyd checks the current 
#       value of labelpos options and the user sees the corresponding label
#       option only if the labelpos option is not None. See the definition of
#       the Pmw.ButtonBox widget below for an example of this in action.
#
# boolean_c is like labelpos in that it takes the name of a pmw component which
#       is creaated only if the boolean_c option is set to true by the user.
#
# Regardless of the order in which the choices are listed here, they are 
#       presented to the user in alphabetic order.
#
anchor:     center, n, s, e, w, nw, ne, sw, se
boolean:    True:1, False:0
boolean_c:  True:1, False:0
buttontype: button, checkbutton, radiobutton
default:    Blank border:"normal", 
            Thin line:"active", 
            No border:"disabled"
direction:  above, below, flush, left, right
fill:       No:None, X:"x", Y:"y", Both:'both'
flex:       elastic, expand, fixed, shrink
takefocus:  Yes:1, No:0, Auto:None
justify:    center, left, right
labelpos:   n:'n', s:'s', e:'e', w:'w', nw:'nw', ne:'ne', sw:'sw', se:'se', 
            en:'en', es:'es', wn:'wn', ws:'ws', None:None
orient:     horizontal, vertical
menutype:   normal, tearoff, menubar
plicity:    single, multiple
relief:     raised, sunken, groove, ridge, flat
scrollmode: none, dynamic, static
side:       top, bottom, left, right
selectmode: browse, single, multiple, extended
state:      normal, disabled
tabpos:     n:'n', None:None
validate:   none:None, focus:"focus", focusin:"focusin", focusout:"focusout", 
            key:"key", all:"all"
wrap:       Char:"char", Word:"word", Don't wrap:"none"
yesno:      Yes:"yes", No:"no"


#-------------------------------------------------------------------------------#
#                                                                               #
#                                                                               #
#                                                                               #
#                                  Widgets                                      #
#                                                                               #
#                                                                               #
#                                                                               #
#-------------------------------------------------------------------------------#

# Each widget gets it's own section. The section name is of the form
#     [widget <name-of-module> <name-of-widget>].
# The module must have been defined in the [Modules] section.
# The name-of-widget given is the name used to access that widget inside Rapyd.
# Neither the module name nor the widget name can contains spaces.
#
# The next three or four options are required. Their names start with right-paren
#     to keep them from conflicting with any possible option name.
#
# )Hint: The widget buffet hint for this widget.
#
# )Master: Used only for container widgets (ie frames) and even then it
#     is optional. If omitted then the frame widget itself is considered to be
#     the master into which containee widgets are packed. For example, having
#     created a Frame named MyFrame, then a button would be placed into that
#     frame using "MyButton = Button(MyFrame...)". However, some frame widgets
#     (eg Pmw.ScrolledFrame) are not actually derived from Frame and that's
#     where the "Master" field comes in; if supplied it is appended to the 
#     name of the frame to get the master when adding widgets. For example
#     in the case of Pmw.ScrolledFrame "Master" is set to ".interior()" and
#     having created a ScrolledFrame named MyFrame, then a button would be
#     placed into that frame using "MyButton = Button(MyFrame.interior()...)".
#
# )Icon_b: The name of the icon (in IconDir, see above) that we use on this
#     widgets button in the widget buffet. For container widgets (ie Toplevel
#     and Frame) which don't appear on the buffet, put None.
#
# )Icon_w: The name of the icon that we use to represent a widget request 
#     for this widget on the users layout form. None for container widgets.
#
# Following the required widget values are the widget options that the user
#    gets to see in the otion editor of the widgetator. Each line consists of 
#    these items:
#    1) The option name.
#    2) The option type. This has to be either a built-in option type or
#       an enumerated option defined previously in this file. This value
#       can not contain whitespace.
#    3) The default value. For type font this should be None. For all other
#       types this should be either a sequence of non-whitespace characters 
#       or None.
#    4) Extra information. Most option types don't used this item. It is
#       used by:
#       o 'cvar': A string of up to three different characters from 'sif' 
#          indicating what kind of control variables are allowed 
#          (string/integer/float) for this option.
#       o 'pmwcomp': Used for nested Pmw options. Specifies the module and
#          widget that this component consists of as "module.widget".
#       o 'labelpos' and "boolean_c": Specifies the name of the label option 
#          within this widget to which the labelpos or boolean_c applies. See 
#          note just above the enumerated option definitions as well.

# Enumerated option types are defined above.
#
# The builtin option types are as follows. Most of these are pretty obvious and
#     examples of their use can be found in the Tkinter and Pmw options defined
#     below.
#       bitmap
#       bbox
#       color
#       command
#       cursor
#       cvar
#       dim
#       float
#       font
#       image
#       int
#       pmwcomp      Specifies a nested Pmw component
#       pmwdatatype
#       tabs
#       text
#       verbatim     User text is taken verbatim as the value of the option.
#       xy

# Strictly speaking option names have to be unique within a given widget. This
#     isn't usually a problem but occasionally it is. For example the 
#     Pmw.ScrolledCanvas has both an option and a component named 'borderframe'.
#     To get around this we declare that dashes ('-') in option names are 
#     allowed but that any such dashes are removed before the option name is 
#     shown to the user in the option editor and before the name is used for
#     generating widget creation code. In the example mentioned above we code
#     borderframe and border-frame. They are unique names but they end up doing
#     what we want.

#-------------------------------------------------------------------------------
[Modules] 
#-------------------------------------------------------------------------------

# Each line gives the name of a widget-containing module, followed by
# either "from" (if we should import using "from <module> import *")
# or "import" (if we should use simply "import <module>")

Tkinter: from
Pmw:     import

#-------------------------------------------------------------------------------
[Tabs] 
#-------------------------------------------------------------------------------

# Each line defines a tab to be added to the widget buffet, and
# consists of <ID>: <Text for buffet tab>
# The <ID> must be one of the module's defined above.
#
Tkinter: Tk widgets
Pmw:     Pmw widgets


# The order in which the tabs appear in the widget buffet.
# The first tab listed is the one which is selected at startup
#
Order: Tkinter Pmw


# The order in which the widgets appear on each widget buffet tab.
# Each one listed must, of course, be defined in the Widgets section long below.
# 
Order_Tkinter: Button Label Entry Listbox Text Canvas Menu Menubutton 
               Checkbutton Radiobutton Scrollbar Scale

Order_Pmw: ButtonBox ComboBox Counter EntryField Group LabeledWidget
           MainMenuBar MenuBar MessageBar NoteBook OptionMenu PanedWidget
           RadioSelect ScrolledCanvas ScrolledField ScrolledListBox
           ScrolledText TimeCounter

#-------------------------------------------------------------------------------
[widget Tkinter Button]
#-------------------------------------------------------------------------------
)Hint:    Button
)Icon_b:  pr-wid-b-Button.ppm
)Icon_w:  pr-wid-w-Button.ppm

#      .---------------------------------The name of the option. See note above.
#      |                .----------------The type of option. Must be either an enumerated
#      |                |                type or a built-in type.
#      |                |            .---The value that you get for this option if you
#      |                |            |   don't specify a value at creation time.
#---------------     -------      ----------
activebackground:    color        #ececec
activeforeground:    color        Black
anchor:              anchor       center
background:          color        #d9d9d9
bitmap:              bitmap       None
borderwidth:         int          2
command:             command      None
cursor:              cursor       None
default:             default      disabled
disabledforeground:  color        #a3a3a3
font:                font         None
foreground:          color        Black
height:              int          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
image:               image        None
justify:             justify      center
padx:                dim          3m
pady:                dim          1m
pyclass:             pyclass      Button
relief:              relief       raised
state:               state        normal
takefocus:           takefocus    None
text:                text         None
textvariable:        cvar         None    s
underline:           int          -1
width:               int          0
wraplength:          dim          0

#-------------------------------------------------------------------------------
[widget Tkinter Canvas]
#-------------------------------------------------------------------------------
)Hint:    Canvas
)Icon_b:  pr-wid-b-Canvas.ppm
)Icon_w:  pr-wid-w-Canvas.ppm

background:          color        #d9d9d9
borderwidth:         dim          0
closeenough:         float        1.0
confine:             boolean      1
cursor:              cursor       None
height:              dim          248
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
insertbackground:    color        Black
insertborderwidth:   dim          0
insertofftime:       int          300
insertontime:        int          600
insertwidth:         dim          2
offset:              xy           0,0
pyclass:             pyclass      Canvas
relief:              relief       flat
scrollregion:        bbox         None
selectbackground:    color        #c3c3c3
selectborderwidth:   dim          1
selectforeground:    color        Black
state:               state        normal
takefocus:           takefocus    None
width:               dim          355
xscrollcommand:      command      None  
xscrollincrement:    int          0
yscrollcommand:      command      None 
yscrollincrement:    int          0

#-------------------------------------------------------------------------------
[widget Tkinter Checkbutton]
#-------------------------------------------------------------------------------
)Hint:    Checkbutton
)Icon_b:  pr-wid-b-Checkbutton.ppm
)Icon_w:  pr-wid-w-Checkbutton.ppm

activebackground:    color        #ececec
activeforeground:    color        Black
anchor:              anchor       center
background:          color        #d9d9d9
bitmap:              bitmap       None
borderwidth:         dim          2
command:             command      None
cursor:              cursor       None
disabledforeground:  color        #a3a3a3
font:                font         None
foreground:          color        Black
height:              dim          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
image:               image        None
indicatoron:         boolean      1
justify:             justify      center
offvalue:            int          0
onvalue:             int          1
padx:                dim          1
pady:                dim          1
pyclass:             pyclass      Checkbutton
relief:              relief       flat
selectcolor:         color        #b03060
selectimage:         image        None
state:               state        normal
takefocus:           takefocus    None
text:                text         None
textvariable:        cvar         None  s
underline:           int          -1
variable:            cvar         None  sif
width:               dim          0
wraplength:          dim          0

#-------------------------------------------------------------------------------
[widget Tkinter Label]
#-------------------------------------------------------------------------------
)Hint:    Label
)Icon_b:  pr-wid-b-Label.ppm
)Icon_w:  pr-wid-w-Label.ppm

activebackground:    color        #ececec
activeforeground:    color        Black
anchor:              anchor       center
background:          color        #d9d9d9
bitmap:              bitmap       None
borderwidth:         dim          2
cursor:              cursor       None
disabledforeground:  color        #a3a3a3
font:                font         None
foreground:          color        Black
height:              dim          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          0
image:               image        None
justify:             justify      center
padx:                dim          1
pady:                dim          1
pyclass:             pyclass      Label
relief:              relief       flat
state:               state        normal
takefocus:           takefocus    0
text:                text         None
textvariable:        cvar         None   s
underline:           int          -1
width:               dim          0
wraplength:          dim          0

#-------------------------------------------------------------------------------
[widget Tkinter Entry]
#-------------------------------------------------------------------------------
)Hint:    Entry
)Icon_b:  pr-wid-b-Entry.ppm
)Icon_w:  pr-wid-w-Entry.ppm

background:           color       #d9d9d9
borderwidth:          dim         2
cursor:               cursor      xterm
exportselection:      boolean     1
font:                 font        None
foreground:           color       Black
highlightbackground:  color       #d9d9d9
highlightcolor:       color       Black
highlightthickness:   dim         1
insertbackground:     color       Black
insertborderwidth:    dim         0
insertofftime:        int         300
insertontime:         int         600
insertwidth:          dim         2
invalidcommand:       command     None
justify:              justify     left
pyclass:              pyclass     Entry
relief:               relief      sunken
selectbackground:     color       #c3c3c3
selectborderwidth:    dim         1
selectforeground:     color       Black
show:                 text        None
state:                state       normal
takefocus:            takefocus   None
textvariable:         cvar        None  s
validate:             validate    None
validatecommand:      command     None
width:                int         20
xscrollcommand:       command     None

#-------------------------------------------------------------------------------
[widget Tkinter Listbox]
#-------------------------------------------------------------------------------
)Hint:    Listbox
)Icon_b:  pr-wid-b-Listbox.ppm
)Icon_w:  pr-wid-w-Listbox.ppm

background:          color        #d9d9d9
borderwidth:         dim          2
cursor:              cursor       None
exportselection:     boolean      1
font:                font         None
foreground:          color        Black
height:              int          10
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1

# I don't think 'listvariable' is used in Tkinter
#listvariable:       ????         None 

pyclass:             pyclass      Listbox
relief:              relief       sunken
selectbackground:    color        #c3c3c3
selectborderwidth:   dim          1
selectforeground:    color        Black
selectmode:          selectmode   browse
setgrid:             boolean      0
takefocus:           takefocus    None
width:               int          20
xscrollcommand:      command      None
yscrollcommand:      command      None

#-------------------------------------------------------------------------------
[widget Tkinter Radiobutton]
#-------------------------------------------------------------------------------
)Hint:    Radiobutton
)Icon_b:  pr-wid-b-Radiobutton.ppm
)Icon_w:  pr-wid-w-Radiobutton.ppm

activebackground:    color        #ececec
activeforeground:    color        Black
anchor:              anchor       center
background:          color        #d9d9d9
bitmap:              bitmap       None
borderwidth:         dim          2
command:             command      None
cursor:              cursor       None
disabledforeground:  color        #a3a3a3
font:                font         None
foreground:          color        Black
height:              dim          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
image:               image        None
indicatoron:         boolean      1
justify:             justify      center
padx:                dim          1
pady:                dim          1
pyclass:             pyclass      Radiobutton
relief:              relief       flat
selectcolor:         color        #b03060
selectimage:         image        None
state:               state        normal
takefocus:           takefocus    None
text:                text         None
textvariable:        cvar         None  s
underline:           int          -1
value:               text         None
variable:            cvar         selectedButton   is
width:               int          0
wraplength:          dim          0

#-------------------------------------------------------------------------------
[widget Tkinter Scale]
#-------------------------------------------------------------------------------
)Hint:    Scale
)Icon_b:  pr-wid-b-Scale.ppm
)Icon_w:  pr-wid-w-Scale.ppm

activebackground:    color        #ececec
background:          color        #d9d9d9
bigincrement:        float        0.0
borderwidth:         dim          2
command:             command      None
cursor:              cursor       None
digits:              cvar         None fis
font:                font         None
foreground:          color        Black
from_:               float        0.0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
label:               text         None
length:              dim          100
orient:              orient       vertical
pyclass:             pyclass      Scale
relief:              relief       flat
repeatdelay:         int          300
repeatinterval:      int          100
resolution:          float        1.0
showvalue:           boolean      1
sliderlength:        dim          30
sliderrelief:        relief       raised
state:               state        normal
takefocus:           takefocus    None
tickinterval:        float        0.0
to:                  float        100.0
troughcolor:         color        #c3c3c3
variable:            cvar         None fis
width:               dim          15

#-------------------------------------------------------------------------------
[widget Tkinter Scrollbar]
#-------------------------------------------------------------------------------
)Hint:    Scrollbar
)Icon_b:  pr-wid-b-Scrollbar.ppm
)Icon_w:  pr-wid-w-Scrollbar.ppm

activebackground:    color        #ececec
activerelief:        relief       raised
background:          color        #d9d9d9
borderwidth:         dim          2
command:             command      None
cursor:              cursor       None
elementborderwidth:  dim          -1
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
jump:                boolean      0
orient:              orient       vertical
pyclass:             pyclass      Scrollbar
relief:              relief       sunken
repeatdelay:         int          300
repeatinterval:      int          100
takefocus:           takefocus    None
troughcolor:         color        #c3c3c3
width:               dim          15

#-------------------------------------------------------------------------------
[widget Tkinter Text]
#-------------------------------------------------------------------------------
)Hint:    Text
)Icon_b:  pr-wid-b-Text.ppm
)Icon_w:  pr-wid-w-Text.ppm

background:          color        #d9d9d9
borderwidth:         dim          2
cursor:              cursor       xterm
exportselection:     boolean      1
font:                font         None
foreground:          color        Black
height:              int          24
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          1
insertbackground:    color        Black
insertborderwidth:   dim          0
insertofftime:       int          300
insertontime:        int          600
insertwidth:         dim          2
padx:                dim          1
pady:                dim          1
pyclass:             pyclass      Text
relief:              relief       sunken
selectbackground:    color        #c3c3c3
selectborderwidth:   dim          1
selectforeground:    color        Black
setgrid:             boolean      0
spacing1:            dim          0
spacing2:            dim          0
spacing3:            dim          0
state:               state        normal
tabs:                tabs         None
takefocus:           takefocus    None
width:               int          80
wrap:                wrap         char
xscrollcommand:      command      None
yscrollcommand:      command      None

#-------------------------------------------------------------------------------
[widget Tkinter Menu]
#-------------------------------------------------------------------------------
)Hint:    Menu
)Icon_b:  pr-wid-b-Menu.ppm
)Icon_w:  pr-wid-w-Menu.ppm

activebackground:   color         #ececec
activeborderwidth:  dim           2
activeforeground:   color         Black
background:         color         #d9d9d9
borderwidth:        dim           2
cursor:             cursor        arrow
disabledforeground: color         #a3a3a3
font:               font          None
foreground:         color         Black
postcommand:        command       None
pyclass:            pyclass       Menu
relief:             relief        raised
selectcolor:        color         #b03060
takefocus:          takefocus     0
tearoff:            boolean       1
tearoffcommand:     command       None
title:              text          None
type:               menutype      normal

#-------------------------------------------------------------------------------
[widget Tkinter Menubutton]
#-------------------------------------------------------------------------------
#----- Menubutton widget, obsolete since Tk8.0. -----
)Hint:    Menubutton
)Icon_b:  pr-wid-b-Menubutton.ppm
)Icon_w:  pr-wid-w-Menubutton.ppm

activebackground:    color        #ececec
activeforeground:    color        Black
anchor:              anchor       center
background:          color        #d9d9d9
bitmap:              bitmap       None
borderwidth:         dim          2
cursor:              cursor       None
direction:           direction    below
disabledforeground:  color        #a3a3a3
font:                font         None
foreground:          color        Black
height:              int          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          0
image:               image        None
indicatoron:         boolean      0
justify:             justify      center
menu:                text         None
padx:                dim          5
pady:                dim          4
pyclass:             pyclass      Menubutton
relief:              relief       flat
state:               state        normal
takefocus:           takefocus    0
text:                text         None
textvariable:        cvar         None  s
underline:           int          -1
width:               int          0
wraplength:          dim          0

#-------------------------------------------------------------------------------
[widget Tkinter Toplevel]
#-------------------------------------------------------------------------------
#----- Toplevel widget, e.g. for dialogs. -----
)Hint:    Toplevel
)Icon_b:  None
)Icon_w:  None

background:          color        #d9d9d9
borderwidth:         dim          0
class_:              text         Toplevel
cursor:              cursor       None
height:              int          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          0
#menu:               ---          None
pyclass:             pyclass      Toplevel
relief:              relief       flat
#screen:             ---          None
takefocus:           takefocus    0
#use:                ---          None
#visual:             ---          None
width:               int          0

#-------------------------------------------------------------------------------
[widget Tkinter Frame]
#-------------------------------------------------------------------------------
#----- Frame widget which may contain other widgets and can have a 3D border. -----
)Hint:    Frame
)Icon_b:  None
)Icon_w:  None

background:          color        #d9d9d9
borderwidth:         dim          0
class_:              text         Frame
#colormap:           ---          None
#container:          ---          0
cursor:              cursor       None
height:              int          0
highlightbackground: color        #d9d9d9
highlightcolor:      color        Black
highlightthickness:  dim          0
pyclass:             pyclass      Frame
relief:              relief       flat
takefocus:           takefocus    0
#visual:             ---          None
width:               int          0

#-------------------------------------------------------------------------------
[widget Pmw ButtonBox]
#-------------------------------------------------------------------------------
)Hint:    ButtonBox
)Icon_b:  pr-wid-b-PmwButtonBox.ppm
)Icon_w:  pr-wid-w-PmwButtonBox.ppm

frame:               pmwcomp      Tkinter.Frame 0
hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
orient:              orient       horizontal
padx:                dim          3
pady:                dim          3
pyclass:             pyclass      ButtonBox

#-------------------------------------------------------------------------------
[widget Pmw ComboBox]
#-------------------------------------------------------------------------------
)Hint:    ComboBox
)Icon_b:  pr-wid-b-PmwComboBox.ppm
)Icon_w:  pr-wid-w-PmwComboBox.ppm

arrowbutton:         pmwcomp      Tkinter.Canvas 0
autoclear:           boolean      0
buttonaspect:        float        1.0
dropdown:            boolean      1
entryfield:          pmwcomp      Pmw.EntryField 0
fliparrow:           boolean      0
history:             boolean      1
hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
listheight:          int          200 
popup:               pmwcomp      Tkinter.Toplevel 0
pyclass:             pyclass      ComboBox
scrolledlist:        pmwcomp      Pmw.ScrolledListBox 0
selectioncommand:    command      None
unique:              boolean      1

#-------------------------------------------------------------------------------
[widget Pmw Counter]
#-------------------------------------------------------------------------------
)Hint:    Counter
)Icon_b:  pr-wid-b-PmwCounter.ppm
)Icon_w:  pr-wid-w-PmwCounter.ppm

autorepeat:          boolean      1
buttonaspect:        float        1.0
datatype:            pmwdatatype  integer
downarrow:           pmwcomp      Tkinter.Canvas 0
entryfield:          pmwcomp      Pmw.EntryField 0
frame:               pmwcomp      Tkinter.Frame -1
hull:                pmwcomp      Tkinter.Frame 0
increment:           float        1
initwait:            int          300
label:               pmwcomp      Tkinter.Label -1
labelmargin:         int          0
labelpos:            labelpos     None  frame label
orient:              orient       horizontal
padx:                dim          0
pady:                dim          0
pyclass:             pyclass      Counter
repeatrate:          int          50
uparrow:             pmwcomp      Tkinter.Canvas 0

#-------------------------------------------------------------------------------
[widget Pmw EntryField]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    EntryField
)Icon_b:  pr-wid-b-PmwEntryField.ppm
)Icon_w:  pr-wid-w-PmwEntryField.ppm

command:            command         None
entry:              pmwcomp         Tkinter.Entry 0
errorbackground:    color           pink
extravalidators:    verbatim        None
hull:               pmwcomp         Tkinter.Frame 0
invalidcommand:     command         None
label:              pmwcomp         Tkinter.Label -1
labelmargin:        dim             0
labelpos:           labelpos        None label
modifiedcommand:    command         None
pyclass:            pyclass         EntryField
validate:           verbatim        None
value:              text            None    

#-------------------------------------------------------------------------------
[widget Pmw Group]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    Group
)Icon_b:  pr-wid-b-PmwGroup.ppm
)Icon_w:  pr-wid-w-PmwGroup.ppm

groupchildsite:      pmwcomp      Tkinter.Frame 0
hull:                pmwcomp      Tkinter.Frame 0
pyclass:             pyclass      Group
ring:                pmwcomp      Tkinter.Frame 0
tag:                 pmwcomp      Tkinter.Label 0
tagindent:           dim          10

#The 'ring' component has two non-standard defaults
.ring.borderwidth: 2
.ring.relief: groove

#-------------------------------------------------------------------------------
[widget Pmw LabeledWidget]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    LabeledWidget
)Icon_b:  pr-wid-b-PmwLabeledWidget.ppm
)Icon_w:  pr-wid-w-PmwLabeledWidget.ppm

hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelchildsite:      pmwcomp      Tkinter.Frame 0
labelmargin:         dim          0
labelpos:            labelpos     None label
pyclass:             pyclass      LabeledWidget

#-------------------------------------------------------------------------------
[widget Pmw MainMenuBar]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    MainMenuBar
)Icon_b:  pr-wid-b-PmwMainMenuBar.ppm
)Icon_w:  pr-wid-w-PmwMainMenuBar.ppm

balloon:            text          None
hotkeys:            boolean       1
hull:               pmwcomp       Tkinter.Menu 0
pyclass:            pyclass       MainMenuBar

#-------------------------------------------------------------------------------
[widget Pmw MenuBar]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    MenuBar
)Icon_b:  pr-wid-b-PmwMenuBar.ppm
)Icon_w:  pr-wid-w-PmwMenuBar.ppm

balloon:             text         None
hotkeys:             boolean      1
hull:                pmwcomp      Tkinter.Frame 0
padx:                dim          0
pyclass:             pyclass      MenuBar

#-------------------------------------------------------------------------------
[widget Pmw MessageBar]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    MessageBar
)Icon_b:  pr-wid-b-PmwMessageBar.ppm
)Icon_w:  pr-wid-w-PmwMessageBar.ppm

entry:               pmwcomp      Tkinter.Entry 0
hull:                pmwcomp      Tkinter.Frame 0
labelmargin:         dim          0
labelpos:            labelpos     None label
label:               pmwcomp      Tkinter.Label -1
messagetypes:        verbatim     None
pyclass:             pyclass      MessageBar
silent:              boolean      0

#-------------------------------------------------------------------------------
[widget Pmw NoteBook]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    NoteBook
)Icon_b:  pr-wid-b-PmwNoteBook.ppm
)Icon_w:  pr-wid-w-PmwNoteBook.ppm

arrownavigation:     boolean      1
borderwidth:         dim          2
createcommand:       command      None
hull:                pmwcomp      Tkinter.Canvas 0
lowercommand:        command      None
pagemargin:          dim          4
pyclass:             pyclass      NoteBook
raisecommand:        command      None
tabpos:              tabpos       n

#-------------------------------------------------------------------------------
[widget Pmw OptionMenu]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    OptionMenu
)Icon_b:  pr-wid-b-PmwOptionMenu.ppm
)Icon_w:  pr-wid-w-PmwOptionMenu.ppm

command:             command      None
hull:                pmwcomp      Tkinter.Frame 0
initialitem:         text         None
items:               verbatim     ()
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
menu:                pmwcomp      Tkinter.Menu 0
menubutton:          pmwcomp      Tkinter.Menubutton 0
pyclass:             pyclass      OptionMenu

#-------------------------------------------------------------------------------
[widget Pmw PanedWidget]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    Panedwidget
)Icon_b:  pr-wid-b-PmwPanedWidget.ppm
)Icon_w:  pr-wid-w-PmwPanedWidget.ppm

command:             command      None
handlesize:          dim          8
hull:                pmwcomp      Tkinter.Frame 0
orient:              orient       vertical
pyclass:             pyclass      PanedWidget
separatorrelief:     relief       sunken
separatorthickness:  dim          2

#-------------------------------------------------------------------------------
[widget Pmw RadioSelect]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    RadioSelect
)Icon_b:  pr-wid-b-PmwRadioSelect.ppm
)Icon_w:  pr-wid-w-PmwRadioSelect.ppm

buttontype:          buttontype   button
command:             command      None
frame:               pmwcomp      Tkinter.Frame 0
hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
orient:              orient       horizontal
padx:                dim          5
pady:                dim          5
pyclass:             pyclass      RadioSelect
selectmode:          plicity      single

#-------------------------------------------------------------------------------
[widget Pmw ScrolledCanvas]
#-------------------------------------------------------------------------------
)Emit:    ScrolledCanvas
)Module:  Pmw
)Hint:    ScrolledCanvas
)Icon_b:  pr-wid-b-PmwScrolledCanvas.ppm
)Icon_w:  pr-wid-w-PmwScrolledCanvas.ppm

border-frame:        boolean_c    0 borderframe
borderframe:         pmwcomp      Tkinter.Frame -1
canvas:              pmwcomp      Tkinter.Canvas 0
canvasmargin:        dim          0
horizscrollbar:      pmwcomp      Tkinter.Scrollbar 0
hscrollmode:         scrollmode   dynamic
hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
pyclass:             pyclass      ScrolledCanvas
scrollmargin:        dim          2
usehullsize:         boolean      0
vertscrollbar:       pmwcomp      Tkinter.Scrollbar 0
vscrollmode:         scrollmode   dynamic

#-------------------------------------------------------------------------------
[widget Pmw ScrolledField]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    ScrolledField
)Icon_b:  pr-wid-b-PmwScrolledField.ppm
)Icon_w:  pr-wid-w-PmwScrolledField.ppm

entry:                  pmwcomp         Tkinter.Entry 0
hull:                   pmwcomp         Tkinter.Frame 0
label:                  pmwcomp         Tkinter.Label -1
labelmargin:            dim             0
labelpos:               labelpos        None label
pyclass:                pyclass         ScrolledField
text:                   text            None

.entry.state: disabled

#-------------------------------------------------------------------------------
[widget Pmw ScrolledFrame]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Master:  .interior()
)Hint:    ScrolledFrame
)Icon_b:  None
)Icon_w:  None

border-frame:        boolean_c    0 borderframe
borderframe:         pmwcomp      Tkinter.Frame -1
clipper:             pmwcomp      Tkinter.Frame 0
frame:               pmwcomp      Tkinter.Frame 0
horizflex:           flex         fixed
horizfraction:       float        0.05
horizscrollbar:      pmwcomp      Tkinter.Scrollbar 0
hscrollmode:         scrollmode   dynamic
hull:                pmwcomp      Tkinter.Frame 0
label:               pmwcomp      Tkinter.Label -1
labelmargin:         dim          0
labelpos:            labelpos     None label
pyclass:             pyclass      ScrolledFrame
scrollmargin:        dim          2
usehullsize:         boolean      0
vertflex:            flex         fixed
vertfraction:        float        0.05
vertscrollbar:       pmwcomp      Tkinter.Scrollbar 0
vscrollmode:         scrollmode   dynamic

#-------------------------------------------------------------------------------
[widget Pmw ScrolledListBox]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    ScrolledListBox
)Icon_b:  pr-wid-b-PmwScrolledListBox.ppm
)Icon_w:  pr-wid-w-PmwScrolledListBox.ppm

                    
dblclickcommand:    command     None
horizscrollbar:     pmwcomp     Tkinter.Scrollbar 0
hscrollmode:        scrollmode  dynamic
hull:               pmwcomp     Tkinter.Frame 0
items:              verbatim    ()
label:              pmwcomp     Tkinter.Label -1
labelmargin:        dim         0
labelpos:           labelpos    None label
listbox:            pmwcomp     Tkinter.Listbox 0
pyclass:            pyclass     ScrolledListBox
scrollmargin:       dim         2
selectioncommand:   command     None
usehullsize:        boolean     0
vscrollmode:        scrollmode  dynamic
    
#-------------------------------------------------------------------------------
[widget Pmw ScrolledText]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    ScrolledText
)Icon_b:  pr-wid-b-PmwScrolledText.ppm
)Icon_w:  pr-wid-w-PmwScrolledText.ppm

border-frame:           boolean_c       0 borderframe
borderframe:            pmwcomp         Tkinter.Frame -1
hscrollmode:            scrollmode      dynamic
horizscrollbar:         pmwcomp         Tkinter.Scrollbar 0
hull:                   pmwcomp         Tkinter.Frame 0
label:                  pmwcomp         Tkinter.Label -1
labelmargin:            dim             0
labelpos:               labelpos        None label
pyclass:                pyclass         ScrolledText
scrollmargin:           dim             2
text:                   pmwcomp         Tkinter.Text 0
usehullsize:            boolean         0
vertscrollbar:          pmwcomp         Tkinter.Scrollbar 0
vscrollmode:            scrollmode      dynamic

#-------------------------------------------------------------------------------
[widget Pmw TimeCounter]
#-------------------------------------------------------------------------------
)Module:  Pmw
)Hint:    TimeCounter
)Icon_b:  pr-wid-b-PmwTimeCounter.ppm
)Icon_w:  pr-wid-w-PmwTimeCounter.ppm

autorepeat:             boolean         1
buttonaspect:           float           1.0
downhourarrow:          pmwcomp         Tkinter.Canvas 0
downminutearrow:        pmwcomp         Tkinter.Canvas 0
downsecondarrow:        pmwcomp         Tkinter.Canvas 0
frame:                  pmwcomp         Tkinter.Frame 0
hourentryfield:         pmwcomp         Pmw.EntryField 0
initwait:               int             300
hull:                   pmwcomp         Tkinter.Frame 0
label:                  pmwcomp         Tkinter.Label -1
labelmargin:            dim             0
labelpos:               labelpos        None label
max:                    text            None
min:                    text            None
minuteentryfield:       pmwcomp         Pmw.EntryField 0
secondentryfield:       pmwcomp         Pmw.EntryField 0
padx:                   dim             0
pady:                   dim             0
pyclass:                pyclass         TimeCounter
repeatrate:             int             50
uphourarrow:            pmwcomp         Tkinter.Canvas 0
upminutearrow:          pmwcomp         Tkinter.Canvas 0
upsecondarrow:          pmwcomp         Tkinter.Canvas 0
value:                  text            None
