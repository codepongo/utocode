(dp1
S'wid.pmw.timecounter.opt.uphourarrow'
p2
(dp3
S'Links'
p4
(lp5
sS'Text'
p6
S">wid.pmw.timecounter.arrow 'up','inc','hour'"
p7
sS'Hotlinks'
p8
(lp9
sS'Comments'
p10
(lp11
sS'Wip'
p12
I0
sS'Plurals'
p13
(lp14
sS'Abstracts'
p15
(lp16
ssS'option.selectborderwidth.generic'
p17
(dp18
g4
(lp19
S'&new mexico tech'
p20
asg6
S'{H@0 - selectborderwidth}\n\nThe width of the border to use around selected @1.\n\n$nmt'
p21
sg8
(lp22
sg10
(lp23
S'2005/03/06'
p24
asg12
I0
sg13
(lp25
sg15
(lp26
ssS'load.widgets.missing'
p27
(dp28
S'Links'
p29
(lp30
sS'Text'
p31
S'{H Missing widget</s> noticed at load time}\n\nIn the course of loading the @2 I came across @0 widget</s> which\n<is/are> requested but no widget of that name is defined in the configuration file. The following\nlist shows details about the widget</s> in question:\n\n@1\n\nIf you choose {GDelete Widgets} then I will continue with the load but the references\nto the missing widget</s> will be deleted. All code which is &maintained by $$ will be in good shape after\nthe deletion but any of your code that referenced the deleted widgets will need to be\nrevised.\n\nIf you choose {gCancel} then loading of the @4 is cancelled.'
p32
sS'Hotlinks'
p33
(lp34
sS'Comments'
p35
(lp36
S'2008-09-26'
p37
aS'@0 The number of missing widgets'
p38
aS'@1 List of missing widgets'
p39
aS'@2 project or from'
p40
asS'Wip'
p41
I1
sS'Plurals'
p42
(lp43
I0
asS'Abstracts'
p44
(lp45
ssS'code-edit.poptolinenumber'
p46
(dp47
g4
(lp48
S'&remembered line'
p49
aS'&editor actions'
p50
asg6
S'{HCode editor - Pop to line number}\n\n Key:   $tActionPopToLineNumber\n Menu: {fEdit/Pop to line number}\n\nThe top entry on the stack of &remembered line numbers is popped and we go to\nthat line.\n\nCode &editor actions'
p51
sg8
(lp52
sg10
(lp53
S'2005/04/07'
p54
asg12
I0
sg13
(lp55
sg15
(lp56
S'Code editor - Pop to line number'
p57
assS'wid.pmw.counter.opt.orient'
p58
(dp59
g4
(lp60
sg6
S'{HCounter - orient}\n\no {ghorizontal}\n   The arrow buttons appear to the left and right of the entryfield.\n\no {gvertical}\n   The arrow buttons appear above and below the entryfield.'
p61
sg8
(lp62
sg10
(lp63
S'2006/03/18'
p64
asg12
I0
sg13
(lp65
sg15
(lp66
ssS'wid.tkinter.listbox.opt.selectborderwidth'
p67
(dp68
g4
(lp69
sg6
S'>option.selectborderwidth.generic "Listbox", "text"'
p70
sg8
(lp71
sg10
(lp72
sg12
I0
sg13
(lp73
sg15
(lp74
ssS'form-properties-dialog-main'
p75
(dp76
g4
(lp77
S'=form.main.info'
p78
aS'=form-properties-dialog-other'
p79
asg6
S'{HMain Form "Derive-From"}\n\nThis dialog is where you can change the class from which the main form is to\nbe derived. Note that the main form of the main module {Lis\nspecial=form.main.info} and as such it can derive only from {fTkinter.Frame}\nor from {fPmw.ScrolledFrame}; that explains why the {fToplevel} radio button\nchoices are disabled in the dialog.\n\nThe form must derive, directly or indirectly, from either {gFrame},\n{gScrolledFrame} or from a class which provides equivalent functionality. If\nyou think you want to derive from {fCanvas}, {fText} or something like that,\n{lclick here=form-properties-dialog-other}. In any case, at project startup\ntime the {fFrame} or {fScrolledFrame} is packed into the root {fToplevel}\nwhich is created by Tkinter.\n\nFor advanced user, you can choose to derive from something which was itself\nderived from either {gFrame} or {gScrolledFrame}. This will be the case if\nyou want to use a class which was derived from one of these but adds\nadditional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does\nnot check that the class you specify is in fact derived from {gFrame},\n{gScrolledFrame} or something which provides equivalent functionality; if you\nlie about this you will just crash and burn when you go to run the resulting\ncode, OK?'
p80
sg8
(lp81
sg10
(lp82
S'2005/04/30'
p83
asg12
I0
sg13
(lp84
sg15
(lp85
S'Setting the class from which the main form derives'
p86
assS'wid.pmw.radioselect.opt.frame'
p87
(dp88
g4
(lp89
sg6
S'{HRadioSelect - frame}\n\nIf the label component has been created (that is, the {glabelpos} option is not\nNone), the frame component is created to act as the container of the buttons\ncreated by the add() method. If there is no label component, then no frame\ncomponent is created and the hull component acts as the container.'
p90
sg8
(lp91
sg10
(lp92
S'2006/03/21'
p93
asg12
I0
sg13
(lp94
sg15
(lp95
ssS'wid.tkinter.menu.opt.disabledforeground'
p96
(dp97
g4
(lp98
S'&color'
p99
asg6
S'{HMenu - disabledforeground}\n\nThe &color of the text for items whose state is DISABLED.'
p100
sg8
(lp101
sg10
(lp102
S'2005/04/19'
p103
asg12
I0
sg13
(lp104
sg15
(lp105
ssS'wid.pmw.scrolledcanvas.opt.labelpos'
p106
(dp107
g4
(lp108
sg6
S">option.pmw.labelpos.generic 'ScrolledCanvas'"
p109
sg8
(lp110
sg10
(lp111
sg12
I0
sg13
(lp112
sg15
(lp113
ssS'code-editor.actions-tab'
p114
(dp115
g4
(lp116
S'&config file'
p117
asg6
S"{HTabs}\n\n$$ avoids the {GTab} character almost totally. On reading a code file, $$\nconverts {gtab} characters to an appropriate number of spaces; that's the end of\nwhat it does with tabs.\n\nInternally all whitespace is represented by spaces. When files are written out,\nthey have spaces but no tabs. Pressing the {gTab} key invokes the text editor\n{gindent} action which injects however many spaces are necessary for the cursor\nto land on a multiple of the {gindent} setting but that's all. The indent value\nis specified in the &config file.\n\nRelated edit actions available:\n\n o {gOutdent}, {f$tActionOutdent}, is the inverse of {gindent}; it backs up\n   deleting spaces until the cursor is on a multiple of the {gindent} amount (or\n   until it runs out of spaces to delete).\n\n o {gIndentBlock}, {f$tActionIndentBlock}, indents every line in the currently\n   selected block by the {gindent} amount.\n\n o {gOutdentBlock}, {f$tActionOutdentBlock}, attempts to outdent every line in\n   the currently selected block by the {goutdent} amount."
p118
sg8
(lp119
sg10
(lp120
S'2005/03/07'
p121
asg12
I0
sg13
(lp122
sg15
(lp123
S'$$ avoids tabs where possible'
p124
assS'wid.tkinter.listbox.opt.pyclass'
p125
(dp126
g4
(lp127
sg6
S'>option.pyclass.generic "Listbox"'
p128
sg8
(lp129
sg10
(lp130
sg12
I0
sg13
(lp131
sg15
(lp132
ssS'wid.pmw.scrolledtext.opt.horizscrollbar'
p133
(dp134
g4
(lp135
sg6
S'{HScrolledText - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is Scrollbar.'
p136
sg8
(lp137
sg10
(lp138
S'2006/03/23'
p139
asg12
I0
sg13
(lp140
sg15
(lp141
ssS'wid.pmw.optionmenu.overview'
p142
(dp143
g4
(lp144
sg6
S'{HWhat is: An OptionMenu widget}\n\nAn option menu consists of a menu button and an associated menu which pops up\nwhen the button is pressed. The text displayed in the menu button is updated\nwhenever an item is selected in the menu. The currently selected value can be\nretrieved from the megawidget.'
p145
sg8
(lp146
sg10
(lp147
S'2006/03/21'
p148
asg12
I0
sg13
(lp149
sg15
(lp150
S'What is: An OptionMenu widget'
p151
assS'wid.tkinter.checkbutton.opt.command'
p152
(dp153
g4
(lp154
sg6
S'>option.command.generic "Checkbutton", "the user changes the state of the @0"'
p155
sg8
(lp156
sg10
(lp157
sg12
I0
sg13
(lp158
sg15
(lp159
ssS'option.label.generic'
p160
(dp161
g4
(lp162
S'&new mexico tech'
p163
asg6
S"{H@0 - label}\n\nYou can display a label within the @0 widget by setting this option to the\n@0's text. The label appears in the top left corner if the @0 is horizontal,\nor the top right corner if vertical.\n\nThe default is no label.\n\n$nmt"
p164
sg8
(lp165
sg10
(lp166
S'2005/03/04'
p167
asg12
I0
sg13
(lp168
sg15
(lp169
ssS'code-edit.action.pastefile'
p170
(dp171
g4
(lp172
S'&editor actions'
p173
asg6
S'{HCode editor - Paste file}\n\n Key:   $tActionPasteFile\n Menu: {fEdit/Paste file}\n\n\nA file of your choosing is inserted at the current cursor location.\n\nCode &editor actions'
p174
sg8
(lp175
sg10
(lp176
S'2005/04/07'
p177
asg12
I0
sg13
(lp178
sg15
(lp179
S'Code editor - Paste file'
p180
assS'wid.pmw.combobox.opt.selectioncommand'
p181
(dp182
g4
(lp183
sg6
S">option.pmw.selectioncommand.generic 'ComboBox'"
p184
sg8
(lp185
sg10
(lp186
sg12
I0
sg13
(lp187
sg15
(lp188
ssS'forms.derivation.explained'
p189
(dp190
g4
(lp191
S'=form-properties-dialog-other'
p192
asg6
S"{HDerivation of forms}\n\n$$ forms have to derive, either directly or indirectly, from the widgets\n{gTkinter.Toplevel}, {gTkinter.Frame} {gPmw.ScrolledFrame} or from something\nwhich provides equivalent functionality.\n\no {BDirectly}\n   In this case the form class derives directly from the corresponding Tk\n  widget and the code to create the class (which is generated automatically\n  by $$) will look something like one of these:\n\n  {gclass MyForm(Toplevel):}\n   {gclass MyForm(Frame):}\n   {gclass MyForm(ScrolledFrame):}\n\no {BIndirectly}\n\n   In this case the form class derives from some widget which one way or\n  another is derived from either Toplevel, Frame, ScrolledFrame or\n  equivalent. For example, if {gSpam} is derived from {gEggs}, and {gEggs} is\n  derived from {gParrot} and {gParrot} is derived from {gFrame} then it is\n  perfectly acceptable to derive a $$ form from {gSpam}. The code to create\n  the class (which is automatically generated by $$) would, for the example\n  described, look like:\n\n  {gclass MyForm(Spam):}\n\n  $$ Doesn't check to make sure that what you are deriving from is correct.\n  It's up to you to make sure that what you are deriving from is itself\n  derived from {gToplevel}, {gFrame}, {gScrolledFrame} or something which is\n  compatible with them. If you lie about this you will just crash and burn.\n\n  If you think you want to derive a form from Canvas, Text or some other such\n  widget {lclick here=form-properties-dialog-other}."
p193
sg8
(lp194
sg10
(lp195
S'2005/05/18'
p196
asg12
I0
sg13
(lp197
sg15
(lp198
S'Derivation of forms explained'
p199
assS'wid.tkinter.scale.opt.pyclass'
p200
(dp201
g4
(lp202
sg6
S'>option.pyclass.generic "Scale"'
p203
sg8
(lp204
sg10
(lp205
sg12
I0
sg13
(lp206
sg15
(lp207
ssS'wid.tkinter.menubutton.opt.cursor'
p208
(dp209
g4
(lp210
sg6
S'>option.cursor.generic "Menubutton"'
p211
sg8
(lp212
sg10
(lp213
sg12
I0
sg13
(lp214
sg15
(lp215
ssS'wid.tkinter.menubutton.opt.wraplength'
p216
(dp217
g4
(lp218
sg6
S'>option.wraplength.generic "Menubutton"'
p219
sg8
(lp220
sg10
(lp221
sg12
I0
sg13
(lp222
sg15
(lp223
ssS'buffet.widget.scale'
p224
(dp225
g4
(lp226
sg6
S'>buffet.widget.generic "Scale"'
p227
sg8
(lp228
sg10
(lp229
sg12
I0
sg13
(lp230
sg15
(lp231
ssS'wid.tkinter.radiobutton.opt.relief'
p232
(dp233
g4
(lp234
sg6
S'>option.relief.generic "Radiobutton"'
p235
sg8
(lp236
sg10
(lp237
sg12
I0
sg13
(lp238
sg15
(lp239
ssS'bind.eventwizard.progress'
p240
(dp241
g4
(lp242
S'&event'
p243
aS'&event'
p244
asg6
S'{HEvent wizard - Progress Area}\n\nThe "Progress Indicator" at the top of the &Event String Wizard shows the\n&event string being built as you step through the process of making selections\nunder the Wizards direction.'
p245
sg8
(lp246
sg10
(lp247
sg12
I0
sg13
(lp248
sg15
(lp249
S'The Progress-Area at the top of the Bind Event Wizard'
p250
assS'wid.pmw.entryfield.opt.invalidcommand'
p251
(dp252
g4
(lp253
S'&command option'
p254
aS'&event'
p255
aS'&handler'
p256
asg6
S'{HEntryField - invalidcommand}\n\nThis &command option specifies the name of an &event &handler to\nbe executed when invalid text is entered and the text is restored to its\nprevious value (that is, when the {ivalidate} function returns Pmw.ERROR). It\nis also called if an attempt is made to set invalid text in a call to\n{fsetentry()}. If not specified, the usual action is to call {iself.bell}.'
p257
sg8
(lp258
sg10
(lp259
S'2006/03/19'
p260
asg12
I0
sg13
(lp261
sg15
(lp262
ssS'wid.tkinter.checkbutton.opt.offvalue'
p263
(dp264
g4
(lp265
sg6
S'>option.offvalue.generic "Checkbutton"'
p266
sg8
(lp267
sg10
(lp268
sg12
I0
sg13
(lp269
sg15
(lp270
ssS'form-properties-dialog'
p271
(dp272
g4
(lp273
S'&name rules'
p274
aS'=form-properties-dialog-other'
p275
asg6
S'{HForm Properties Dialog}\n\nA form has various properties and this dialog is where you set them.\n\n\n{BName}\n\nForm names have to conform to Python &name rules and they have to be\ndifferent than the name of any other form in this project.\n\n\n{BThis form to derive from}\n\nSpecifies the class from which this form is to be derived.\n\nThe form you are creating must derive, directly or indirectly, from either\n{gToplevel}, {gFrame}, {gScrolledFrame} or from a class which provides\nequivalent functionality. If you think you want to derive from {fCanvas},\n{fText} or something like that, {lclick\nhere=form-properties-dialog-other}.\n\nThe simple solution is to derive directly from {gToplevel}, {GFrame} or\n{gScrolledFrame} and if you are not totally sure about it, then this is\nthe solution for you; use the following two rules to help you decide\nbetween the two:\n\n n Derive from {gToplevel} if this form is designed to live in its own\n   private window on the screen. This is the case for dialogs and other\n   major components of an application.\n\n n Derive from {gFrame} or {gScrolledFrame} if this form is designed to be\n   built into something else. This is the case for user written widgets.\n\nFor advanced user, you can choose to derive from something which was\nitself derived from either {gToplevel}, {gFrame} or {gScrolledFrame}. This\nwill be the case if you want to use a class which was derived from one of\nthese but adds additional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Toplevel}\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does\nnot check that the class you specify is in fact derived from {gToplevel},\n{gFrame}, {gScrolledFrame} or something which provides equivalent\nfunctionality; if you lie about this you will just crash and burn when you\ngo to run the resulting code, OK?'
p276
sg8
(lp277
sg10
(lp278
S'2005/04/17'
p279
asg12
I0
sg13
(lp280
sg15
(lp281
S'The Form properties dialog'
p282
assS'wid.pmw.timecounter.opt.upminutearrow'
p283
(dp284
g4
(lp285
sg6
S">wid.pmw.timecounter.arrow 'up','inc','minute'"
p286
sg8
(lp287
sg10
(lp288
sg12
I0
sg13
(lp289
sg15
(lp290
ssS'wid.tkinter.entry.opt.insertontime'
p291
(dp292
g4
(lp293
sg6
S'>option.insertontime.generic "Entry"'
p294
sg8
(lp295
sg10
(lp296
sg12
I0
sg13
(lp297
sg15
(lp298
ssS'option.nametop.generic'
p299
(dp300
g4
(lp301
sg6
S"{H@0 - name}\n\nThis @0 is the outer-most container of the form and thus it's {gname}\noption sets the name of the class that constitutes the form.\n\nThis differs from the {gname} option of regular widgets and of sub-frames\nwhere the {gname} option specifies the name by which the widget is known\ninside the form."
p302
sg8
(lp303
sg10
(lp304
S'2006/03/26'
p305
asg12
I0
sg13
(lp306
sg15
(lp307
ssS'bind.change.choice'
p308
(dp309
g4
(lp310
S'&binding'
p311
aS'&binding'
p312
aS'&event'
p313
aS'&handler'
p314
aS'&binding'
p315
aS'&event'
p316
aS'&handler'
p317
aS'&binding'
p318
aS'&binding'
p319
aS'&handler'
p320
aS'&handler'
p321
aS'&binding'
p322
aS'&command option'
p323
aS'&handler'
p324
aS'&handler'
p325
aS'&binding'
p326
aS'&command option'
p327
aS'&binding'
p328
aS'&handler'
p329
aS'&handler'
p330
aS'&handler'
p331
aS'&binding'
p332
aS'&command option'
p333
aS'&handler'
p334
aS'&binding'
p335
aS'&handler'
p336
aS'&binding'
p337
aS'&command option'
p338
aS'&event'
p339
aS'&handler'
p340
aS'&binding'
p341
aS'&binding'
p342
aS'&handler'
p343
aS'&handler'
p344
aS'&binding'
p345
aS'&command option'
p346
aS'=howto.find.handler.references'
p347
asg6
S'{HEvent handler name change}\n\nYou just finished revising a &binding. Before you started the revision, the &binding\nreferred to an &event &handler named "@0". You changed the &binding so it now referrs to an\n&event &handler named "@1", which doesn\'t yet exist.\n\nIf this &binding were the only &binding that referred to the &handler "@0" then we would\nsimply have changed the name of the &handler to "@1" and carried on without bothering you.\nHowever, @2 other &binding</s> or &command option</s> (which could be in this or other\nwidgets) also refer<s/> to &handler "@0" and we need you to make a choice as to what happens\nnext.\n\no If your intent is to change the name of the &handler so that {ball} the &bindings and\n  &command options (including the current &binding) which used to refer to &handler "@0" now\n  will refer to &handler "@1" then click on the {gChange Name} button. This will change the\n  name of the &handler and update any &bindings and &command options as needed.\n\no If your intent is to create a new &handler named "@1" just for the current &binding, and\n  you want to leave &handler "@0" (and all the &bindings and &command options that refer to\n  it) alone then click on the {gNew Handler} button. This will create a new &event &handler\n  named "@1" and the current &binding will be the only &binding that refers to that\n  &handler. The &handler "@0" will continue to exist and any other &bindings and &command\n  options that refer to it will stay as-is.\n\nIf you are wondering where the other reference</s> <is/are> you can {Lfind\nout=howto.find.handler.references}.\n\nIf neither of the above descriptions match what you want to do, then click the {GCancel}\nbutton to exit without making any changes.'
p348
sg8
(lp349
sg10
(lp350
S'2005/05/14'
p351
aS'@0 The original name of the event handler'
p352
aS'@1 The new name of the event handler'
p353
aS'@2 The number of other references to the old handler name'
p354
asg12
I0
sg13
(lp355
I2
asg15
(lp356
ssS'load.options.reset'
p357
(dp358
g4
(lp359
S'&config file'
p360
aS'&option editor'
p361
aS'&config file'
p362
aS'&config file'
p363
asg6
S'{HInvalid options at load time}\n\nFor each widget defined in the &config file there are a bunch of options that you can set\nusing the &option editor. The @1 you are trying to load has at least one instance of a\nwidget with an option value which is not a valid value according to the current &config\nfile. This is probably the result of changes made to the config file, or of loading a @1 that\ncame from another $$ installation.\n\nThe &config file is the ultimate authority on what value options are allowed to have. If you\ncontinue then I will set each option in question to the default value for that option\naccording to the current config file. Your only alternate choice is to cancel loading of the\n@1.\n\nIn the list that follows {bModule} and {bForm} indicate where in the project the problem was\nfound. {bWidget} is the name by which the widget-instance was known within the form.\n{bOption} is the name of the option in question. {bOriginal} is the invalid value that came\nin with this @1 while {bRevised} is the default value that the option will be set to if you\ncontinue.\n\n@0'
p364
sg8
(lp365
sg10
(lp366
S'2006/03/30'
p367
aS'@0 List of info for user'
p368
aS"@1 'project' or 'form'"
p369
asg12
I0
sg13
(lp370
sg15
(lp371
ssS'wid.pmw.notebook.opt.borderwidth'
p372
(dp373
g4
(lp374
S'&default'
p375
asg6
S'{HNoteBok - borderwidth}\n\nThe width of the border drawn around each tab and around the selected page.\nThe &default is 2.'
p376
sg8
(lp377
sg10
(lp378
S'2006/03/21'
p379
asg12
I0
sg13
(lp380
sg15
(lp381
ssS'wid.pmw.combobox.opt.dropdown'
p382
(dp383
g4
(lp384
sg6
S'{HComboBox - dropdown}\n\nSpecifies whether the ComboBox should be dropdown or simple. The\ndefault is {gTrue}.'
p385
sg8
(lp386
sg10
(lp387
S'2006/03/18'
p388
asg12
I0
sg13
(lp389
sg15
(lp390
ssS'module.delete.confirmation'
p391
(dp392
g4
(lp393
S'&module'
p394
aS'&project'
p395
aS'&module'
p396
aS'&project'
p397
aS'&module'
p398
asg6
S'{HDo you really want to delete this module?}\n\nYou just asked to delete the &module "{b@0}" from the current &project. {BOnce\nthe module is deleted it can\'t be un-deleted} so be sure about this before\ngoing ahead.\n\nClick {gDelete} to delete the &module from the &project.\n\nClick {gCancel} to cancel the &module deletion.'
p399
sg8
(lp400
sg10
(lp401
S'2005/05/25'
p402
asg12
I0
sg13
(lp403
sg15
(lp404
ssS'wid.tkinter.button.opt.background'
p405
(dp406
g4
(lp407
sg6
S'>option.background.generic "Button"'
p408
sg8
(lp409
sg10
(lp410
sg12
I0
sg13
(lp411
sg15
(lp412
ssS'wid.tkinter.checkbutton.opt.foreground'
p413
(dp414
g4
(lp415
sg6
S'>option.foreground.generic "Checkbutton"'
p416
sg8
(lp417
sg10
(lp418
sg12
I0
sg13
(lp419
sg15
(lp420
ssS'wid.tkinter.menubutton.opt.width'
p421
(dp422
g4
(lp423
sg6
S'>option.width.generic "Menubutton"'
p424
sg8
(lp425
sg10
(lp426
sg12
I0
sg13
(lp427
sg15
(lp428
ssS'option-focus'
p429
(dp430
g4
(lp431
S'=method.universal.tk_focusfollowsmouse'
p432
aS'&event'
p433
aS'&binding'
p434
aS'&new mexico tech'
p435
asg6
S'{HFocus - Routing keyboard input}\n\nTo say a widget has focus means that keyboard input is currently directed to\nthat widget.\n\no By focus traversal, we mean the sequence of widgets that will be visited as\n  the user moves from widget to widget with the tab key. See below for the\n  rules for this sequence.\n\no You can traverse backwards using shift-tab.\n\no The Entry and Text widgets are intended to accept keyboard input, and if an\n  entry or text widget currently has the focus, any characters you type into\n  it will be added to its text. The usual editing characters such as\n  CursorLeft and CursorRight will have their usual effects.\n\no Because Text widgets can contain tab characters, you must use the special\n  key sequence control-tab to move the focus past a text widget.\n\no Most of the other types of widgets will normally be visited by focus\n  traversal, and when they have focus:\n\n  o Button widgets can be "pressed" by pressing the spacebar.\n  o Checkbutton widgets can be toggled between set and cleared states using\n    the spacebar.\n  o In Listbox widgets, the CursorUp and CursorDown keys scroll up or down\n    one line; the PageUp and PageDown keys scroll by pages; and the spacebar\n    selects the current line, or de-selects it if it was already selected.\n  o You can set a Radiobutton widget by pressing the spacebar.\n  o Horizontal Scale widgets respond to the CursorLeft and CursorRight keys,\n    and vertical ones respond to CursorUp and CursorDown.\n  o In a Scrollbar widget, the PageUp and PageDown keys move the scrollbar by\n    pageloads. The CursorUp and CursorDown keys will move vertical scrollbars\n    by units, and the CursorLeft and CursorRight keys will move horizontal\n    scrollbars by units.\n\no Many widgets are provided with an outline called the focus highlight that\n  shows the user which widget has the highlight. This is normally a thin\n  black frame located just outside the widget\'s border (if any). For widgets\n  that don\'t normally have a focus highlight (specifically, frames, labels,\n  and menus), you can set the highlightthickness option to a nonzero value to\n  make the focus highlight visible.\no You can also change the color of the focus highlight using the\n  highlightcolor option.\no Widgets of class Frame, Label, and Menu are not normally visited by the\n  focus. However, you can set their takefocus options to 1 to get them\n  included in focus traversal. You can also take any widget out of focus\n  traversal by setting its takefocus option to 0.\n\nThe order in which the tab key traverses the widgets is:\n\no For widgets that are children of the same parent, focus goes in the same\n  order the widgets were created.\no For parent widgets that contain other widgets (such as frames), focus\n  visits the parent widget first (unless its takefocus option is 0), then it\n  visits the child widgets, recursively, in the order they were created.\n\nTo sum up: to set up the focus traversal order of your widgets, create them\nin that order. Remove widgets from the traversal order by setting their\ntakefocus options to 0, and for those whose default takefocus option is 0,\nset it to 1 if you want to add them to the order.\n\nThe above describes the default functioning of input focus in Tkinter. There\nis another, completely different way to handle it: let the focus go wherever\nthe mouse goes; see {LUniversal Methods\n.tk_focusFollowsMouse()=method.universal.tk_focusfollowsmouse}\n\nYou can also add, change or delete the way any key on the keyboard functions\ninside any widget by using &event &bindings. \n$nmt'
p436
sg8
(lp437
S'focus'
p438
asg10
(lp439
S'2005/02/27'
p440
asg12
I0
sg13
(lp441
sg15
(lp442
S'Focus - Routing keyboard input'
p443
assS'wid.tkinter.toplevel.opt.highlightthickness'
p444
(dp445
g4
(lp446
sg6
S'>option.highlightthickness.generic "Toplevel"'
p447
sg8
(lp448
sg10
(lp449
sg12
I0
sg13
(lp450
sg15
(lp451
ssS'wid.tkinter.canvas.opt.yscrollincrement'
p452
(dp453
g4
(lp454
sg6
S'>option.yscrollincrement.generic "Canvas"'
p455
sg8
(lp456
sg10
(lp457
sg12
I0
sg13
(lp458
sg15
(lp459
ssS'option.default.generic'
p460
(dp461
g4
(lp462
S'&state'
p463
asg6
S'{H@0 - default}\n\nThis option is really "much ado about nothing" and is rarely used. Your\nchoices are:\n\nt {GNo border   } This is the default choice and simply draws the @0 as you\n  would expect.\n\nt {GBlank border} This choice causes a small (perhaps 4 pixel) border to be\n  drawn around the @0.\n\nt {GThin line   } This choice gives you the same small border around the @0\n  and draws a thin line in it.\n\nNote:\n\nThe above names for this option were invented by the $$ team. Tk and Tkinter\nuse wonderfully misleading names for this option, but if you care, here they\nare:\n\n o No border Tkinter calls {gdisabled}.\n o Blank border Tkinter calls {gnormal}.\n o Thin line Tkinter calls {gactive}.\n\nSoooo... The normal choice is called "{fdisabled}", a rarely used choice is\ncalled "{fnormal}" and another rarely used choice is called "{factive}".\nWonderful.\n\nLest there be any confusion this option is {bnot} how you disable a widget;\nfor that you use the &state option.'
p464
sg8
(lp465
sg10
(lp466
S'2005/03/02'
p467
asg12
I0
sg13
(lp468
sg15
(lp469
ssS'wid.pmw.scrolledframe.opt.horizflex'
p470
(dp471
g4
(lp472
S'&default'
p473
asg6
S"{HScrolledFrame - horizflex}\n\nSpecifies how the width of the scrollable interior frame should be resized\nrelative to the clipping frame.\n\n o If {g'fixed'}, the interior frame is set to the natural width, as\n   requested by the child widgets of the frame.\n\n o If {g'expand'} and the requested width of the interior frame is less than\n   the width of the clipping frame, the interior frame expands to fill the\n   clipping frame.\n\n o If {g'shrink'} and the requested width of the interior frame is more than\n   the width of the clipping frame, the interior frame shrinks to the width\n   of the clipping frame.\n\n o If {g'elastic'}, the width of the interior frame is always set to the\n   width of the clipping frame.\n\nThe &default is {g'fixed'}."
p474
sg8
(lp475
sg10
(lp476
S'2006/03/22'
p477
asg12
I0
sg13
(lp478
sg15
(lp479
ssS'option.repeatinterval.generic'
p480
(dp481
g4
(lp482
S'&new mexico tech'
p483
asg6
S'{H@0 - repeatinterval}\n\nThis option controls how often slider movement will repeat when {fbutton-1}\nis held down in the trough.\n\nThe unit is milliseconds and the default is 100 mS.\n\n$nmt'
p484
sg8
(lp485
sg10
(lp486
S'2005/03/06'
p487
asg12
I0
sg13
(lp488
sg15
(lp489
ssS'wid.pmw.group.opt.tag'
p490
(dp491
g4
(lp492
sg6
S'{HGroup - tag}\n\nThe identifying tag displayed over the top edge of the enclosing ring. If the\npyclass for this component is None, ({fie: tag_pyclass = None}), then no tag\ncomponent is created.'
p493
sg8
(lp494
sg10
(lp495
S'2006/03/19'
p496
asg12
I0
sg13
(lp497
sg15
(lp498
ssS'dialog-handlerreference'
p499
(dp500
g4
(lp501
S'&maintained'
p502
aS'&binding'
p503
aS'&command option'
p504
aS'&event'
p505
aS'&handler'
p506
aS'&event'
p507
aS'&command option'
p508
aS'&bind editor'
p509
aS'&command option'
p510
aS'&command option'
p511
aS'&option editor'
p512
aS'&maintained'
p513
aS'&bind editor'
p514
aS'&option editor'
p515
aS'&handler'
p516
asg6
S'{hThe event handler references dialog}\n\nThis dialog shows a list of all $$ &maintained &bindings and &command\noptions which reference the &event &handler named "@0". Each reference\nshows, on the left, the name of the widget and, on the right, the &event\nstring or &command option within that widget which makes the reference.\n\no You can tell event strings because they are enclosed in angle brackets\n  {f<like this>}. Event string type references are mainted by the widget\'s\n  &bind editor.\n\no &Command options do not have angle brackets. &Command option style\n  references are maintainted by the widget\'s &option editor.\n\nThe references show in this dialog are {ionly} those references which are\n&maintained by $$ via the &bind editor and the &option editor. Any\nreferences to this &handler which you have placed in your code by hand are\n{inot} reflected here.'
p517
sg8
(lp518
sg10
(lp519
S'2006/02/05'
p520
asg12
I0
sg13
(lp521
sg15
(lp522
S'The event handler references dialog'
p523
assS'wid.pmw.group.opt.ring'
p524
(dp525
g4
(lp526
sg6
S"{HGroup - ring}\n\nThis component acts as the enclosing ring around the groupchildsite. The\ndefault {gborderwidth} is 2 and the default {grelief} is 'groove'."
p527
sg8
(lp528
sg10
(lp529
S'2006/03/19'
p530
asg12
I0
sg13
(lp531
sg15
(lp532
ssS'wid.pmw.scrolledlistbox.opt.hull'
p533
(dp534
g4
(lp535
sg6
S">option.pmw.hull.generic 'ScrolledListBox'"
p536
sg8
(lp537
sg10
(lp538
sg12
I0
sg13
(lp539
sg15
(lp540
ssS'option.bigincrement.generic'
p541
(dp542
g4
(lp543
sg6
S'{H@0 - bigincrement}\n\nSome interactions with the @0 cause its value to change by "large"\nincrements; this option specifies the magnitude of the large increments. If\nspecified as 0, the large increments default to 1/10 the range of the @0.'
p544
sg8
(lp545
sg10
(lp546
S'2005/02/27'
p547
asg12
I0
sg13
(lp548
sg15
(lp549
ssS'wid.pmw.scrolledtext.opt.hscrollmode'
p550
(dp551
g4
(lp552
sg6
S">option.pmw.hscrollmode.generic 'ScrolledText'"
p553
sg8
(lp554
sg10
(lp555
sg12
I0
sg13
(lp556
sg15
(lp557
ssS'wid.tkinter.checkbutton.opt.selectcolor'
p558
(dp559
g4
(lp560
sg6
S'>option.selectcolor.generic "Checkbutton"'
p561
sg8
(lp562
sg10
(lp563
sg12
I0
sg13
(lp564
sg15
(lp565
ssS'wid.tkinter.menubutton.opt.relief'
p566
(dp567
g4
(lp568
sg6
S'>option.relief.generic "Menubutton"'
p569
sg8
(lp570
sg10
(lp571
sg12
I0
sg13
(lp572
sg15
(lp573
ssS'wid.tkinter.text.opt.relief'
p574
(dp575
g4
(lp576
sg6
S'>option.relief.generic "Text"'
p577
sg8
(lp578
sg10
(lp579
sg12
I0
sg13
(lp580
sg15
(lp581
ssS'wid.tkinter.scrollbar.opt.cursor'
p582
(dp583
g4
(lp584
sg6
S'>option.cursor.generic "Scrollbar"'
p585
sg8
(lp586
sg10
(lp587
sg12
I0
sg13
(lp588
sg15
(lp589
ssS'option.background.generic'
p590
(dp591
g4
(lp592
S'&color'
p593
asg6
S'{H@0 - background}\n\nThe normal background &color for this @0.'
p594
sg8
(lp595
sg10
(lp596
S'2005/02/26'
p597
asg12
I0
sg13
(lp598
sg15
(lp599
ssS'wid.pmw.scrolledframe.opt.border-frame'
p600
(dp601
g4
(lp602
S'&default'
p603
asg6
S'{HScrolledFrame - borderframe option}\n\nIf true, the {gborderframe} component will be created. The &default is True.'
p604
sg8
(lp605
sg10
(lp606
S'2006/03/22'
p607
asg12
I0
sg13
(lp608
sg15
(lp609
ssS'layout.menu.project'
p610
(dp611
g4
(lp612
S'&layout area'
p613
aS'&project'
p614
aS'&project'
p615
aS'&project'
p616
aS'&project'
p617
aS'&project'
p618
aS'&project'
p619
aS'&module'
p620
aS'&form'
p621
aS'&module'
p622
aS'&project'
p623
aS'&module'
p624
aS'&project'
p625
aS'&form'
p626
aS'=new-project-details'
p627
aS'&project'
p628
aS'&project'
p629
aS'&module'
p630
aS'&project'
p631
aS'&module'
p632
aS'&project'
p633
aS'&module'
p634
aS'&project'
p635
aS'&project'
p636
aS'&project'
p637
aS'&project'
p638
aS'&project'
p639
asg6
S'{HLayout area - Project menu}\n\nThe &layout area {gProject} menu is where you mess with an entire &project.\n\no {gLoad Project}\n   Loads an existing &project from disk replacing the current &project. If\n  the current &project has been modified since the last save then a dialog\n  pops up giving you an opportunity to save.\n\no {gSave Project}\n   The current &project is saved to disk.\n\no {gRename Project}\n   Gives you the opportunity to rename the current &project. Note that the\n  the name of the project, the name of the main &module of the project and\n  the name of the main &form of the main &module\n   are one and the same thing. Thus renaming the &project will also rename\n  the main &module of the &project and the main &form of the main module.\n\no {gNew Project}\n   Creates a {Lnew project=new-project-details}, replacing the current\n  &project. If the current &project has been modified since the last save\n  then a dialog pops up giving you an opportunity to save.\n\no {gBuild Project}\n   Gathers up all the code for all the &modules of the &project and writes\n  them to disk as python source files. For every &module in the &project\n  there will be a corresponding file named "{g---.py}" where ---- is the name\n  of the &module.\n\no {gBuild + Run}\n   Builds the &project then runs it from within $$. If an error is\n  encountered the error dialog allows you to go directly to any line in the\n  error chain.\n\no {gSave + Build}\n   Saves the &project, then builds it.\n\no {gSave + Build + Run}\n   Saves the &project, builds it then runs it. This is the safest choice when\n  building and running your &project from inside $$.\n\no {gExit}\n   Wraps up $$ and returns to the operating system. If the current &project\n  has been modified since the last save then a dialog pops up giving you an\n  opportunity to save.'
p640
sg8
(lp641
sg10
(lp642
sg12
I0
sg13
(lp643
sg15
(lp644
S'The Layout-area project menu'
p645
aS'How to: Load a project'
p646
aS'How to: Save the current project'
p647
aS'How to: Rename the current project'
p648
aS'How to: Create a new project'
p649
aS'How to: Build (run) a project from inside $$.'
p650
aS'How to: Close $$ and return to the operating system.'
p651
assS'method.universal.tk_focusfollowsmouse'
p652
(dp653
g4
(lp654
S'&focus'
p655
aS'&new mexico tech'
p656
asg6
S'{HUniversal method - w.tk_focusFollowsMouse()}\n\nNormally, the input &focus cycles through a sequence of widgets determined by\ntheir hierarchy and creation order. You can, instead, tell Tkinter to force\nthe focus to be wherever the mouse is; just call this method. There is no\neasy way to undo it, however.\n\n$nmt'
p657
sg8
(lp658
sg10
(lp659
S'2005/02/27'
p660
asg12
I0
sg13
(lp661
sg15
(lp662
ssS'event-handler.whatis'
p663
(dp664
g4
(lp665
S'&event'
p666
aS'&event'
p667
aS'&binding'
p668
aS'&binding'
p669
aS'&bind editor'
p670
aS'&option editor'
p671
aS'&command option'
p672
aS'&maintained'
p673
aS'&maintained'
p674
aS'&bind editor'
p675
aS'&command option'
p676
aS'&option editor'
p677
aS'&code editor'
p678
aS'=dialog-handlerreference'
p679
aS'=dialog-handlerrename'
p680
aS'=dialog-handlerdelete'
p681
asg6
S'{HWhat is: An event handler}\n\nAn event handler is a python function which is called in response to some &event. A\nspecification that says "on this &event invoke that handler" is called a &binding.\n\nAlthough it is technically possible to create &bindings and event handlers manually in your\ncode, when using $$ you will almost always create bindings using the &bind editor (or the\n&option editor in the case of &command options) in which case the header of the\ncorresponding event handler is &maintained automatically for you. $$ &maintained event\nhandlers are kept in alphabetical order within the event handler section of the code, making\nthem easy to find.\n\nNote that you can quickly jump to the code of an event handler by double clicking on the\ncorresponding entry in the &bind editor or by double clicking on a &command option in the\n&option editor.\n\nWhen in the &code editor if you right-click over the header (the part on a different colored\nbackground) of an event handler a menu pops up from where you can:\n\n o {LFind out=dialog-handlerreference} which bindings and command options refer to the\n   handler.\n\n o {LRename=dialog-handlerrename} the handler.\n\n o {LDelete=dialog-handlerdelete} the handler.'
p682
sg8
(lp683
S'handler'
p684
asg10
(lp685
S'2006/02/08'
p686
asg12
I0
sg13
(lp687
sg15
(lp688
S'What is: An event handler'
p689
assS'wid.pmw.scrolledfield.opt.entry'
p690
(dp691
g4
(lp692
sg6
S"{HScrolledField - entry}\n\nThis is used to display the text and allows the user to scroll and select the\ntext. The state of this component is set to 'readonly' (or 'disabled' in\nearlier versions of Tcl/Tk which do not support 'readonly'), so that the user\nis unable to modify the text"
p693
sg8
(lp694
sg10
(lp695
S'2006/03/22'
p696
asg12
I0
sg13
(lp697
sg15
(lp698
ssS'wid.tkinter.button.opt.cursor'
p699
(dp700
g4
(lp701
sg6
S'>option.cursor.generic "Button"'
p702
sg8
(lp703
sg10
(lp704
sg12
I0
sg13
(lp705
sg15
(lp706
ssS'pack.option.pady'
p707
(dp708
g4
(lp709
S'&dimension'
p710
asg6
S'{HPack Option - pady}\n\nA &dimensioned number specifying the amount of padding to add outside the\nwidget on the top and bottom.'
p711
sg8
(lp712
sg10
(lp713
S'2005/05/19'
p714
asg12
I0
sg13
(lp715
sg15
(lp716
ssS'pack.option.padx'
p717
(dp718
g4
(lp719
S'&dimension'
p720
asg6
S'{HPack Option - padx}\n\nA &dimensioned number specifying the amount of padding to add outside the\nwidget on the left and right.'
p721
sg8
(lp722
sg10
(lp723
S'2005/05/19'
p724
asg12
I0
sg13
(lp725
sg15
(lp726
ssS'option.onvalue.generic'
p727
(dp728
g4
(lp729
S'&new mexico tech'
p730
asg6
S"{H@0 - onvalue}\n\nNormally, a @0's associated control variable will be set to 1 when it is set\n(on). You can supply an alternate value for the on state by setting onvalue\nto that value.\n\n$nmt"
p731
sg8
(lp732
sg10
(lp733
S'2004/03/06'
p734
asg12
I0
sg13
(lp735
sg15
(lp736
ssS'wid.tkinter.checkbutton.opt.activebackground'
p737
(dp738
g4
(lp739
sg6
S'>option.activebackground.generic "Checkbutton"'
p740
sg8
(lp741
sg10
(lp742
sg12
I0
sg13
(lp743
sg15
(lp744
ssS'wid.tkinter.menubutton.opt.anchor'
p745
(dp746
g4
(lp747
sg6
S'>option.anchor.generic "Menubutton"'
p748
sg8
(lp749
sg10
(lp750
sg12
I0
sg13
(lp751
sg15
(lp752
ssS'wid.tkinter.listbox.opt.foreground'
p753
(dp754
g4
(lp755
sg6
S'>option.foreground.generic "Listbox"'
p756
sg8
(lp757
sg10
(lp758
sg12
I0
sg13
(lp759
sg15
(lp760
ssS'wid.tkinter.menu.opt.selectcolor'
p761
(dp762
g4
(lp763
S'&color'
p764
aS'&new mexico tech'
p765
asg6
S'{HMenu - selectcolor}\n\nSpecifies the &color displayed in checkbuttons and radiobuttons when they are\nselected.\n\n$nmt'
p766
sg8
(lp767
sg10
(lp768
S'2005/04/19'
p769
asg12
I0
sg13
(lp770
sg15
(lp771
ssS'wid.tkinter.checkbutton.opt.height'
p772
(dp773
g4
(lp774
sg6
S'{HCheckbutton - width}\n\nAn integer specifying the height of the Checkbutton in {blines}.'
p775
sg8
(lp776
sg10
(lp777
S'2005/04/15'
p778
asg12
I0
sg13
(lp779
sg15
(lp780
ssS'wid.tkinter.button.opt.height'
p781
(dp782
g4
(lp783
sg6
S'{H@0 - Height}\n\nThe height of the button in pixels (for images or bitmaps), or in lines (for\ntext Buttons).'
p784
sg8
(lp785
sg10
(lp786
S'2005/04/08'
p787
asg12
I0
sg13
(lp788
sg15
(lp789
ssS'assist-font'
p790
(dp791
g4
(lp792
sg6
S"{HThe option-editor font assist dialog}\n\nThis dialog assists you when selecting a font. With one exception it's use should be\nreasonably obvious.\n\nUp at the top there is a {gUse default font} checkbutton.\n\nIf this checkbutton is selected and you click on {gOK} then no font is specified and the\nwidget in question will use whatever default font is in effect.\n\nIf this checkbutton is deselected then the font assist dialog springs to life and you get to\nrun abound pushing buttons and selecting fonts. A sample of the currently selected font is\nshown near the bottom. That sample text is live so you can enter your own sample text if\ndesired. When you click on {gOK} then the font selected will be set as the one to use with\nthe widget."
p793
sg8
(lp794
sg10
(lp795
S'2006/04/13'
p796
asg12
I0
sg13
(lp797
sg15
(lp798
S'The option-editor font assist dialog'
p799
assS'wid.tkinter.checkbutton.opt.underline'
p800
(dp801
g4
(lp802
sg6
S'>option.underline.generic "Checkbutton"'
p803
sg8
(lp804
sg10
(lp805
sg12
I0
sg13
(lp806
sg15
(lp807
ssS'wid.tkinter.radiobutton.opt.anchor'
p808
(dp809
g4
(lp810
S'&new mexico tech'
p811
asg6
S'{HRadiobutton - anchor}\n\nIf the widget inhabits a space larger than it needs, this option specifies\nwhere the radiobutton will sit in that space.\n\nThe &default is CENTER.\n\nFor example, if you set anchor=NE, the radiobutton will be placed in the top\nright corner of the available space.\n\n$nmt'
p812
sg8
(lp813
sg10
(lp814
S'2005/04/27'
p815
asg12
I0
sg13
(lp816
sg15
(lp817
ssS'wid.tkinter.scale.opt.label'
p818
(dp819
g4
(lp820
sg6
S'>option.label.generic "Scale"'
p821
sg8
(lp822
sg10
(lp823
sg12
I0
sg13
(lp824
sg15
(lp825
ssS'wid.tkinter.label.opt.image'
p826
(dp827
g4
(lp828
S'&image'
p829
asg6
S'{HLabel - image}\n\nAn &image to be displayed on this Label (instead of text). If you supply both\ntext and image options, then the text option is ignored and the image option\nis used.'
p830
sg8
(lp831
sg10
(lp832
S'2005/04/18'
p833
asg12
I0
sg13
(lp834
sg15
(lp835
ssS'wid.pmw.combobox.opt.listheight'
p836
(dp837
g4
(lp838
sg6
S'{HComboBox - listheight}\n\nThe height, in pixels, of the dropdown ListBox.'
p839
sg8
(lp840
sg10
(lp841
S'2006/03/18'
p842
asg12
I0
sg13
(lp843
sg15
(lp844
ssS'option.spacing3.generic'
p845
(dp846
g4
(lp847
S'&new mexico tech'
p848
asg6
S'{H@0 - spacing3}\n\nThis option specifies how much extra vertical space is added below each line\nof text. If a line wraps, this space is added only after the last line it\noccupies on the display.\n\n$nmt'
p849
sg8
(lp850
sg10
(lp851
S'2005/04/04'
p852
asg12
I0
sg13
(lp853
sg15
(lp854
ssS'wid.tkinter.frame.opt.class_'
p855
(dp856
g4
(lp857
sg6
S"{HFrame - class_}\n\nSpecifies a class for the window. This class will be used when querying the\noption database for the window's other options, and it will also be used\nlater for other purposes such as bindings. The class option can not be\nchanged with the configure widget command."
p858
sg8
(lp859
sg10
(lp860
S'2005/04/28'
p861
asg12
I0
sg13
(lp862
sg15
(lp863
ssS'wid.tkinter.entry.opt.insertborderwidth'
p864
(dp865
g4
(lp866
sg6
S'>option.insertborderwidth.generic "Entry"'
p867
sg8
(lp868
sg10
(lp869
sg12
I0
sg13
(lp870
sg15
(lp871
ssS'wid.tkinter.button.opt.state'
p872
(dp873
g4
(lp874
sg6
S'>option.state.generic "Button"'
p875
sg8
(lp876
sg10
(lp877
sg12
I0
sg13
(lp878
sg15
(lp879
ssS'gpl.txt'
p880
(dp881
g4
(lp882
sg6
S'{bGNU GENERAL PUBLIC LICENSE}\n {bVersion 2, June 1991}\n\nCopyright (C) 1989, 1991 Free Software Foundation, Inc.\n 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nEveryone is permitted to copy and distribute verbatim copies of this license document, but\nchanging it is not allowed.\n\n{bPreamble}\n\n The licenses for most software are designed to take away your freedom to share and change\nit.  By contrast, the GNU General Public License is intended to guarantee your freedom to\nshare and change free software--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software Foundation\'s software and to any\nother program whose authors commit to using it.  (Some other Free Software Foundation\nsoftware is covered by the GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n When we speak of free software, we are referring to freedom, not price.  Our General Public\nLicenses are designed to make sure that you have the freedom to distribute copies of free\nsoftware (and charge for this service if you wish), that you receive source code or can get\nit if you want it, that you can change the software or use pieces of it in new free\nprograms; and that you know you can do these things.\n\n To protect your rights, we need to make restrictions that forbid anyone to deny you these\nrights or to ask you to surrender the rights. These restrictions translate to certain\nresponsibilities for you if you distribute copies of the software, or if you modify it.\n\n For example, if you distribute copies of such a program, whether gratis or for a fee, you\nmust give the recipients all the rights that you have.  You must make sure that they, too,\nreceive or can get the source code.  And you must show them these terms so they know their\nrights.\n\n We protect your rights with two steps: (1) copyright the software, and (2) offer you this\nlicense which gives you legal permission to copy, distribute and/or modify the software.\n\n Also, for each author\'s protection and ours, we want to make certain that everyone\nunderstands that there is no warranty for this free software.  If the software is modified\nby someone else and passed on, we want its recipients to know that what they have is not the\noriginal, so that any problems introduced by others will not reflect on the original\nauthors\' reputations.\n\n Finally, any free program is threatened constantly by software patents.  We wish to avoid\nthe danger that redistributors of a free program will individually obtain patent licenses,\nin effect making the program proprietary. To prevent this, we have made it clear that any\npatent must be licensed for everyone\'s free use or not licensed at all.\n\n The precise terms and conditions for copying, distribution and modification follow.\n\n{bGNU GENERAL PUBLIC LICENSE}\n\n TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\nn {n0}This License applies to any program or other work which contains a notice placed by\n  the copyright holder saying it may be distributed under the terms of this General Public\n  License.  The "Program", below, refers to any such program or work, and a "work based on\n  the Program" means either the Program or any derivative work under copyright law: that is\n  to say, a work containing the Program or a portion of it, either verbatim or with\n  modifications and/or translated into another language.  (Hereinafter, translation is\n  included without limitation in the term "modification".) Each licensee is addressed as\n  "you".\n\n  Activities other than copying, distribution and modification are not covered by this\n  License; they are outside its scope.  The act of running the Program is not restricted,\n  and the output from the Program is covered only if its contents constitute a work based on\n  the Program (independent of having been made by running the Program). Whether that is true\n  depends on what the Program does.\n\nn You may copy and distribute verbatim copies of the Program\'s source code as you receive\n  it, in any medium, provided that you conspicuously and appropriately publish on each copy\n  an appropriate copyright notice and disclaimer of warranty; keep intact all the notices\n  that refer to this License and to the absence of any warranty; and give any other\n  recipients of the Program a copy of this License along with the Program.\n\n  You may charge a fee for the physical act of transferring a copy, and you may at your\n  option offer warranty protection in exchange for a fee.\n\nn You may modify your copy or copies of the Program or any portion of it, thus forming a\n  work based on the Program, and copy and distribute such modifications or work under the\n  terms of Section 1 above, provided that you also meet all of these conditions:\n\n  n {na}You must cause the modified files to carry prominent notices stating that you\n    changed the files and the date of any change.\n\n  n You must cause any work that you distribute or publish, that in whole or in part\n    contains or is derived from the Program or any part thereof, to be licensed as a whole\n    at no charge to all third parties under the terms of this License.\n\n  n If the modified program normally reads commands interactively when run, you must cause\n    it, when started running for such interactive use in the most ordinary way, to print or\n    display an announcement including an appropriate copyright notice and a notice that\n    there is no warranty (or else, saying that you provide a warranty) and that users may\n    redistribute the program under these conditions, and telling the user how to view a copy\n    of this License. (Exception: if the Program itself is interactive but does not normally\n    print such an announcement, your work based on the Program is not required to print an\n    announcement.)\n\n  These requirements apply to the modified work as a whole.  If identifiable sections of\n  that work are not derived from the Program, and can be reasonably considered independent\n  and separate works in themselves, then this License, and its terms, do not apply to those\n  sections when you distribute them as separate works.  But when you distribute the same\n  sections as part of a whole which is a work based on the Program, the distribution of the\n  whole must be on the terms of this License, whose permissions for other licensees extend\n  to the entire whole, and thus to each and every part regardless of who wrote it.\n\n  Thus, it is not the intent of this section to claim rights or contest your rights to work\n  written entirely by you; rather, the intent is to exercise the right to control the\n  distribution of derivative or collective works based on the Program.\n\n  In addition, mere aggregation of another work not based on the Program with the Program\n  (or with a work based on the Program) on a volume of a storage or distribution medium does\n  not bring the other work under the scope of this License.\n\nn You may copy and distribute the Program (or a work based on it, under Section 2) in object\n  code or executable form under the terms of Sections 1 and 2 above provided that you also\n  do one of the following:\n\n  n {na}Accompany it with the complete corresponding machine-readable source code, which\n    must be distributed under the terms of Sections 1 and 2 above on a medium customarily\n    used for software interchange; or,\n\n  n Accompany it with a written offer, valid for at least three years, to give any third\n    party, for a charge no more than your cost of physically performing source distribution,\n    a complete machine-readable copy of the corresponding source code, to be distributed\n    under the terms of Sections 1 and 2 above on a medium customarily used for software\n    interchange; or,\n\n  n Accompany it with the information you received as to the offer to distribute\n    corresponding source code.  (This alternative is allowed only for noncommercial\n    distribution and only if you received the program in object code or executable form with\n    such an offer, in accord with Subsection b above.)\n\n  The source code for a work means the preferred form of the work for making modifications\n  to it.  For an executable work, complete source code means all the source code for all\n  modules it contains, plus any associated interface definition files, plus the scripts used\n  to control compilation and installation of the executable.  However, as a special\n  exception, the source code distributed need not include anything that is normally\n  distributed (in either source or binary form) with the major components (compiler, kernel,\n  and so on) of the operating system on which the executable runs, unless that component\n  itself accompanies the executable.\n\n  If distribution of executable or object code is made by offering access to copy from a\n  designated place, then offering equivalent access to copy the source code from the same\n  place counts as distribution of the source code, even though third parties are not\n  compelled to copy the source along with the object code.\n\nn You may not copy, modify, sublicense, or distribute the Program except as expressly\n  provided under this License.  Any attempt otherwise to copy, modify, sublicense or\n  distribute the Program is void, and will automatically terminate your rights under this\n  License. However, parties who have received copies, or rights, from you under this License\n  will not have their licenses terminated so long as such parties remain in full compliance.\n\nn You are not required to accept this License, since you have not signed it. However,\n  nothing else grants you permission to modify or distribute the Program or its derivative\n  works.  These actions are prohibited by law if you do not accept this License.  Therefore,\n  by modifying or distributing the Program (or any work based on the Program), you indicate\n  your acceptance of this License to do so, and all its terms and conditions for copying,\n  distributing or modifying the Program or works based on it.\n\nn Each time you redistribute the Program (or any work based on the Program), the recipient\n  automatically receives a license from the original licensor to copy, distribute or modify\n  the Program subject to these terms and conditions. You may not impose any further\n  restrictions on the recipients\' exercise of the rights granted herein. You are not\n  responsible for enforcing compliance by third parties to this License.\n\nn If, as a consequence of a court judgment or allegation of patent infringement or for any\n  other reason (not limited to patent issues), conditions are imposed on you (whether by\n  court order, agreement or otherwise) that contradict the conditions of this License, they\n  do not excuse you from the conditions of this License.  If you cannot distribute so as to\n  satisfy simultaneously your obligations under this License and any other pertinent\n  obligations, then as a consequence you may not distribute the Program at all. For example,\n  if a patent license would not permit royalty-free redistribution of the Program by all\n  those who receive copies directly or indirectly through you, then the only way you could\n  satisfy both it and this License would be to refrain entirely from distribution of the\n  Program.\n\n  If any portion of this section is held invalid or unenforceable under any particular\n  circumstance, the balance of the section is intended to apply and the section as a whole\n  is intended to apply in other circumstances.\n\n  It is not the purpose of this section to induce you to infringe any patents or other\n  property right claims or to contest validity of any such claims; this section has the sole\n  purpose of protecting the integrity of the free software distribution system, which is\n  implemented by public license practices.  Many people have made generous contributions to\n  the wide range of software distributed through that system in reliance on consistent\n  application of that system; it is up to the author/donor to decide if he or she is willing\n  to distribute software through any other system and a licensee cannot impose that choice.\n\n  This section is intended to make thoroughly clear what is believed to be a consequence of\n  the rest of this License.\n\nn If the distribution and/or use of the Program is restricted in certain countries either by\n  patents or by copyrighted interfaces, the original copyright holder who places the Program\n  under this License may add an explicit geographical distribution limitation excluding\n  those countries, so that distribution is permitted only in or among countries not thus\n  excluded.  In such case, this License incorporates the limitation as if written in the\n  body of this License.\n\nn The Free Software Foundation may publish revised and/or new versions of the General Public\n  License from time to time.  Such new versions will be similar in spirit to the present\n  version, but may differ in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the Program specifies a version\n  number of this License which applies to it and "any later version", you have the option of\n  following the terms and conditions either of that version or of any later version\n  published by the Free Software Foundation. If the Program does not specify a version\n  number of this License, you may choose any version ever published by the Free Software\n  Foundation.\n\nn If you wish to incorporate parts of the Program into other free programs whose\n  distribution conditions are different, write to the author to ask for permission.  For\n  software which is copyrighted by the Free Software Foundation, write to the Free Software\n  Foundation; we sometimes make exceptions for this. Our decision will be guided by the two\n  goals of preserving the free status of all derivatives of our free software and of\n  promoting the sharing and reuse of software generally.\n\n  NO WARRANTY\n\nn BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO\n  THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE\n  COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY\n  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE\n  QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE,\n  YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nn IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT\n  HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED\n  ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n  CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING\n  BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\n  YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN\n  IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n{bEND OF TERMS AND CONDITIONS\n\nHow to Apply These Terms to Your New Programs}\n\nIf you develop a new program, and you want it to be of the greatest possible use to the\npublic, the best way to achieve this is to make it free software which everyone can\nredistribute and change under these terms.\n\nTo do so, attach the following notices to the program.  It is safest to attach them to the\nstart of each source file to most effectively convey the exclusion of warranty; and each\nfile should have at least the "copyright" line and a pointer to where the full notice is\nfound.\n\nt {f<one line to give the program\'s name and a brief idea of what it does.>\n   Copyright (C) <year>  <name of author>\n\n  This program is free software; you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation; either\n  version 2 of the License, or (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \n  See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with this program;\n  if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,\n  MA  02110-1301  USA}\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this when it starts in an\ninteractive mode:\n\nt {f}Gnomovision version 69, Copyright (C) year name of author\n   Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w\'. This is free\n  software, and you are welcome to redistribute it under certain conditions; type `show c\'\n  for details.}\n\nThe hypothetical commands `show w\' and `show c\' should show the appropriate parts of the\nGeneral Public License.  Of course, the commands you use may be called something other than\n`show w\' and `show c\'; they could even be mouse-clicks or menu items--whatever suits your\nprogram.\n\nYou should also get your employer (if you work as a programmer) or your school, if any, to\nsign a "copyright disclaimer" for the program, if necessary.  Here is a sample; alter the\nnames:\n\nt  Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision\'\n  (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into proprietary\nprograms.  If your program is a subroutine library, you may consider it more useful to\npermit linking proprietary applications with the library.  If this is what you want to do,\nuse the GNU Library General Public License instead of this License.'
p883
sg8
(lp884
sg10
(lp885
S'<2006/03/12'
p886
asg12
I0
sg13
(lp887
sg15
(lp888
ssS'wid.tkinter.menubutton.opt.disabledforeground'
p889
(dp890
g4
(lp891
sg6
S'>option.disabledforeground.generic "Menubutton"'
p892
sg8
(lp893
sg10
(lp894
sg12
I0
sg13
(lp895
sg15
(lp896
ssS'howto.module.rename'
p897
(dp898
g4
(lp899
S'&project'
p900
aS'&module'
p901
aS'&project'
p902
aS'&module'
p903
aS'&project'
p904
aS'&module'
p905
aS'&project'
p906
aS'&form'
p907
aS'&module'
p908
aS'&module'
p909
aS'&project'
p910
aS'&form'
p911
asg6
S'{HHow to: Rename a module}\n\n n Select the module to be renamed.\n\n n From the {gModules} menu click on {gRename current module}\n\n\nHaving renamed a module, the next time you build the &project the &module\nwill be saved under the new name. If you have already built the &project and\ncreated a copy of the &module under the old name, that file will continue to\nexist. If you want it to go away you will have to delete if yourself from the\noperating system.\n\nNote that the name of the &project, the name of the main &module of the\n&project, and the name of the main &form of the main &module are one and the\nsame. Therefore if you rename the main &module of the project this will\nrename the &project and the main &form of the main module as well.'
p912
sg8
(lp913
sg10
(lp914
S'2006/04/13'
p915
asg12
I0
sg13
(lp916
sg15
(lp917
S'How to: Rename a module'
p918
assS'wid.pmw.scrolledtext.overview'
p919
(dp920
g4
(lp921
sg6
S'{HWhat is: A ScrolledText widget}\n\nA scrolled text consists of a standard text widget with optional scrollbars\nwhich can be used to scroll the text. The scrollbars can be dynamic, which\nmeans that a scrollbar will only be displayed if it is necessary. That is, if\nthe text widget does not contain enough text (either horizontally or\nvertically), the scrollbar will be automatically hidden. If it is displayed,\nthe horizontal scrollbar is under the text widget. Similarly, if it is\ndisplayed, the vertical scrollbar is to the right of the text widget.'
p922
sg8
(lp923
sg10
(lp924
S'2006/03/21'
p925
asg12
I0
sg13
(lp926
sg15
(lp927
S'What is: A ScrolledText widget'
p928
assS'option.text.generic'
p929
(dp930
g4
(lp931
S'&image'
p932
aS'&bitmap'
p933
aS'&new mexico tech'
p934
asg6
S'{H@0 - text}\n\nText to be displayed on the @0. Use internal newlines to display multiple\ntext lines.\n\nNote that if an &image or a &bitmap is specified for this @0, then the text\noption is ignored and no text is shown.\n\n$nmt'
p935
sg8
(lp936
sg10
(lp937
S'2005/04/04'
p938
asg12
I0
sg13
(lp939
sg15
(lp940
ssS'buffet.slidearrow'
p941
(dp942
g4
(lp943
S'&widget buffet'
p944
asg6
S'{HWidget-buffet - Slide Arrow}\n\nThese arrows are part of the &widget buffet and are used to slide the widget\nicons left or right as desired. The arrows are only enabled if there are more\nwidget icons to display than will fit in the space available.\n\no If both the arrows are gray, then all the widget icons on this widget-buffet\n  tab are visible and the arrows are disabled.\n\no If one or both of the arrows are black, then there are more widget icons than\n  can be displayed at one time. Clicking a black arrow will slide the stack of\n  icons in the direction of the arrow, revealing some or all of the presently\n  hidden icons.'
p945
sg8
(lp946
sg10
(lp947
sg12
I0
sg13
(lp948
sg15
(lp949
S'The slide arrows of the widget buffet'
p950
assS'wid.pmw.counter.opt.downarrow'
p951
(dp952
g4
(lp953
sg6
S'{HCounter - downarrow}\n\nThe arrow button used for decrementing the counter. Depending of the value\nof {gorient}, it will appear on the left of or below the entry field.'
p954
sg8
(lp955
sg10
(lp956
S'2006/03/18'
p957
asg12
I0
sg13
(lp958
sg15
(lp959
ssS'option.font.generic'
p960
(dp961
g4
(lp962
S'&font'
p963
asg6
S'{H@0 - font}\n\nThe default &font to be used for text displayed on this @0.'
p964
sg8
(lp965
sg10
(lp966
S'2005/03/02'
p967
asg12
I0
sg13
(lp968
sg15
(lp969
ssS'option.xscrollincrement.generic'
p970
(dp971
g4
(lp972
S'&dimension'
p973
aS'&new mexico tech'
p974
asg6
S'{H@0 - xscrollincrement}\n\nNormally, canvases can be scrolled horizontally to any position. You get this\nbehavior by setting {gxscrollincrement} to zero.\n\nIf you set this option to some positive non-zero &dimension, the canvas can\nbe positioned only on multiples of that distance, and the value will be used\nfor scrolling by scrolling units, such as when the user clicks on the arrows\nat the ends of a scrollbar.\n\n$nmt'
p975
sg8
(lp976
sg10
(lp977
S'2005/04/07'
p978
asg12
I0
sg13
(lp979
sg15
(lp980
ssS'wid.pmw.scrolledlistbox.opt.scrollmargin'
p981
(dp982
g4
(lp983
S'&default'
p984
asg6
S'{HScrolledListBox - scrollmargin}\n\nThe distance between the scrollbars and the listbox widget. The &default is 2.'
p985
sg8
(lp986
sg10
(lp987
S'2006/03/23'
p988
asg12
I0
sg13
(lp989
sg15
(lp990
ssS'load.failed'
p991
(dp992
g4
(lp993
sg6
S"{HChoice following failed load}\n\n$$ recently attempted to load a project but encountered an error during the load.\nEither the file being loaded isn't a $$ project or the file at some point became\ncorrupt. In any case we were unable to load it and no additional information is\navailable about why it didn't load.\n\nAt this point you have a choice between loading a different existing project,\ncreating a new project or exiting $$."
p994
sg8
(lp995
sg10
(lp996
S'2006/03/19'
p997
asg12
I0
sg13
(lp998
sg15
(lp999
ssS'option.activerelief.generic'
p1000
(dp1001
g4
(lp1002
S'&relief'
p1003
asg6
S'{H@0 - activerelief}\n\nSpecifies the &relief to use when displaying the element that is active,\nif any. Elements other than the active element are always displayed with a\nraised relief.'
p1004
sg8
(lp1005
sg10
(lp1006
S'2005/02/26'
p1007
asg12
I0
sg13
(lp1008
sg15
(lp1009
ssS'buffet.widget.label'
p1010
(dp1011
g4
(lp1012
sg6
S'>buffet.widget.generic "Label"'
p1013
sg8
(lp1014
sg10
(lp1015
sg12
I0
sg13
(lp1016
sg15
(lp1017
ssS'control-variables'
p1018
(dp1019
g4
(lp1020
S'&radiobutton'
p1021
aS'=wid.tkinter.radiobutton.opt.variable'
p1022
aS'=assist.cvar'
p1023
asg6
S'{HControl Variables}\n\nTkinter Control Variables are special objects which:\n\n n hold a value, and\n n are used with certain Tkinter widgets.\n\nThe Tkinter widgets: {fButton, Checkbutton, Entry, Label, Menubutton,\nRadiobutton} and {fScale} work with control variables. The basic plot is:\n\n n You create an appropriate control variable, then\n n You create the widget, telling it about the control variable with which\n   it is to work.\n    Note that the control variable has to exist {ibefore} you create the\n   widget.\n\nTo create a control variable, you use a class constructor thus:\n\nt {fv = DoubleVar()\n   v = IntVar()\n   v = StringVar()}\n\nto create a float, an integer or a string control variable respectivly.\nControl variables support two methods:\n\nt {g.get()}\n\nReturns the present value.\n\nt {g.set(value)}\n\nChanges the current value. Any widgets which are connected to the control\nvariable will be updated when the main loop is next idle.\n\nThe one interesting aspect of control variables is that a single control\nvariable can be shared among several widgets. In particular a group of\n&radiobuttons should share (via their\n{lvariable=wid.tkinter.radiobutton.opt.variable} option) a single control\nvariable. This mediates making sure that only a single radio button is\npressed at any given time.\n\nThe option editor {lcontrol variable assist=assist.cvar} will, if desired,\nautomatically create the corresponding control variable when the widget is\ncreated.'
p1024
sg8
(lp1025
S'control variable'
p1026
asg10
(lp1027
S'2005/02/22'
p1028
asg12
I0
sg13
(lp1029
sg15
(lp1030
S'Control Variables'
p1031
assS'wid.pmw.timecounter.opt.initwait'
p1032
(dp1033
g4
(lp1034
S'&default'
p1035
asg6
S'{HTimeCounter - initwait}\n\nSpecifies the initial delay (in milliseconds) before a depressed arrow button\nautomatically starts to repeat counting. The &default is 300.'
p1036
sg8
(lp1037
sg10
(lp1038
S'2006/03/24'
p1039
asg12
I0
sg13
(lp1040
sg15
(lp1041
ssS'code-edit.edit-menu'
p1042
(dp1043
g4
(lp1044
S'&code editor'
p1045
aS'=code-edit.action.cut'
p1046
aS'=code-edit.action.cutappend'
p1047
aS'=code-edit.action.copy'
p1048
aS'=code-edit.action.copyappend'
p1049
aS'=code-edit.action.paste'
p1050
aS'=code-edit.selectall'
p1051
aS'=code-edit.deleteline'
p1052
aS'=code-edit.action.copytofile'
p1053
aS'=code-edit.action.pastefile'
p1054
aS'=code-edit.action.indentblock'
p1055
aS'=code-edit.action.outdentblock'
p1056
aS'=code-edit.action.top'
p1057
aS'=code-edit.action.bottom'
p1058
aS'=code-edit.action.goto'
p1059
aS'=code-edit.action.pushlinenumber'
p1060
aS'&remembered line'
p1061
aS'=code-edit.poptolinenumber'
p1062
aS'&remembered line'
p1063
aS'=code-edit.action.swapwithtop'
p1064
aS'&remembered line'
p1065
aS'=code-edit.action.forget'
p1066
aS'&remembered line'
p1067
aS'=code-editor.colorization'
p1068
asg6
S'{HCode Editor - Edit Menu}\n\nThis &code editor menu lets you access various text editing actions using the\nmouse.\n\nt {lCut=code-edit.action.cut} - Cut text to the clipboard.\nt {lCut append=code-edit.action.cutappend} - Cut and append to the clipboard.\nt {lCopy=code-edit.action.copy} - Copy text to the clipboard.\nt {lCopy append=code-edit.action.copyappend} - Copy and append to the clipboard.\nt {lPaste=code-edit.action.paste} - Insert the clipboard at the current location.\nt {lSelect all=code-edit.selectall} - Select all text.\nt ----------------------\nt {lDelete line=code-edit.DeleteLine} Delete the current line.\nt ----------------------\nt {lCopy to file=code-edit.action.copytofile} - Copy selection to a file.\nt {lPaste file=code-edit.action.pastefile} - Insert a file into the code.\nt ----------------------\nt {lIndent block=code-edit.action.indentblock} - Indent an entire block of text.\nt {lOutdent block=code-edit.action.outdentblock} - Outdent an entire block of\n  text.\nt ----------------------\nt {lFirst line=code-edit.action.top} - Goto the first line of code.\nt {lLast line=code-edit.action.bottom} - Got to the last line of code.\nt {lGoto=code-edit.action.goto} - Goto a specific line number.\nt {lPush line number=code-edit.action.pushlinenumber} - Add current line to list\n  of &remembered lines\nt {lPop to line number=code-edit.poptolinenumber} - Goto the most recent\n  &remembered line.\nt {lSwap with top=code-edit.action.swapwithtop} - Flip between the current and the\n  &remembered line.\nt {lForget=code-edit.action.forget} - Forget any &remembered lines.\nt ----------------------\nt {lRestart colorizer=code-editor.colorization} - Restart the colorizer from the\n  first visible line.'
p1069
sg8
(lp1070
sg10
(lp1071
S'2005/04/15'
p1072
asg12
I0
sg13
(lp1073
sg15
(lp1074
S'Code editor - Edit Menu'
p1075
assS'module.new.dialog.fileexists'
p1076
(dp1077
g4
(lp1078
S'&module'
p1079
aS'&project'
p1080
aS'&project'
p1081
aS'&module'
p1082
aS'&module'
p1083
aS'&project'
p1084
aS'&module'
p1085
aS'&module'
p1086
aS'&module'
p1087
asg6
S'{HFile already exists warning}\n\nYou just asked to add a &module named "{b@0}" to the current &project. When the\n&project is built all the code for the new &module will be gathered together and\nwritten to a file named "{b@1}". However, I note that there is already a file of\nthat name in existence.\n\nIf you go ahead and create a &module named "@0" then the first time the &project\nis built the existing file "@1" will be overwritten with the code for the new\n&module. If you are OK with this then so am I; just thought I should warn you that\nan existing file will be wiped out if you continue.\n\nIf you are {bnot} OK with this, then click {gNo} and either enter a different name\nfor the new &module or cancel the creation of a new &module.'
p1088
sg8
(lp1089
sg10
(lp1090
S'2005/05/25'
p1091
aS'@0 The requested name of the module'
p1092
aS'@1 The path for the python file'
p1093
asg12
I0
sg13
(lp1094
sg15
(lp1095
ssS'option.tearoffcommand.generic'
p1096
(dp1097
g4
(lp1098
S'&new mexico tech'
p1099
asg6
S"{H@0 - tearoffcommand}\n\nIf you would like your program to be notified when the user clicks on the\ntear-off entry in a menu, set this &command option to your procedure. It will be\ncalled with two arguments: the window ID of the parent window, and the window\nID of the new tear-off menu's root window.\n\n$nmt"
p1100
sg8
(lp1101
sg10
(lp1102
S'2005/04/04'
p1103
asg12
I0
sg13
(lp1104
sg15
(lp1105
ssS'gpl.warantee'
p1106
(dp1107
g4
(lp1108
S'=gpl'
p1109
aS'=layout.menu.about'
p1110
asg6
S'This is the section of the {bGNU General Public License} which deals with warantee issues.\n\n o Click {lhere=gpl} for the full text of the license.\n o Click {Lhere=layout.menu.about} for the $$ "about" box.\n\n NO WARRANTY\n\nn {n11}BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM,\n  TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE\n  COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY\n  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE\n  QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE,\n  YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\nn IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT\n  HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED\n  ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\n  CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING\n  BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\n  YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN\n  IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.'
p1111
sg8
(lp1112
sg10
(lp1113
sg12
I0
sg13
(lp1114
sg15
(lp1115
ssS'wid.tkinter.menu.opt.borderwidth'
p1116
(dp1117
g4
(lp1118
S'&dimension'
p1119
aS'&new mexico tech'
p1120
asg6
S'{HMenu - borderwidth}\n\nA &dimensioned number indicating the width of the border around all the\nchoices.\n\n$nmt'
p1121
sg8
(lp1122
sg10
(lp1123
S'2005/04/19'
p1124
asg12
I0
sg13
(lp1125
sg15
(lp1126
ssS'wid.tkinter.canvas.opt.height'
p1127
(dp1128
g4
(lp1129
S'&dimension'
p1130
asg6
S'{HCanvas - height}\n\nA &dimensioned number specifying the height of the Canvas.'
p1131
sg8
(lp1132
sg10
(lp1133
S'2005/04/15'
p1134
asg12
I0
sg13
(lp1135
sg15
(lp1136
ssS'assist.cvar'
p1137
(dp1138
g4
(lp1139
S'&control variable'
p1140
asg6
S"{HAssist - Control Variable}\n\nUse this to specify the &control variable for an option.\n\nIf you don't want a control variable for this option, leave it blank.\n\nIf you plan to create this control variable manually, or if some other widget is going\nto create the control variable then select the {BI will create this control variable\nmanually} choice.\n\nIf you want the control variable to be created automatically just before the widget is\ncreated then select the {BAutomatically create this control variable} choice.\n\nSome  control variables must be of a particular type. If this is the case there will be\na message saying so at the bottom of the assist. If this control variable can be of\nmore than one type then there will be radio buttons giving you a choice of the allowed\ntypes; select the one that corresponds to what you want."
p1141
sg8
(lp1142
sg10
(lp1143
sg12
I0
sg13
(lp1144
sg15
(lp1145
S'The option editor Control Variable assist dialog'
p1146
assS'wid.tkinter.scale.opt.variable'
p1147
(dp1148
g4
(lp1149
S'&control variable'
p1150
aS'=wid.tkinter.scale.opt.digits'
p1151
aS'&new mexico tech'
p1152
asg6
S'{HScale - variable}\n\nThe &control variable for this scale.\n\nCan be\n o {gIntVar}\n o {GDoubleVar} (float)\n o {gStringVar}\n\nIn the latter case, the numerical value will be converted to a string. See the the\n{ldigits=wid.tkinter.scale.opt.digits} option for more information on this\nconversion.\n\n$nmt'
p1153
sg8
(lp1154
sg10
(lp1155
S'2005/04/27'
p1156
asg12
I0
sg13
(lp1157
sg15
(lp1158
ssS'wid.pmw.panedwidget.opt.orient'
p1159
(dp1160
g4
(lp1161
S'&default'
p1162
asg6
S"{HPanedWidget - orient}\n\nSpecifies the orientation of the paned widget. This\nmay be 'horizontal' or 'vertical'. If 'vertical', the panes are stacked above\nand below each other, otherwise the panes are laid out side by side. The\n&default is 'vertical'."
p1163
sg8
(lp1164
sg10
(lp1165
S'2006/03/21'
p1166
asg12
I0
sg13
(lp1167
sg15
(lp1168
ssS'pack.option.anchor'
p1169
(dp1170
g4
(lp1171
S'&default'
p1172
asg6
S'{HPack Option - anchor}\n\nWhere the widget is placed within the space which is allocated for it.\n\n&Default is Center.\n\nThis option is meaningful only if the space allocated is larger than the actual\nwidget.'
p1173
sg8
(lp1174
sg10
(lp1175
S'2005/05/19'
p1176
asg12
I0
sg13
(lp1177
sg15
(lp1178
ssS'buffet.widget.button'
p1179
(dp1180
g4
(lp1181
sg6
S'>buffet.widget.generic "Button"'
p1182
sg8
(lp1183
sg10
(lp1184
sg12
I0
sg13
(lp1185
sg15
(lp1186
ssS'wid.pmw.entryfield.opt.name'
p1187
(dp1188
g4
(lp1189
sg6
S">option.name.generic 'EntryField'"
p1190
sg8
(lp1191
sg10
(lp1192
sg12
I0
sg13
(lp1193
sg15
(lp1194
ssS'wid.pmw.scrolledframe.opt.usehullsize'
p1195
(dp1196
g4
(lp1197
sg6
S">option.pmw.usehullsize.generic 'ScrolledFrame'"
p1198
sg8
(lp1199
sg10
(lp1200
sg12
I0
sg13
(lp1201
sg15
(lp1202
ssS'wid.tkinter.scrollbar.opt.highlightbackground'
p1203
(dp1204
g4
(lp1205
sg6
S'>option.highlightbackground.generic "Scrollbar"'
p1206
sg8
(lp1207
sg10
(lp1208
sg12
I0
sg13
(lp1209
sg15
(lp1210
ssS'option.menu.generic'
p1211
(dp1212
g4
(lp1213
S'&new mexico tech'
p1214
asg6
S"{H@0 - menu}\n\nTo associate the menubutton with a set of choices, set this option to the\nMenu object containing those choices. That menu object must have been created\nby passing the associated menubuttion to the constructor in it's first\nargument.\n\n$nmt"
p1215
sg8
(lp1216
sg10
(lp1217
S'2006/03/12'
p1218
asg12
I0
sg13
(lp1219
sg15
(lp1220
ssS'bind.event'
p1221
(dp1222
g4
(lp1223
S'&binding'
p1224
aS'&binding'
p1225
aS'&handler'
p1226
aS'&handler'
p1227
aS'=bind.eventwizard.basicevent'
p1228
asg6
S'{HEvent}\n\nAn event is something that happens within your application - for example, the user presses a\nkey or clicks the mouse - to which the application needs to react.\n\nWidgets have a lot of built-in behaviors. For example, buttons automatically change color as\nthe cursor moves over them and entry widgets automatically accumulate text typed into them.\n\nHowever, the event &binding capability of Tkinter allows you to add, change, or delete\nbehaviors.\n\nFirst, some definitions:\n\no An event is something that happens within your application.\n\no An event handler is a function in your application that gets called when an event occurs.\n\no A &binding is a connection between an event and an event &handler that says "when this\n  event happens call that &handler".\n\nClick {Lhere=bind.eventwizard.basicevent} for a list of popular Tkinter events.'
p1229
sg8
(lp1230
S'event'
p1231
asg10
(lp1232
S'2005/03/14'
p1233
asg12
I0
sg13
(lp1234
sg15
(lp1235
S'What is: An event'
p1236
assS'wid.tkinter.menubutton.opt.pady'
p1237
(dp1238
g4
(lp1239
sg6
S'>option.pady.generic "Menubutton", "text"'
p1240
sg8
(lp1241
sg10
(lp1242
sg12
I0
sg13
(lp1243
sg15
(lp1244
ssS'wid.tkinter.menubutton.opt.padx'
p1245
(dp1246
g4
(lp1247
sg6
S'>option.padx.generic "Menubutton", "text"'
p1248
sg8
(lp1249
sg10
(lp1250
sg12
I0
sg13
(lp1251
sg15
(lp1252
ssS'wid.pmw.messagebar.opt.pyclass'
p1253
(dp1254
g4
(lp1255
sg6
S'>option.pyclass.generic "MessageBar"'
p1256
sg8
(lp1257
sg10
(lp1258
sg12
I0
sg13
(lp1259
sg15
(lp1260
ssS'wid.tkinter.radiobutton.opt.highlightthickness'
p1261
(dp1262
g4
(lp1263
sg6
S'>option.highlightthickness.generic "Radiobutton"'
p1264
sg8
(lp1265
sg10
(lp1266
sg12
I0
sg13
(lp1267
sg15
(lp1268
ssS'option.anchor.generic'
p1269
(dp1270
g4
(lp1271
sg6
S'{H@0 - anchor}\n\nWhere the text is placed inside the @0. Can be one of:\n\n  o {gcenter}\n  o {gn}\n  o {gs}\n  o {ge}\n  o {gw}\n  o {gnw}\n  o {gne}\n  o {gsw}\n  o {gse}\n\nIf the @0 is exactly the right size to hold the text then this option has no\neffect. If the @0 is larger, then the text is placed close to the specified side\n(N, S, E, W) or corner (NW, NE, SW, SE). The &default is {gcenter}.'
p1272
sg8
(lp1273
sg10
(lp1274
S'2005/02/25'
p1275
asg12
I0
sg13
(lp1276
sg15
(lp1277
ssS'option.disabledforeground.generic'
p1278
(dp1279
g4
(lp1280
S'&color'
p1281
asg6
S'{H@0 - disabledforeground}\n\nThe foreground &color to use when the @0 is disabled.'
p1282
sg8
(lp1283
sg10
(lp1284
S'2005/03/02'
p1285
asg12
I0
sg13
(lp1286
sg15
(lp1287
ssS'wid.tkinter.button.opt.relief'
p1288
(dp1289
g4
(lp1290
sg6
S'>option.relief.generic "Button"'
p1291
sg8
(lp1292
sg10
(lp1293
sg12
I0
sg13
(lp1294
sg15
(lp1295
ssS'wid.pmw.buttonbox.overview'
p1296
(dp1297
g4
(lp1298
sg6
S'{HWhat is: A ButtonBox widget}\n\nA button box is a container megawidget which manages a number of buttons. One\nof these buttons may be specified as the default and it will be displayed\nwith the platform specific appearance for a default button. The buttons may\nbe laid out either horizontally or vertically.'
p1299
sg8
(lp1300
sg10
(lp1301
S'2006/03/19'
p1302
asg12
I0
sg13
(lp1303
sg15
(lp1304
S'What is: A ButtonBox widget'
p1305
assS'bindassist.compound'
p1306
(dp1307
g4
(lp1308
S'&bind editor'
p1309
aS'&bind editor'
p1310
asg6
S'{HBind editor - creating bindings to compound (eg Pmw) widgets.}\n\nWith regular old Tkinter widgets you bind to the widget and that\'s the end of\nthe story. With compound widgets, such as the Pmw widgets, each widget has\nseveral component widgets and those component widgets can in turn contain\nadditional widgets. The &bind editor can create bindings to the main widget\nor to any of the components.\n\nWhen you call up the bind assist on a compound widget there is an extra \nitem at the top of the assist dialog, like this:\n\n{P$imgpr-help-BindAssistCompound.ppm}\n\nThe dropdown box shows the widget itself (in the case of this example, a\nPmw Counter) and all the components that make up the widget. When\ncreating a new binding, the widget itself (here {bCounter1}} is shown but\nby using the dropdown box you can select any component you wish. The\nbinding you create will then be made against the selected component.\n\nOnce you have clicked OK to create the binding and are back in the\n&bind editor then a binding against a component is as shown in the second\nexample binding here:\n\n{P$imgpr-help-BindEditorCompound.ppm}\n\nWhere "{g-->entryfield.label}" indicates that the "{gvis}" binding is\nagainst the label component of the entryfield component of the current\nwidget.'
p1311
sg8
(lp1312
sg10
(lp1313
S'2006/04/13'
p1314
asg12
I0
sg13
(lp1315
sg15
(lp1316
S'Bind editor - creating bindings to compound (eg Pmw) widgets'
p1317
assS'wid.pmw.mainmenubar.opt.hull'
p1318
(dp1319
g4
(lp1320
sg6
S">option.pmw.hull.generic 'MainMenuBar'"
p1321
sg8
(lp1322
sg10
(lp1323
sg12
I0
sg13
(lp1324
sg15
(lp1325
ssS'option.xscrollcommand.generic'
p1326
(dp1327
g4
(lp1328
sg6
S'{H@0 - xscrollcommand}\n\nIf the @0 is scrollable, this attribute should be the {g.set()} method of the\nhorizontal scrollbar.'
p1329
sg8
(lp1330
sg10
(lp1331
S'2005/03/07'
p1332
asg12
I0
sg13
(lp1333
sg15
(lp1334
ssS'code-edit.action.copyappend'
p1335
(dp1336
g4
(lp1337
S'&editor actions'
p1338
asg6
S'{HCode editor - CopyAppend}\n\n Key:   $tActionCopyAppend\n Menu: {fEdit/Copy append}\n\nThe currently selected text is appended to any text already in the clipboard.\n\nThis is handy when you want to accumulate a number of items to be pasted into\na given location. The clipboard is cleared by plain {gCut} or {gCopy}\nbut not by {gCutAppend} nor by {gCopyAppend}.\n\nCode &editor actions'
p1339
sg8
(lp1340
sg10
(lp1341
S'2005/04/07'
p1342
asg12
I0
sg13
(lp1343
sg15
(lp1344
S'Code editor - Copy Append'
p1345
assS'wid.pmw.menubar.opt.pyclass'
p1346
(dp1347
g4
(lp1348
sg6
S'>option.pyclass.generic "MenuBar"'
p1349
sg8
(lp1350
sg10
(lp1351
sg12
I0
sg13
(lp1352
sg15
(lp1353
ssS'wid.tkinter.listbox.opt.height'
p1354
(dp1355
g4
(lp1356
sg6
S'>option.height.generic "Listbox"'
p1357
sg8
(lp1358
sg10
(lp1359
sg12
I0
sg13
(lp1360
sg15
(lp1361
ssS'wid.pmw.buttonbox.opt.pady'
p1362
(dp1363
g4
(lp1364
sg6
S'>option.pmw.pady.generic "ButtonBox", "button"'
p1365
sg8
(lp1366
sg10
(lp1367
sg12
I0
sg13
(lp1368
sg15
(lp1369
ssS'wid.pmw.buttonbox.opt.padx'
p1370
(dp1371
g4
(lp1372
sg6
S'>option.pmw.padx.generic "ButtonBox", "button", \'3\''
p1373
sg8
(lp1374
sg10
(lp1375
sg12
I0
sg13
(lp1376
sg15
(lp1377
ssS'option.offset.generic'
p1378
(dp1379
g4
(lp1380
sg6
S"{H@0 - offset}\n\nThis is an X,Y pair. Other than that I have no idea what it is used for\nand a quick search for documentation on it didn't turn up anything useful.\nIf you know what it's for get in touch with us: $mailto"
p1381
sg8
(lp1382
sg10
(lp1383
S'2005/03/04'
p1384
asg12
I0
sg13
(lp1385
sg15
(lp1386
ssS'option.textvariable.generic'
p1387
(dp1388
g4
(lp1389
S'&control variable'
p1390
aS'&new mexico tech'
p1391
asg6
S'{H@0 - textvariable}\n\nA &control variable of type {GStringVar()} that is associated with the text\non this @0. If the variable is changed, the new value will be displayed on\nthe @0.\n\n$nmt'
p1392
sg8
(lp1393
sg10
(lp1394
S'2005/04/05'
p1395
asg12
I0
sg13
(lp1396
sg15
(lp1397
ssS'bind.eventwizard.mouseclicks'
p1398
(dp1399
g4
(lp1400
S'&event'
p1401
asg6
S"{HEvent Wizard - Mouse Clicks}\n\nYour mouse &event can take place in response to one, two or three clicks. Select\none of the radio buttons to make your choice.\n\nOnce that's done, click on the {gNext} button to continue the process.\n\nTo change a previous choice, click on the {GBackUp} button."
p1402
sg8
(lp1403
sg10
(lp1404
S'2005/03/13'
p1405
asg12
I0
sg13
(lp1406
sg15
(lp1407
S'Bind Event Wizard - Mouse Clicks'
p1408
assS'wid.tkinter.button.opt.highlightthickness'
p1409
(dp1410
g4
(lp1411
sg6
S'>option.highlightthickness.generic "Button"'
p1412
sg8
(lp1413
sg10
(lp1414
sg12
I0
sg13
(lp1415
sg15
(lp1416
ssS'wid.pmw.labeledwidget.opt.labelchildsite'
p1417
(dp1418
g4
(lp1419
sg6
S'{HLabeledWidget - labelchildsite}\n\nThe frame which can contain other widgets to be labelled.'
p1420
sg8
(lp1421
sg10
(lp1422
S'2006/03/20'
p1423
asg12
I0
sg13
(lp1424
sg15
(lp1425
ssS'wid.tkinter.frame.opt.height'
p1426
(dp1427
g4
(lp1428
S'&dimension'
p1429
aS'&new mexico tech'
p1430
asg6
S'{HFrame - height}\n\nThe vertical &dimension of the new frame. This will be ignored unless you\nalso call {Gpack_propagate(0)} or {Ggrid_propagate(0)} on the frame.\n\n$nmt'
p1431
sg8
(lp1432
sg10
(lp1433
S'2005/04/28'
p1434
asg12
I0
sg13
(lp1435
sg15
(lp1436
ssS'wid.tkinter.checkbutton.opt.cursor'
p1437
(dp1438
g4
(lp1439
sg6
S'>option.cursor.generic "Checkbutton"'
p1440
sg8
(lp1441
sg10
(lp1442
sg12
I0
sg13
(lp1443
sg15
(lp1444
ssS'form.baseclassomitted'
p1445
(dp1446
g4
(lp1447
sg6
S'{HName of base class omitted}\n\nYour present setting of the radio buttons says that you want this form to be\nderived from a Python class which is itself derived from @0 (as opposed to\nderiving directly from @0). That\'s nice, but since the $$ mindreading module\nis behind schedule you\'re going to have to type in the name of the class from\nwhich this form is to be derived; there is an entry area just below the radio\nbuttons for this purpose.\n\nOn the other hand, if you want this form to be derived directly from @0 then\nyou should select the {G"@0"} radio button and try again.'
p1448
sg8
(lp1449
sg10
(lp1450
S'<2005/05/27'
p1451
asg12
I0
sg13
(lp1452
sg15
(lp1453
ssS'wid.tkinter.button.opt.font'
p1454
(dp1455
g4
(lp1456
sg6
S'>option.font.generic "Button"'
p1457
sg8
(lp1458
sg10
(lp1459
sg12
I0
sg13
(lp1460
sg15
(lp1461
ssS'wid.tkinter.menubutton.opt.textvariable'
p1462
(dp1463
g4
(lp1464
sg6
S'>option.textvariable.generic "Menubutton"'
p1465
sg8
(lp1466
sg10
(lp1467
sg12
I0
sg13
(lp1468
sg15
(lp1469
ssS'__notestoself__'
p1470
(dp1471
g4
(lp1472
sg6
S'{HNotes to self}\n\nSince this page carries no index entry it should never be visible to end users.\n\n{BText editor actions and keys}\n\nThe text editor has various actions (eg {ggoto}) and these are bound to various keys (eg\n{gAlt-l}). While the actions names are fixed, the keys to which they are bound vary based on\nthe config file and the current text editor scheme. Therefore, at startup and scheme change,\nwe set a bunch of substitutions in the global help substitution table.\n\nFor every editor action there is name you can use which will be substituted to the key bound\nto that action. For example, given a hypothetical editor action {gZot} which is currently\nbound to key {gAlt-z} then:\n\nt {g$tActionZot} will be substituted to {gAlt-z}\n\nNote what happens here to $tActionGoto. This allows us to talk in help messages about the\nparticular keys but have those key names show up properly in the context of the current\nconfig and scheme settings. How cool is that?\n\n{BName of current editor schema}\n\nWe also generate a substitution for {b$}{beditschema} which is replaced with the name of the\neditor schema currently in effect.\n\n{BImages}\n\nImages for use in Rapyd help should be placed in the same directory as the icons used by the\nmain program. We generate a substitution for the icon directory as {b$}{bimg}. Thus to\ninject image "spam" into the formatted page use {b$}{bimg/spam}}'
p1473
sg8
(lp1474
sg10
(lp1475
sg12
I0
sg13
(lp1476
sg15
(lp1477
ssS'wid.pmw.counter.opt.hull'
p1478
(dp1479
g4
(lp1480
sg6
S">option.pmw.hull.generic 'Counter'"
p1481
sg8
(lp1482
sg10
(lp1483
sg12
I0
sg13
(lp1484
sg15
(lp1485
ssS'layout.menu.about'
p1486
(dp1487
g4
(lp1488
S'=gpl'
p1489
asg6
S'{HAbout $$ version $version}\n\n$$ was written by a team of thousands who worked day and night for a Really Long time to make it go. The five\nhundred help messages took a bit of work too. Well all right, it was a team of a lot less than a thousand but the\nhelp messages and the working day and night is true enough.\n\n$$ is supplied under the terms of the {LGNU General Public License=gpl}.\n\nThe $$ web site is located at: {b$website}\n\nIt is the hope of the development team that $$ will prove to be a handy and useful open source programming tool. If\nyou would like to join the team or if you have have any constructive comments on $$, please contact us at:\n\nt {b$mailto}\n\n{B! ! ! ! ! ! ! ! ! !  IMPORTANT NOTE  ! ! ! ! ! ! ! ! ! !}\n\n When you email us at the above address (and we certainly hope you do) then you {bmust} put the word "{brapyd}"\nsomewhere in the subject line or your email will be silently deleted by our spam filers. Since this is a publicly\nvisible email account (it is mentioned on our web site) it attracts it\'s share of spam.\n\nDon\'t be shy - we like hearing from people!'
p1490
sg8
(lp1491
sg10
(lp1492
S"2007/01/05 Revised to add note about putting 'rapyd' in email subject line"
p1493
asg12
I0
sg13
(lp1494
sg15
(lp1495
S'About $$'
p1496
aS'Web site and email address for the $$ project'
p1497
assS'wid.pmw.scrolledframe.opt.clipper'
p1498
(dp1499
g4
(lp1500
sg6
S'{HScrolledFrame - clipper}\n\nThe frame which is used to provide a clipped view of the {gframe} component. If\nthe {gborderframe} option is true, this is created with a borderwidth of 0 to\novercome a known problem with using place to position widgets: if a widget\n(in this case the {gframe} component) is placed inside a frame (in this case the\n{gclipper} component) and it extends across one of the edges of the frame, then\nthe widget obscures the border of the frame. Therefore, if the clipper has no\nborder, then this overlapping does not occur.'
p1501
sg8
(lp1502
sg10
(lp1503
S'2006/03/22'
p1504
asg12
I0
sg13
(lp1505
sg15
(lp1506
ssS'wid.pmw.scrolledframe.opt.name'
p1507
(dp1508
g4
(lp1509
sg6
S">option.name.generic 'ScrolledFrame'"
p1510
sg8
(lp1511
sg10
(lp1512
sg12
I0
sg13
(lp1513
sg15
(lp1514
ssS'wid.tkinter.listbox.opt.highlightbackground'
p1515
(dp1516
g4
(lp1517
sg6
S'>option.highlightbackground.generic "Listbox"'
p1518
sg8
(lp1519
sg10
(lp1520
sg12
I0
sg13
(lp1521
sg15
(lp1522
ssS'bind.delete.handlertoo'
p1523
(dp1524
g4
(lp1525
S'&binding'
p1526
aS'&binding'
p1527
aS'&maintained'
p1528
aS'&binding'
p1529
aS'&command option'
p1530
aS'&event'
p1531
aS'&handler'
p1532
aS'&event'
p1533
aS'&handler'
p1534
aS'&binding'
p1535
aS'&event'
p1536
aS'&handler'
p1537
aS'&binding'
p1538
aS'&command option'
p1539
aS'&event'
p1540
aS'&handler'
p1541
aS'&event'
p1542
aS'&handler'
p1543
aS'&event'
p1544
aS'&handler'
p1545
aS'&handler'
p1546
aS'&binding'
p1547
aS'&event'
p1548
aS'&handler'
p1549
asg6
S'{HDeletion of event handler at bind-delete time}\n\nYou just asked to delete a &binding. I notice that once that &binding is deleted, no other\n$$ &maintained &binding nor &command option will refer to the &event &handler "@0" so you\nhave the opportunity to delete the &event &handler as well as the &binding.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that) or if you plan\n  to create new &bindings or &command options which will refer to that &event &handler then\n  clearly you want to choose {GKeep handler} to retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed use for it then\n  you might as well choose {GDelete handler} to delete the &handler rather than leaving\n  unused code hanging around your form.\n\no If you\'ve reconsidered and now don\'t want to delete the &binding nor delete the &event\n  &handler then click {gCancel}.'
p1550
sg8
(lp1551
sg10
(lp1552
S'2005/05/12'
p1553
aS'@0 The name of the handler'
p1554
asg12
I0
sg13
(lp1555
sg15
(lp1556
ssS'__attribution_nmt'
p1557
(dp1558
g4
(lp1559
sg6
S'{HThanks New Mexico Tech !}\n\nAlmost all the text of the $$ help pages pertaining to Tkinter were originally\nwritten by John W. Shipman and are reproduced here courtesy of New Mexico Tech.\n\nFurther information about New Mexico Tech is available at:\n\n t {Ghttp://www.nmt.edu/}\n\nAnd you can veiw the original Tkinter documentation here:\n\n t {Ghttp://www.nmt.edu/tcc/help/pubs/tkinter/}\n\nA heartfelt thanks is extended to New Mexico Tech for allowing the $$ project to\nmake use of their fine contribution to open source documentation.'
p1560
sg8
(lp1561
S'new mexico tech'
p1562
asg10
(lp1563
S'2005/02/27'
p1564
asg12
I0
sg13
(lp1565
sg15
(lp1566
S'New Mexico Tech supplied much of the Tkinter related documentation'
p1567
assS'wid.pmw.group.opt.tagindent'
p1568
(dp1569
g4
(lp1570
S'&default'
p1571
asg6
S'{HGroup - tagindent}\n\nThe distance from the left edge of the ring to the\nleft side of the tag component. \n\nThe &default is 10.'
p1572
sg8
(lp1573
sg10
(lp1574
S'2006/03/19'
p1575
asg12
I0
sg13
(lp1576
sg15
(lp1577
ssS'wid.pmw.radioselect.opt.buttontype'
p1578
(dp1579
g4
(lp1580
sg6
S"{HRadioSelect - buttontype}\n\nSpecifies the default type of buttons created by the {fadd()}  method. If\n'button', the default type is Tkinter.Button. If 'radiobutton', the default\ntype is Tkinter.Radiobutton. If 'checkbutton', the default type is\nTkinter.Checkbutton.\n\nIf 'radiobutton', single selection mode is automatically set. If\n'checkbutton', multiple selection mode is automatically set. The &default is\n'button'."
p1581
sg8
(lp1582
sg10
(lp1583
S'2006/03/21'
p1584
asg12
I0
sg13
(lp1585
sg15
(lp1586
ssS'option.length.generic'
p1587
(dp1588
g4
(lp1589
S'&dimension'
p1590
aS'&new mexico tech'
p1591
asg6
S'{H@0 - length}\n\nA &dimensioned number which sets the length of the @0 widget. This is the x\ndimension if the @0 is horizontal, or the y dimension if vertical.\n\nThe default is 100\n\n$nmt'
p1592
sg8
(lp1593
sg10
(lp1594
S'2005/03/04'
p1595
asg12
I0
sg13
(lp1596
sg15
(lp1597
ssS'buffet.widget.entryfield'
p1598
(dp1599
g4
(lp1600
S'&widget buffet'
p1601
aS'&layout area'
p1602
aS'&form'
p1603
asg6
S">buffet.widget.generic2 'Pmw.EntryField', 'n', 'wid.pmw.entryfield.overview'"
p1604
sg8
(lp1605
sg10
(lp1606
sg12
I0
sg13
(lp1607
sg15
(lp1608
ssS'wid.pmw.counter.opt.entryfield'
p1609
(dp1610
g4
(lp1611
sg6
S'{HCounter - entryfield}\n\nThe entry field widget where the text is entered, displayed and validated.'
p1612
sg8
(lp1613
sg10
(lp1614
S'2006/03/18'
p1615
asg12
I0
sg13
(lp1616
sg15
(lp1617
ssS'wid.pmw.combobox.opt.scrolledlist'
p1618
(dp1619
g4
(lp1620
sg6
S'{HComboBox - scrolleddlist}\n\nThe scrolled ListBox which displays the items to select.'
p1621
sg8
(lp1622
sg10
(lp1623
S'2006/03/18'
p1624
asg12
I0
sg13
(lp1625
sg15
(lp1626
ssS'wid.tkinter.text.opt.foreground'
p1627
(dp1628
g4
(lp1629
S'&color'
p1630
asg6
S'{HText - foreground}\n\n\nThe &color used for text (and bitmaps) within the widget.\n\nYou can change the color for tagged regions; this option is just the &default.'
p1631
sg8
(lp1632
sg10
(lp1633
S'2005/04/27'
p1634
asg12
I0
sg13
(lp1635
sg15
(lp1636
ssS'wid.tkinter.checkbutton.opt.justify'
p1637
(dp1638
g4
(lp1639
sg6
S'>option.justify.generic "Checkbutton"'
p1640
sg8
(lp1641
sg10
(lp1642
sg12
I0
sg13
(lp1643
sg15
(lp1644
ssS'option.sliderrelief.generic'
p1645
(dp1646
g4
(lp1647
sg6
S'{H@0 - sliderrelief}\n\nThe type of border to draw around the slider. Can be one of:\n\n o {GRaised}\n o {GSunken}\n o {GGroove}\n o {GRidge}\n o {GFlat}'
p1648
sg8
(lp1649
sg10
(lp1650
S'2005/04/04'
p1651
asg12
I0
sg13
(lp1652
sg15
(lp1653
ssS'buffet.tab'
p1654
(dp1655
g4
(lp1656
S'&widget buffet'
p1657
aS'&layout area'
p1658
asg6
S'{HWidget-buffet - Widget Tabs}\n\nThese tabs are part of the &widget buffet, just below the &layout area; they are\nused to select which group of widgets buttons you can see at any given time. At\npresent there are two tabs:\n\n o {GTk } The standard Tk widgets.\n o {GPmw} The Pmw (PythonMegaWidget) collection of widgets.'
p1659
sg8
(lp1660
sg10
(lp1661
S'2005/03/04'
p1662
asg12
I0
sg13
(lp1663
sg15
(lp1664
S'The Widget buffet tabs select the current widget set'
p1665
assS'wid.tkinter.listbox.opt.yscrollcommand'
p1666
(dp1667
g4
(lp1668
sg6
S'>option.yscrollcommand.generic "Listbox"'
p1669
sg8
(lp1670
sg10
(lp1671
sg12
I0
sg13
(lp1672
sg15
(lp1673
ssS'wid.tkinter.scrollbar.opt.takefocus'
p1674
(dp1675
g4
(lp1676
sg6
S'>option.takefocus.generic "Scrollbar"'
p1677
sg8
(lp1678
sg10
(lp1679
sg12
I0
sg13
(lp1680
sg15
(lp1681
ssS'wid.pmw.counter.opt.labelpos'
p1682
(dp1683
g4
(lp1684
sg6
S">option.pmw.labelpos.generic 'Counter'"
p1685
sg8
(lp1686
sg10
(lp1687
sg12
I0
sg13
(lp1688
sg15
(lp1689
ssS'wid.pmw.scrolledtext.opt.text'
p1690
(dp1691
g4
(lp1692
sg6
S'{HScrolledText - text}\n\nThe text widget which is scrolled by the scrollbars. If the {gborderframe}\noption is true, this is created with a borderwidth of 0 to overcome a known\nproblem with text widgets: if a widget inside a text widget extends across\none of the edges of the text widget, then the widget obscures the border of\nthe text widget. Therefore, if the text widget has no border, then this\noverlapping does not occur.'
p1693
sg8
(lp1694
sg10
(lp1695
S'2005/03/23'
p1696
asg12
I0
sg13
(lp1697
sg15
(lp1698
ssS'wid.pmw.scrolledcanvas.opt.vscrollmode'
p1699
(dp1700
g4
(lp1701
sg6
S">option.pmw.vscrollmode.generic 'ScrolledCanvas'"
p1702
sg8
(lp1703
sg10
(lp1704
sg12
I0
sg13
(lp1705
sg15
(lp1706
ssS'wid.tkinter.scrollbar.opt.repeatdelay'
p1707
(dp1708
g4
(lp1709
sg6
S'>option.repeatdelay.generic "Scrollbar"'
p1710
sg8
(lp1711
sg10
(lp1712
sg12
I0
sg13
(lp1713
sg15
(lp1714
ssS'_temp'
p1715
(dp1716
g4
(lp1717
S'&bind editor'
p1718
aS'&bind assist'
p1719
aS'&bind editor'
p1720
aS'&bind assist'
p1721
asg6
S" n Find the binding you want to work on in the &bind editor and click on it's\n   {PIcons/pr-msc-assist.ppm} &bind assist button.\n\n n Find the binding you want to work on in the &bind editor and click on it'sddddddddddddd\n   &bind assist button."
p1722
sg8
(lp1723
sg10
(lp1724
sg12
I0
sg13
(lp1725
sg15
(lp1726
ssS'code-edit.action.swapwithtop'
p1727
(dp1728
g4
(lp1729
S'&remembered line'
p1730
aS'&remembered line'
p1731
aS'&remembered line'
p1732
aS'&editor actions'
p1733
asg6
S'{HCode editor - Swap with top}\n\n Key:   $tActionSwapWithTop\n Menu: {fEdit/Swap with top}\n\nThe actual action is:\n\n n The top entry from the &remembered line stack is popped.\n n The number of the current line is pushed on the &remembered line stack.\n n We goto the popped line.\n\nThe net effect is that each time you press this key you alternate betwee the\ncurrent line and the most recent &remembered line. Great for snapping back and\nforth between two pieces of code.\n\nCode &editor actions'
p1734
sg8
(lp1735
sg10
(lp1736
S'2005/04/07'
p1737
asg12
I0
sg13
(lp1738
sg15
(lp1739
S'Code editor - Swap with top'
p1740
assS'wid.tkinter.radiobutton.opt.font'
p1741
(dp1742
g4
(lp1743
sg6
S'>option.font.generic "Radiobutton"'
p1744
sg8
(lp1745
sg10
(lp1746
sg12
I0
sg13
(lp1747
sg15
(lp1748
ssS'wid.tkinter.toplevel.opt.width'
p1749
(dp1750
g4
(lp1751
sg6
S'{HToplevel - width}\n\nThe width of the Toplevel window in pixels.'
p1752
sg8
(lp1753
sg10
(lp1754
S'2005/04/28'
p1755
asg12
I0
sg13
(lp1756
sg15
(lp1757
ssS'option.closeenough.generic'
p1758
(dp1759
g4
(lp1760
S'&new mexico tech'
p1761
asg6
S'{H@0 - closeenough}\n\nA float that specifies how close the mouse must be to an item to be\nconsidered "inside it". Default is 1.0.\n\n$nmt'
p1762
sg8
(lp1763
sg10
(lp1764
S'2005/02/28'
p1765
asg12
I0
sg13
(lp1766
sg15
(lp1767
ssS'wid.tkinter.radiobutton.opt.value'
p1768
(dp1769
g4
(lp1770
sg6
S'>option.value.generic "Radiobutton"'
p1771
sg8
(lp1772
sg10
(lp1773
sg12
I0
sg13
(lp1774
sg15
(lp1775
ssS'option.pady.generic'
p1776
(dp1777
g4
(lp1778
S'&dimension'
p1779
aS'&new mexico tech'
p1780
asg6
S'{H@0 - pady}\n\nA &dimensioned number which specifies the amount of additional padding above\nand below the @1.\n\n$nmt'
p1781
sg8
(lp1782
sg10
(lp1783
S'2005/03/06'
p1784
asg12
I0
sg13
(lp1785
sg15
(lp1786
ssS'wid.tkinter.canvas.opt.insertbackground'
p1787
(dp1788
g4
(lp1789
sg6
S'>option.insertbackground.generic "Canvas"'
p1790
sg8
(lp1791
sg10
(lp1792
sg12
I0
sg13
(lp1793
sg15
(lp1794
ssS'wid.tkinter.scale.opt.highlightcolor'
p1795
(dp1796
g4
(lp1797
sg6
S'>option.highlightcolor.generic "Scale"'
p1798
sg8
(lp1799
sg10
(lp1800
sg12
I0
sg13
(lp1801
sg15
(lp1802
ssS'wid.tkinter.menubutton.opt.foreground'
p1803
(dp1804
g4
(lp1805
sg6
S'>option.foreground.generic "Menubutton"'
p1806
sg8
(lp1807
sg10
(lp1808
sg12
I0
sg13
(lp1809
sg15
(lp1810
ssS'load.options.missing'
p1811
(dp1812
g4
(lp1813
S'&config file'
p1814
aS'&option editor'
p1815
aS'&config file'
p1816
aS'&config file'
p1817
aS'&config file'
p1818
asg6
S"{HMissing options at load time}\n\nFor each widget defined in the &config file there are a bunch of options that you can set\nusing the &option editor. The @1 you are trying to load has at least one instance of a\nwidget with an option which is not defined in the current &config file. This is probably the\nresult of changes made to the config file or of loading a @1 that came from another $$\ninstallation.\n\nThe &config file is the ultimate authority on what options each widget has. If you continue\nthen I will delete the options that I don't know about and carry on. Your only alternate\nchoice is to cancel loading of the @1.\n\nIn the list that follows, {bModule} and {bForm} indicate where in the project the problem\nwas found. {bWidget type} shows the kind of widget that was involved. {bWidget name} is the\nname by which the widget-instance was known within the form and {bOption} is the name of the\noption that existed when the @1 was saved but which is not defined in the current\n&config file.\n\n@0"
p1819
sg8
(lp1820
sg10
(lp1821
S'2006/03/30'
p1822
aS'@0 List of modules and forms'
p1823
aS"@1 'project' or 'form'"
p1824
asg12
I0
sg13
(lp1825
sg15
(lp1826
ssS'buffet.widget.generic2'
p1827
(dp1828
g4
(lp1829
S'=wid.pmw.timecounter.overview'
p1830
aS'&widget buffet'
p1831
aS'&layout area'
p1832
aS'&form'
p1833
asg6
S'{HWidget Buffet - @0 Icon}\n\nThis is the {L@0=@2} icon on the &widget buffet, which is itself part of the\n&layout area. Drag from this icon to place a@1 @0 widget on your &form.'
p1834
sg8
(lp1835
sg10
(lp1836
S'2006/03/19'
p1837
aS'Like buffet.widget.generic but contains a link to the widget info page'
p1838
aS'@0 - Name of the widget'
p1839
aS"@1 - 'n' if the widget starts with a vowel, else ''"
p1840
aS'@2 - The text of the link'
p1841
asg12
I0
sg13
(lp1842
sg15
(lp1843
ssS'wid.pmw.optionmenu.opt.command'
p1844
(dp1845
g4
(lp1846
S'&command option'
p1847
aS'&event'
p1848
aS'&handler'
p1849
asg6
S'{HOptionMenu - command}\n\nThis &command option specifies the &event &handler to call whenever a menu\nitem is selected or the {finvoke()} method is called. The function is called\nwith the currently selected value as its single argument.'
p1850
sg8
(lp1851
sg10
(lp1852
S'2006/03/21'
p1853
asg12
I0
sg13
(lp1854
sg15
(lp1855
ssS'wid.tkinter.radiobutton.opt.activeforeground'
p1856
(dp1857
g4
(lp1858
sg6
S'>option.activeforeground.generic "Radiobutton"'
p1859
sg8
(lp1860
sg10
(lp1861
sg12
I0
sg13
(lp1862
sg15
(lp1863
ssS'wid.tkinter.button.opt.bitmap'
p1864
(dp1865
g4
(lp1866
sg6
S'>option.bitmap.generic "Button"'
p1867
sg8
(lp1868
sg10
(lp1869
sg12
I0
sg13
(lp1870
sg15
(lp1871
ssS'wid.pmw.entryfield.opt.labelmargin'
p1872
(dp1873
g4
(lp1874
sg6
S">option.pmw.labelmargin.generic 'EntryField'"
p1875
sg8
(lp1876
sg10
(lp1877
sg12
I0
sg13
(lp1878
sg15
(lp1879
ssS'wid.tkinter.text.opt.height'
p1880
(dp1881
g4
(lp1882
sg6
S'>option.height.generic "Text"'
p1883
sg8
(lp1884
sg10
(lp1885
sg12
I0
sg13
(lp1886
sg15
(lp1887
ssS'wid.tkinter.checkbutton.opt.state'
p1888
(dp1889
g4
(lp1890
sg6
S'>option.state.generic "Checkbutton"'
p1891
sg8
(lp1892
sg10
(lp1893
sg12
I0
sg13
(lp1894
sg15
(lp1895
ssS'buffet.widget.buttonbox'
p1896
(dp1897
g4
(lp1898
sg6
S'>buffet.widget.generic2 "Pmw.ButtonBox", \'\', \'wid.pmw.buttonbox.overview\''
p1899
sg8
(lp1900
sg10
(lp1901
sg12
I0
sg13
(lp1902
sg15
(lp1903
ssS'__whatever'
p1904
(dp1905
g4
(lp1906
sg6
S"\nThis is a dummy topic. It exists to be a target used by topics which want to refer to a\ntopic that doesn't exist yet. By checking to see who links to this topic you can find\nreferences that need to be fixed up."
p1907
sg8
(lp1908
S'whatever'
p1909
asg10
(lp1910
sg12
I0
sg13
(lp1911
sg15
(lp1912
ssS'buffet.widget.radiobutton'
p1913
(dp1914
g4
(lp1915
sg6
S'>buffet.widget.generic "Radiobutton"'
p1916
sg8
(lp1917
sg10
(lp1918
sg12
I0
sg13
(lp1919
sg15
(lp1920
ssS'wid.pmw.notebook.opt.arrownavigation'
p1921
(dp1922
g4
(lp1923
S'&default'
p1924
asg6
S'{HNoteBook - arrownavigation}\n\nIf true and a tab button has the keyboard focus, then the Left and Right\narrow keys can be used to select the page before or after the tab button with\nthe focus. The &default is True.'
p1925
sg8
(lp1926
sg10
(lp1927
S'2006/02/21'
p1928
asg12
I0
sg13
(lp1929
sg15
(lp1930
ssS'wid.tkinter.scale.opt.sliderrelief'
p1931
(dp1932
g4
(lp1933
sg6
S'>option.sliderrelief.generic "Scale"'
p1934
sg8
(lp1935
sg10
(lp1936
sg12
I0
sg13
(lp1937
sg15
(lp1938
ssS'wid.pmw.scrolledcanvas.opt.labelmargin'
p1939
(dp1940
g4
(lp1941
sg6
S">option.pmw.labelmargin.generic 'ScrolledCanvas'"
p1942
sg8
(lp1943
sg10
(lp1944
sg12
I0
sg13
(lp1945
sg15
(lp1946
ssS'wid.tkinter.frame.opt.relief'
p1947
(dp1948
g4
(lp1949
sg6
S'>option.relief.generic "Frame"'
p1950
sg8
(lp1951
sg10
(lp1952
sg12
I0
sg13
(lp1953
sg15
(lp1954
ssS'wid.tkinter.entry.opt.borderwidth'
p1955
(dp1956
g4
(lp1957
sg6
S'>option.borderwidth.generic "Entry"'
p1958
sg8
(lp1959
sg10
(lp1960
sg12
I0
sg13
(lp1961
sg15
(lp1962
ssS'wid.pmw.scrolledframe.opt.vscrollmode'
p1963
(dp1964
g4
(lp1965
sg6
S">option.pmw.vscrollmode.generic 'ScrolledFrame'"
p1966
sg8
(lp1967
sg10
(lp1968
sg12
I0
sg13
(lp1969
sg15
(lp1970
ssS'wid.pmw.scrolledlistbox.opt.listbox'
p1971
(dp1972
g4
(lp1973
sg6
S'{HScrolledListBox - listbox}\n\nThe listbox widget which is scrolled by the scrollbars.'
p1974
sg8
(lp1975
sg10
(lp1976
S'2006/03/23'
p1977
asg12
I0
sg13
(lp1978
sg15
(lp1979
ssS'howto.scrolledframe'
p1980
(dp1981
g4
(lp1982
S'=layout-frame-create'
p1983
asg6
S'{HHow to: Make a frame which is an instance of Pmw.ScrolledFrame}\n\no {LCreate a frame=layout-frame-create} in the usual manner.\n\no Right-click the mouse within the newly created frame.\n\no Click on the {gProperties} choice.\n\no Select the {gPmw.ScrolledFrame} choice.'
p1984
sg8
(lp1985
sg10
(lp1986
S'2006/03/22'
p1987
asg12
I0
sg13
(lp1988
sg15
(lp1989
S'How to: Make a frame which an instance of Pmw.ScrolledFrame'
p1990
aS'How to: Create a scrollable frame'
p1991
assS'wid.pmw.notebook.opt.name'
p1992
(dp1993
g4
(lp1994
sg6
S">option.name.generic 'NoteBook'"
p1995
sg8
(lp1996
sg10
(lp1997
sg12
I0
sg13
(lp1998
sg15
(lp1999
ssS'wid.pmw.scrolledframe.opt.label'
p2000
(dp2001
g4
(lp2002
sg6
S">option.pmw.label.generic 'ScrolledFrame'"
p2003
sg8
(lp2004
sg10
(lp2005
sg12
I0
sg13
(lp2006
sg15
(lp2007
ssS'wid.tkinter.canvas.opt.borderwidth'
p2008
(dp2009
g4
(lp2010
sg6
S'>option.borderwidth.generic "Canvas"'
p2011
sg8
(lp2012
sg10
(lp2013
sg12
I0
sg13
(lp2014
sg15
(lp2015
ssS'bindassist.badcomponent'
p2016
(dp2017
g4
(lp2018
S'=bindassist.compound'
p2019
asg6
S'{HBind assist - No such component}\n\nYou just clicked on {bOK}, but up at the top of the dialog you asked to creating the\nbinding against compenent "{g@0}" however there is no component of that name within the\ncurrent widget. Recommended course of action: use the dropdown at the top of the dialog\nto select a component or the widget itself to bind to.\n\nFor information on binding to compound widgets {lclick here.=bindassist.compound}'
p2020
sg8
(lp2021
sg10
(lp2022
sg12
I0
sg13
(lp2023
sg15
(lp2024
ssS'wid.tkinter.text.opt.tabs'
p2025
(dp2026
g4
(lp2027
sg6
S'>option.tabs.generic "Text"'
p2028
sg8
(lp2029
sg10
(lp2030
sg12
I0
sg13
(lp2031
sg15
(lp2032
ssS'wid.tkinter.text.opt.pyclass'
p2033
(dp2034
g4
(lp2035
sg6
S'>option.pyclass.generic "Text"'
p2036
sg8
(lp2037
sg10
(lp2038
sg12
I0
sg13
(lp2039
sg15
(lp2040
ssS'wid.tkinter.checkbutton.opt.borderwidth'
p2041
(dp2042
g4
(lp2043
sg6
S'>option.borderwidth.generic "Checkbutton"'
p2044
sg8
(lp2045
sg10
(lp2046
sg12
I0
sg13
(lp2047
sg15
(lp2048
ssS'wid.tkinter.canvas.opt.width'
p2049
(dp2050
g4
(lp2051
S'&dimension'
p2052
asg6
S'{HCanvas - width}\n\nA &dimensioned number specifying the width of the Canvas.'
p2053
sg8
(lp2054
sg10
(lp2055
S'2005/04/15'
p2056
asg12
I0
sg13
(lp2057
sg15
(lp2058
ssS'assist.proc.exist'
p2059
(dp2060
g4
(lp2061
S'&command option'
p2062
aS'&command option'
p2063
aS'&command option'
p2064
aS'=assist.proc.new'
p2065
aS'&command option'
p2066
aS'=bindassist.handlerchange'
p2067
aS'&command option'
p2068
aS'&command option'
p2069
aS'&binding'
p2070
aS'&event'
p2071
aS'&handler'
p2072
aS'&handler'
p2073
aS'&command option'
p2074
aS'&command option'
p2075
aS'&command option'
p2076
aS'&command option'
p2077
aS'&command option'
p2078
asg6
S'{HAssist - Command}\n\nThis assist helps you to revise an existing, already-set &command option.\n\nWhat happens here depends a lot on the type of the exsisting &command option\nsetting. The type was established when the &command option was first set;\n{Lclick here=assist.proc.new} for information on the two possible types.\n\n{bType: $$ maintained}\n\nt This is the usual case. If you want to change the name of the handler or\n  change the handler to which the &command option referrs then there are a\n  number of considerations, {Lclick here=bindassist.handlerchange} for\n  details.\n\n  To clear this &command option, click on the {gClear} button. If this is the\n  only &command option or &binding that refers to that &event &handler then\n  you get the opportunity to delete the &handler as well.\n\n{bType: User maintained}\n\nt This is the unusual case. You can change the event handler to which the\n  &command option refers simply by changing the name in the entry area. Since\n  this &command option is totally under your control no other action will be\n  taken.\n\n  You can clear this &command option by clicking on the {gClear} button\n\nNote: the only way to turn a "$$ maintained" &command option" into a "User\nmaintained" one or vice versa is to clear the &command option and then re-set\nit.'
p2079
sg8
(lp2080
sg10
(lp2081
sg12
I0
sg13
(lp2082
sg15
(lp2083
S'The option editor Command assist dialog (for already set command options)'
p2084
assS'wid.pmw.messagebar.opt.hull'
p2085
(dp2086
g4
(lp2087
sg6
S'>option.pmw.hull.generic "MessageBar"'
p2088
sg8
(lp2089
sg10
(lp2090
sg12
I0
sg13
(lp2091
sg15
(lp2092
ssS'wid.tkinter.entry.opt.justify'
p2093
(dp2094
g4
(lp2095
S'&new mexico tech'
p2096
asg6
S"{H@0 - justify}\n\nThis option controls where the text is located when the text doesn't fill the\nwidget.\n\n$nmt"
p2097
sg8
(lp2098
sg10
(lp2099
S'2005/04/16'
p2100
asg12
I0
sg13
(lp2101
sg15
(lp2102
ssS'wid.tkinter.entry.opt.width'
p2103
(dp2104
g4
(lp2105
sg6
S'>option.width.generic "Entry"'
p2106
sg8
(lp2107
sg10
(lp2108
sg12
I0
sg13
(lp2109
sg15
(lp2110
ssS'wid.tkinter.button.opt.disabledforeground'
p2111
(dp2112
g4
(lp2113
sg6
S'>option.disabledforeground.generic "Button"'
p2114
sg8
(lp2115
sg10
(lp2116
sg12
I0
sg13
(lp2117
sg15
(lp2118
ssS'wid.pmw.labeledwidget.overview'
p2119
(dp2120
g4
(lp2121
sg6
S'{HWhat is: A LabeledWidget}\n\nThis megawidget consists of an interior frame with an associated label which\ncan be positioned on any side of the frame. The programmer can create other\nwidgets within the interior frame.'
p2122
sg8
(lp2123
sg10
(lp2124
S'2006/03/20'
p2125
asg12
I0
sg13
(lp2126
sg15
(lp2127
S'What is: A LabeledWidget'
p2128
assS'frame.delete'
p2129
(dp2130
g4
(lp2131
S'&form'
p2132
aS'=frame.popup'
p2133
aS'&parking lot'
p2134
asg6
S'{HHow to: Delete a frame from a form}\n\nTo delete a frame from a &form:\n\n n Move the cursor to a blank spot inside the frame to be deleted (i.e.\n   not over a widget).\n\n n Right click the mouse.\n\n n From the {Lpopup menu=frame.popup} choose the "Delete frame" choice.\n\n n When a dialog pops up to confirm the deletion, click "Delete".\n\nNote that "delete frame" works on the most deeply nested frame around the\ncursor location. In order to delete a frame which has sub-frames you must\nfirst delete the subframes. To delete a frame without losing it\'s widgets,\ntemporarily move them onto the &parking lot or another frame then delete\nthe subframe.'
p2135
sg8
(lp2136
sg10
(lp2137
S'2006/02/09'
p2138
asg12
I0
sg13
(lp2139
sg15
(lp2140
S'How to: Delete a frame from a form'
p2141
assS'layout-widget-select'
p2142
(dp2143
g4
(lp2144
S'&layout editor'
p2145
aS'&selector'
p2146
aS'&widgetator'
p2147
asg6
S"{HHow to: Select a particular widget}\n\nThere are two methods:\n\n n In the &layout editor, simply click over the widget.\n\nt or\n\n n In the &selector (upper left corner of the $$ window) call up the combo box and\n   click on the desired widget.\n\nWhen a widget is selected it's options appear in the &widgetator on the left."
p2148
sg8
(lp2149
S'select the widget'
p2150
asg10
(lp2151
S'2006/03/12'
p2152
asg12
I0
sg13
(lp2153
sg15
(lp2154
S'How to: Select a particular widget'
p2155
assS'wid.pmw.combobox.opt.name'
p2156
(dp2157
g4
(lp2158
sg6
S">option.name.generic 'ComboBox'"
p2159
sg8
(lp2160
sg10
(lp2161
sg12
I0
sg13
(lp2162
sg15
(lp2163
ssS'duplicator'
p2164
(dp2165
g4
(lp2166
S'&layout area'
p2167
aS'&select the widget'
p2168
aS'&form'
p2169
aS'&module'
p2170
aS'&parking lot'
p2171
aS'&form'
p2172
aS'&module'
p2173
aS'&parking lot'
p2174
aS'&form'
p2175
asg6
S'{HThe Duplicator}\n\nThe duplicator {P$imgpr-duplicator.ppm} is part of the &layout area and is used to make\nduplicate copies of widgets (other than frame widgets). Duplicated widgets retain the options,\nbindings and pack settings of the original widget.\n\nTo create a duplicate widget:\n\n n &Select the widget to be duplicated.\n\n n Click on the duplicator then drag.\n\n n A duplicate widgets is created which you can drag wherever you want.\n\nTo place a duplicated widget on a different &form or &module first create a duplicate as\ndescribed above and drop it on the &parking lot. Select the destination &form in the\ndestination &module and drag the duplicate widget from the &parking lot to that &form.\n\nIf no widget is selected or if the selected widget is a frame, then clicking on the duplicator\nhas no effect.'
p2176
sg8
(lp2177
g2164
asg10
(lp2178
S'2006/03/12'
p2179
asg12
I0
sg13
(lp2180
sg15
(lp2181
S'How to: Make copies (duplicates) of widgets'
p2182
assS'wid.pmw.group.opt.groupchildsite'
p2183
(dp2184
g4
(lp2185
sg6
S'{HGroup - groupchildsite}\n\nThe frame which can contain other widgets to be grouped.'
p2186
sg8
(lp2187
sg10
(lp2188
S'2006/03/19'
p2189
asg12
I0
sg13
(lp2190
sg15
(lp2191
ssS'option.jump.generic'
p2192
(dp2193
g4
(lp2194
S'&new mexico tech'
p2195
asg6
S"{H@0 - jump}\n\nThis option controls what happens when a user drags the slider.\n\nNormally (jump=false), every small drag of the slider causes the command\ncallback to be called. If you set this option to true, the callback isn't\ncalled until the user releases the mouse button.\n\n$nmt"
p2196
sg8
(lp2197
sg10
(lp2198
S'2005/03/03'
p2199
asg12
I0
sg13
(lp2200
sg15
(lp2201
ssS'wid.pmw.scrolledframe.opt.labelpos'
p2202
(dp2203
g4
(lp2204
sg6
S">option.pmw.labelpos.generic 'ScrolledFrame'"
p2205
sg8
(lp2206
sg10
(lp2207
sg12
I0
sg13
(lp2208
sg15
(lp2209
ssS'wid.tkinter.canvas.opt.insertofftime'
p2210
(dp2211
g4
(lp2212
sg6
S'>option.insertofftime.generic "Canvas"'
p2213
sg8
(lp2214
sg10
(lp2215
sg12
I0
sg13
(lp2216
sg15
(lp2217
ssS'widget.instance'
p2218
(dp2219
g4
(lp2220
sg6
S"Hi there Partner!\n\nI'm @0. I'm a proud @4 @1 widget and at the moment I'm living cheerfully on\nthe @2.\n\n@3\n\nIf you ever have trouble telling me from other @1's (it's hard to believe but\nI've been told that to humans, all @1's look alike) then just put the cursor\nover me (or some other widget if you must) and my name will pop up. Well, if\nyou are over some other widget {itheir} name will pop up, but why would you\nwant to do that when I'm available?"
p2221
sg8
(lp2222
sg10
(lp2223
S'<2005/04/16'
p2224
aS'@0 - The name of the widreq eg MyButton'
p2225
aS'@1 - The widget type eg Button'
p2226
aS'@2 - The current location of the widget'
p2227
aS'@3 - A paid political message from the widget'
p2228
aS'@4 - The module from which the widget is imported eg Tkinter'
p2229
asg12
I0
sg13
(lp2230
sg15
(lp2231
ssS'load.cancelled'
p2232
(dp2233
g4
(lp2234
sg6
S'{HChoice following cancelled load}\n\n$$ recently attempted to load a project but that load was cancelled.\n\nAt this point you have a choice between loading a different existing project,\ncreating a new project or exiting $$.'
p2235
sg8
(lp2236
sg10
(lp2237
S'2006/03/30'
p2238
asg12
I0
sg13
(lp2239
sg15
(lp2240
ssS'howto.rename.handler'
p2241
(dp2242
g4
(lp2243
S'&binding'
p2244
aS'&bind editor'
p2245
aS'&command option'
p2246
aS'&option editor'
p2247
asg6
S'{HHow to rename an event handler}\n\nThere are two ways:\n\nn Find the handler in the code editor then right-click over the "def" part\n  (any of the text on the different colored background will do) of the\n  handler. From the menu that pops up choose "Rename".\n\n  -or-\n\nn From a &binding in the &bind editor or a &command option in the &option\n  editor that presently refers to the handler, click on the\n  {P$imgpr-msc-assist.ppm} "assist" button. Enter the new name for the\n  handler and click "Ok".\n\n  This method is best for handlers which are referred to by only one binding.\n  If multiple bindings refer to the handler then we have to find out if you\n  are renaming the handler and changing all the referring bindings or\n  creating a handler of the new name. It all gets looked after properly via\n  question dialogs but if you know in advance that you are just doing a\n  rename then method 1) is less complicated.'
p2248
sg8
(lp2249
sg10
(lp2250
S'2006/02/07'
p2251
asg12
I0
sg13
(lp2252
sg15
(lp2253
S'How to: Rename an event handler'
p2254
assS'wid.pmw.buttonbox.opt.pyclass'
p2255
(dp2256
g4
(lp2257
sg6
S'>option.pyclass.generic "ButtonBox"'
p2258
sg8
(lp2259
sg10
(lp2260
sg12
I0
sg13
(lp2261
sg15
(lp2262
ssS'bind-editor'
p2263
(dp2264
g4
(lp2265
S'&form'
p2266
aS'&event'
p2267
aS'&handler'
p2268
aS'&widgetator'
p2269
aS'&binding'
p2270
aS'&binding'
p2271
aS'&binding'
p2272
aS'&binding'
p2273
aS'&binding'
p2274
aS'&bind assist'
p2275
aS'&handler'
p2276
aS'&binding'
p2277
aS'&binding'
p2278
aS'&bind assist'
p2279
aS'&bind assist'
p2280
aS'=bind-display-compound'
p2281
aS'=bind-editor.abbreviation'
p2282
aS'&binding'
p2283
aS'&handler'
p2284
aS'&handler'
p2285
aS'&event'
p2286
aS'&handler'
p2287
aS'&event'
p2288
aS'&event'
p2289
aS'&event'
p2290
aS'&handler'
p2291
aS'=bind-editor.abbreviation'
p2292
asg6
S'{hThe Bind Editor}\n\nEach widget in a &form can be bound to &events. When the event happens, a user-written\nmethod, referred to as an event &handler, is called.\n\nThe Bind Editor, which is part of the &widgetator, is where you create, modify and\ndelete &bindings for a particular widget. Note that &bindings specified in the bind\neditor are put into effect just after the widget itself is created. Your program can,\nof course, alter the &bindings at any time after the widget has been created. The bind\neditor is simply a convenience. It is entirely possible, although less convenient, for\nyou to create any necessary &bindings programatically in your code.\n\no {BCreate}  To create a new &binding click on the {GCreate New Binding} button at the\n  bottom of the bind editor. This will bounce you into the &Bind Assist dialog where\n  you can specify the event and the &handler for your new &binding.\n\no {BModify}  To change an existing &binding, find it among the bindings listed in the\n  Bind Editor, then click on the {p$img/pr-msc-assist.ppm} assist button just to the\n  right. This will bounce you into the &Bind Assist dialog where you can make changes\n  to the binding.\n\no {BDelete}  To delete an existing binding, find it among the bindings listed in the\n  bind editor, then click on the {p$img/pr-msc-assist.ppm} assist button just to the\n  right. This will take you into the &Bind Assist dialog where you can click on the\n  {GDelete} button.\n\no {BGoto event handler}  To quickly find a handler\'s code, double click anywhere on the\n  binding (other than the {p$img/pr-msc-assist.ppm} assist button). If the code editor\n  isn\'t already visible it is made visible and the cursor is placed on the first line\n  of the body of the handler.\n\n{BBind Editor Display} {P$imgpr-help-BindEditor.ppm}\n\nHere we cover regular widgets. Binding with compound (eg Pmw) widgets has some\nadditional wrinkles. {LClick here for details=bind-display-compound}. The Bind Editor\nconsists of three columns:\n\n n {BEvent}  The left column shows an {Labbreviation=bind-editor.abbreviation} of the\n   event description string for each &binding. To see the full event string put the\n   mouse cursor over abbreviation and hold it still for a second. To goto the &handler\n   in the code, double click on this column or the middle column.\n\n n {BHandler}  The middle column shows the name of the event &handler associated with\n   the &event. Depending on the width of the &handler column (see Resize Knobs, below)\n   long &event names may be truncated. To see the full &event name put the mouse cursor\n   over the &event name and hold it still for a second. To goto the the &handler in the\n   code, double click on this column or the left column.\n n {BAssist button}  The right column is a series of {p$img/pr-help-Assist.ppm}\n   "assist" buttonss. Click on this button to open a dialog where you can change or\n   delete the corresponding binding.\n\n{BThe Resize Knobs}\n\nAt the top of the bind edit area are two {p$img/pr-help-Resize.ppm} small resize knobs,\neach of which can be dragged left or right. Dragging the first resize knob adjusts the\nwidth of the area which shows the {Labbreviated=bind-editor.abbreviation} event\ndescription string. Dragging the second resize knob adjusts the width of the edit area\nwhich shows the event handler name. {bNote}: To make the event handler name area wider\nyou can drag the resize knob off the right edge of the bind editor. Although the resize\nknob loses visibility when the mouse leaves the bind editor, the position of the mouse\nis still being tracked and the event handler name area will resize appropriately.'
p2293
sg8
(lp2294
S'bind editor'
p2295
asg10
(lp2296
S'2005/03/17'
p2297
asg12
I0
sg13
(lp2298
sg15
(lp2299
S'The Bind Editor associates Events with Event-Handlers'
p2300
assS'option.postcommand.generic'
p2301
(dp2302
g4
(lp2303
S'&handler'
p2304
aS'&handler'
p2305
aS'&command option'
p2306
aS'&handler'
p2307
aS'&command option'
p2308
aS'&handler'
p2309
aS'&handler'
p2310
aS'&handler'
p2311
aS'&code editor'
p2312
asg6
S"{H@0 - postcommand}\n\nThe name of the &handler to be called when this menu is shown.\n\nIf no &handler is currently associated with this &command option then\nclicking on this option's {p$imgpr-help-Assist.ppm} icon will allow you to\neasily create a &handler and associate it with this &command option.\n\nIf this option already specifies a &handler then double-clicking on the\nname of the &handler in the option-editor will immediately take you to\nthat &handler in the &code editor."
p2313
sg8
(lp2314
sg10
(lp2315
S'2005/03/06'
p2316
asg12
I0
sg13
(lp2317
sg15
(lp2318
ssS'wid.pmw.scrolledcanvas.opt.canvasmargin'
p2319
(dp2320
g4
(lp2321
S'&default'
p2322
asg6
S'{HScrolledCanvas - canvasmargin}\n\nThe margin around the items in the canvas. Used by the {fresizescrollregion()}\nmethod. The &default is 0.'
p2323
sg8
(lp2324
sg10
(lp2325
S'2006/03/22'
p2326
asg12
I0
sg13
(lp2327
sg15
(lp2328
ssS'wid.tkinter.checkbutton.opt.highlightbackground'
p2329
(dp2330
g4
(lp2331
sg6
S'>option.highlightbackground.generic "Checkbutton"'
p2332
sg8
(lp2333
sg10
(lp2334
sg12
I0
sg13
(lp2335
sg15
(lp2336
ssS'wid.tkinter.button.opt.highlightbackground'
p2337
(dp2338
g4
(lp2339
sg6
S'>option.highlightbackground.generic "Button"'
p2340
sg8
(lp2341
sg10
(lp2342
sg12
I0
sg13
(lp2343
sg15
(lp2344
ssS'wid.pmw.timecounter.opt.buttonaspect'
p2345
(dp2346
g4
(lp2347
sg6
S">option.pmw.buttonaspect.generic 'TimeCounter', 'arrow button'"
p2348
sg8
(lp2349
sg10
(lp2350
sg12
I0
sg13
(lp2351
sg15
(lp2352
ssS'option.highlightcolor.generic'
p2353
(dp2354
g4
(lp2355
S'&color'
p2356
aS'&focus'
p2357
asg6
S'{H@0 - highlightcolor}\n\nThe &color of the &focus highlight when this @0 has the focus.'
p2358
sg8
(lp2359
sg10
(lp2360
S'2005/03/02'
p2361
asg12
I0
sg13
(lp2362
sg15
(lp2363
ssS'code-edit.info-label'
p2364
(dp2365
g4
(lp2366
S'&remembered line'
p2367
asg6
S'{HCode-editor information area}\n\nThis area is just above the code on the right and looks something like this:\n\n{P$img/code-info-area.ppm}\n\nThe format is: {gLine:LL/TT R}\n\n{gLL} The line the cursor is currently on.\n\n{gTT} The total number of lines of code.\n\n{gR} The number of &remembered lines.'
p2368
sg8
(lp2369
sg10
(lp2370
S'2006/01/24'
p2371
asg12
I0
sg13
(lp2372
sg15
(lp2373
S'Code-editor information area'
p2374
assS'wid.tkinter.text.opt.selectbackground'
p2375
(dp2376
g4
(lp2377
sg6
S'>option.selectbackground.generic "Text","text"'
p2378
sg8
(lp2379
sg10
(lp2380
sg12
I0
sg13
(lp2381
sg15
(lp2382
ssS'wid.pmw.scrolledfield.overview'
p2383
(dp2384
g4
(lp2385
sg6
S'{HWhat is: A ScrolledField widget}\n\nA scrolled field displays a single line of text. If the text is too wide to\ndisplay in the megawidget it can be scrolled to the left and right by the\nuser by dragging with the middle mouse button. The text is also selectable by\nclicking or dragging with the left mouse button.\n\nIt can be used instead of a Tkinter.Label widget when displaying text of\nunknown width such as application status messages.'
p2386
sg8
(lp2387
sg10
(lp2388
S'2006/03/21'
p2389
asg12
I0
sg13
(lp2390
sg15
(lp2391
S'What is: A ScrolledField widget'
p2392
assS'layout.menu.modules'
p2393
(dp2394
g4
(lp2395
S'&module'
p2396
aS'&project'
p2397
aS'&project'
p2398
aS'&module'
p2399
aS'&module'
p2400
aS'&module'
p2401
aS'&project'
p2402
aS'&project'
p2403
aS'&module'
p2404
aS'&module'
p2405
aS'&module'
p2406
aS'&module'
p2407
aS'&module'
p2408
aS'&project'
p2409
aS'&module'
p2410
aS'&module'
p2411
aS'&module'
p2412
aS'&module'
p2413
aS'&module'
p2414
aS'&module'
p2415
aS'&module'
p2416
aS'&project'
p2417
aS'&module'
p2418
aS'&module'
p2419
aS'&project'
p2420
aS'&module'
p2421
aS'&project'
p2422
aS'&project'
p2423
aS'&module'
p2424
aS'&project'
p2425
aS'&module'
p2426
aS'&project'
p2427
aS'&module'
p2428
aS'&project'
p2429
aS'&form'
p2430
aS'&module'
p2431
aS'&module'
p2432
aS'&project'
p2433
aS'&form'
p2434
aS'&module'
p2435
aS'&project'
p2436
aS'&module'
p2437
aS'&project'
p2438
aS'&module'
p2439
aS'&module'
p2440
aS'&module'
p2441
aS'&module'
p2442
aS'&project'
p2443
aS'&project'
p2444
aS'&project'
p2445
asg6
S'{HLayout area - Modules menu}\n\nThe {bModules menu} is where you mess with &modules. Modules live inside a\n&project.\n\no {gModule select}\n   If your &project consists of more than one &module, use this to select which\n  &module you want to work on now. It presents you with a list of all the &modules\n  in your &project. Select the one you want and press OK.\n\no {gModule alternate}\n   If your &project consists of more than one &module there there will be times\n  when it is convenient to quickly switch between two &modules. The {galternate}\n  choice switches between the current &module and the &module that you were\n  previously working on. You can also use the {g$tActionModuleAlternate} key to\n  alternate betwee &modules.\n\no {GModule next}\n   If your &project consists of more than one &module then this choice switches to\n  the next &module, in alphabetical order by &module name. If your are currently\n  on the last &module, then this choice wraps around to the first &module. You can\n  also use the {g$tActionModuleNext} key combination to advance to the next\n  &module.\n\no {gAdd new module to project}\n   Use this to add a new, empty &module to your &project. You will have to supply\n  a name for the new &module which is different from the name of any other &module\n  in the current &project.\n\no {gRename the current module}\n   Use this to change the name of the current &module within the current &project.\n  The next time you build the &project the &module will be saved under the new\n  name. If you have already built the &project and created a copy of the &module\n  under the old name, that file will continue to exist. If you want it to go away\n  you will have to delete if yourself from the operating system.\n\n  Note that the name of the &project, the name of the primary &module of the\n  &project, and the name of the main &form of the main &module are one and the\n  same. Therefore if you rename the primary &module of the project this will\n  rename the &project and the main &form of the main module as well.\n\no {gDelete the current module}\n   Use this to delete the current &module from the current &project. Once a\n  &module has been deleted you can\'t un-delete it so be careful with this one. If\n  you built the &project prior to deleting this &module then the "{g.py}" file for\n  the deleted &module will continue to exist. If you want it to go away you will\n  have to delete if yourself from the operating system.\n\n  Note that since a $$ project consists of at least one &module, you can\'t delete\n  the last &module of a &project. If you want the whole &project to go away then,\n  from the operating system, delete the $rpj file which holds the &project.'
p2446
sg8
(lp2447
sg10
(lp2448
S'<2005/05/27'
p2449
asg12
I0
sg13
(lp2450
sg15
(lp2451
S'The Layout area Modules menu'
p2452
aS'How to: Alternates between modules'
p2453
aS'How to: Cycle through all modules'
p2454
aS'How to: Select a module'
p2455
aS'How to: Add a new module to your project'
p2456
aS'How to: Remove (delete) a module from your project'
p2457
assS'wid.pmw.entryfield.opt.validate'
p2458
(dp2459
g4
(lp2460
S'=option.verbatim'
p2461
asg6
S'{HEntryField - validate}\n\nSpecifies what kind of validation should be performed on the entry input\ntext.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.\n\nThe most general way to specify the validate option is as a dictionary. The\nkind of validation is specified by the \'validator\' dictionary field, which\nmay be the name of one of the standard validators described below, the name\nof a validator supplied by the extravalidators option, a function or None.\nThe default is None.\n\nAny other dictionary fields specify other restrictions on the entered values.\nFor all validators, the following fields may be specified:\n\no {g\'min\'} Specifies the minimum acceptable value, or None if no minimum\n  checking should be performed. The default is None.\n\no {g\'max\'} Specifies the maximum acceptable value, or None if no maximum\n  checking should be performed. The default is None.\n\no {g\'minstrict\'} If true, then minimum checking is strictly enforced.\n  Otherwise, the entry input may be less than min, but will be displayed\n  using the errorbackground color. The default is true.\n\no {g\'maxstrict\'} If true, then maximum checking is strictly enforced.\n  Otherwise, the entry input may be more than max, but will be displayed\n  using the errorbackground color. The default is true.\n\nIf the dictionary contains a {g\'stringtovalue\'} field, it overrides the\nnormal {istringtovalue} function for the validator. The {istringtovalue}\nfunction is described below.\n\nOther fields in the dictionary (apart from the core fields mentioned above)\nare passed on to the {ivalidator} and {istringtovalue} functions as keyword\narguments.\n\nIf {gvalidate} is not a dictionary, then it is equivalent to specifying it as\na dictionary with a single \'validator\' field. For example, validate = \'real\'\nis equivalent to "validate = {{\'validator\' : \'real\'}" and specifies real\nnumbers without any minimum or maximum limits and using \'.\' as the decimal\npoint character.\n\nThe standard validators accepted in the \'validator\' field are:\n\no {g\'numeric\'} An integer greater than or equal to 0. Digits only. No sign.\n\no {g\'integer\'} Any integer (negative, 0 or positive) as accepted by\n  string.atol().\n\no {g\'hexadecimal\'} Hex number (with optional leading \'0x\'), as accepted by\n  string.atol(text, 16).\n\no {g\'real\'} A number, with or without a decimal point and optional exponent\n  (e or E), as accepted by string.atof(). This validator accepts a\n  \'separator\' argument, which specifies the character used to represent the\n  decimal point. The default \'separator\' is \'.\'.\n\no {g\'alphabetic\'} Consisting of the letters \'a-z\' and \'A-Z\'. In this case,\n  \'min\' and \'max\' specify limits on the length of the text.\n\no {g\'alphanumeric\'} Consisting of the letters \'a-z\', \'A-Z\' and \'0-9\'. In this\n  case, \'min\' and \'max\' specify limits on the length of the text.\n\no {g\'time\'} Hours, minutes and seconds, in the format \'HH:MM:SS\', as accepted\n  by Pmw.timestringtoseconds(). This validator accepts a \'separator\'\n  argument, which specifies the character used to separate the three fields.\n  The default separator is \':\'. The time may be negative.\n\no {g\'date\'} Day, month and year, as accepted by Pmw.datestringtojdn(). This\n  validator accepts a \'separator\' argument, which specifies the character\n  used to separate the three fields. The default is \':\'. This validator also\n  accepts a \'format\' argument, which is passed to Pmw.datestringtojdn() to\n  specify the desired ordering of the fields. The default is \'ymd\'.\n\nIf \'validator\' is a function, then it will be called whenever the contents of\nthe entry may have changed due to user action or by a call to {fsetentry()}.\nThe function is called with at least one argument, the first one being the\nnew text as modified by the user or {fsetentry()}. The other arguments are\nkeyword arguments made up of the non-core fields of the validate dictionary.\n\nThe validator function should return Pmw.OK, Pmw.ERROR or Pmw.PARTIAL as\ndescribed above. It should not perform minimum and maximum checking. This is\ndone after the call, if it returns Pmw.OK.\n\nThe \'stringtovalue\' field in the dictionary may be specified as the name of\none of the standard validators, the name of a validator supplied by the\nextravalidators option, a function or None.\n\nThe stringtovalue function is used to convert the entry input into a value\nwhich can then be compared with any minimum or maximum values specified for\nthe validator. If the \'min\' or \'max\' fields are specified as strings, they\nare converted using the stringtovalue function. The stringtovalue function is\ncalled with the same arguments as the validator function. The stringtovalue\nfunction for the standard number validators convert the string to a number.\nThose for the standard alpha validators return the length of the string.\nThose for the standard \'time\' and \'date\' validators return the number of\nseconds and the Julian Day Number, respectively. See Pmw.stringtoreal(),\nPmw.timestringtoseconds() and Pmw.datestringtojdn().\n\nIf the validator has been specified as a function and no \'stringtovalue\'\nfield is given, then it defaults to the standard python len() function.\n\nIf \'validator\' is None, no validation is performed. However, minimum and\nmaximum checking may be performed, according to the stringtovalue function.\nFor example, to limit the entry text to a maximum of five characters:\n\n Pmw.EntryField(validate = {{\'max\' : 5})\n\nThe validator functions for each of the standard validators can be accessed\nas:\n\nt {fPmw.numericvalidator\nt Pmw.integervalidator\nt Pmw.hexadecimalvalidator\nt Pmw.realvalidator\nt Pmw.alphabeticvalidator\nt Pmw.alphanumericvalidator\nt Pmw.timevalidator\nt Pmw.datevalidator}\n\nWhenever the validate option is configured, the text currently displayed in\nthe entry widget is revalidated. If it is not valid, the errorbackground\ncolor is set and the invalidcommand function is called. However, the\ndisplayed text is not modified.'
p2462
sg8
(lp2463
sg10
(lp2464
S'2006/03/19'
p2465
asg12
I0
sg13
(lp2466
sg15
(lp2467
ssS'buffet.widget.mainmenubar'
p2468
(dp2469
g4
(lp2470
sg6
S'>buffet.widget.generic2 "Pmw.MainMenuBar", \'\', \'wid.pmw.mainmenubar.overview\''
p2471
sg8
(lp2472
sg10
(lp2473
sg12
I0
sg13
(lp2474
sg15
(lp2475
ssS'wid.pmw.timecounter.opt.secondentryfield'
p2476
(dp2477
g4
(lp2478
sg6
S'{HTimeCounter - secondentryfield}\n\nThe entry field where the seconds are entered and displayed.'
p2479
sg8
(lp2480
sg10
(lp2481
S'2006/03/24'
p2482
asg12
I0
sg13
(lp2483
sg15
(lp2484
ssS'wid.pmw.scrolledframe.opt.nametop'
p2485
(dp2486
g4
(lp2487
sg6
S'>option.nametop.generic "ScrolledFrame"'
p2488
sg8
(lp2489
sg10
(lp2490
sg12
I0
sg13
(lp2491
sg15
(lp2492
ssS'wid.pmw.scrolledcanvas.overview'
p2493
(dp2494
g4
(lp2495
sg6
S'{HWhat is: A ScrolledCanvas widget}\n\nA scrolled canvas consists of a standard canvas widget with optional\nscrollbars which can be used to scroll the canvas. The scrollbars can be\ndynamic, which means that a scrollbar will only be displayed if it is\nnecessary, that is, if the scrollregion of the canvas is larger than the\ncanvas.'
p2496
sg8
(lp2497
sg10
(lp2498
S'2006/03/21'
p2499
asg12
I0
sg13
(lp2500
sg15
(lp2501
S'What is: A ScrolledCanvas widget'
p2502
assS'error.reporting'
p2503
(dp2504
g4
(lp2505
sg6
S'{HHow to: Report errors found in $$}\n\nThe short answer is to email us a bug report at $mailto\n\n{bThe long story}\n\no {BProgram execution bugs} For these we need some reliable way of making the\n  problem happen. If we can\'t make the problem happen then we have no way of\n  knowing if we have fixed it. Error reports of the form "occasionally it\n  does yada" are almost useless. The ideal bug report is a clear and\n  comprehensible list of things to do which culminates in the problem\n  happening. Keeping the list of things to do free of unnecessary steps is\n  helpful.\n\no {BHelp message problems} If you find a factual error or a typo in a help\n  message or if you find a help message that is simply not on topic then we\n  would like to know about it. While the erronious help message is showing,\n  right-click the mouse over the {gClose} button in the upper right corner of\n  the "Help" window; this will pop up a dialog showing the unique name of the\n  current help topic. In your report, please mention the Topic Name along\n  with the problem in the text.\n\no {BFeature requests} By all means send these in, but keep in mind that $$ is\n  maintained by volunteers who have lives apart from the computer. This is\n  open-source. If you feel a feature is Really Really needed you might\n  consider implementing it yourself and then submitting the code. Some\n  caveats:\n\n o If you are submitting a suggestion then for best effect it should come\n   with a ludid and compelling explanation of what the suggested feature\n   would do, how this feature would be of benefit to a majority of $$\'s users\n   and how it fits in nicely with the spirit of the existing project.\n\n o If you propose to modify $$ and submit the modification then you might\n   check with the $$ team in advance to see if we think the suggested\n   modification makes sense, particularly if the time required on your part\n   is large. Modification which we think violate the existing spirit of the\n   project are not likely to be included, regardless of how much you like\n   them.'
p2506
sg8
(lp2507
sg10
(lp2508
S'2006/03/31'
p2509
asg12
I0
sg13
(lp2510
sg15
(lp2511
S'How to: Report errors/bugs found in $$'
p2512
assS'eventhandler-popup-menu'
p2513
(dp2514
g4
(lp2515
S'&event'
p2516
aS'&code editor'
p2517
aS'=dialog-handlerreference'
p2518
aS'&maintained'
p2519
aS'&binding'
p2520
aS'&command option'
p2521
aS'&handler'
p2522
aS'=dialog-handlerrename'
p2523
aS'&handler'
p2524
aS'&maintained'
p2525
aS'=dialog-handlerdelete'
p2526
aS'&handler'
p2527
asg6
S'{HThe event handler popup menu}\n\nThis menu lets you mess with &event handlers. To get the menu, from the\n&code editor place the cursor over the "def" part of the handler (anywhere\ninside the text that is on a different colored background will do) and\nright click.\n\no {LSee references=dialog-handlerreference}\n   To find out which $$ &maintained &bindings and &command options refer\n  to this &handler.\n\no {LRename=dialog-handlerrename}\n   To rename this &handler and have all the $$ &maintained references to\n  it updated.\n\no {LDelete=dialog-handlerdelete}\n   To delete this &handler.'
p2528
sg8
(lp2529
sg10
(lp2530
S'2006/02/07'
p2531
asg12
I0
sg13
(lp2532
sg15
(lp2533
S'The event handler popup menu'
p2534
assS'wid.pmw.timecounter.opt.downhourarrow'
p2535
(dp2536
g4
(lp2537
sg6
S">wid.pmw.timecounter.arrow 'down','dec','hour'"
p2538
sg8
(lp2539
sg10
(lp2540
sg12
I0
sg13
(lp2541
sg15
(lp2542
ssS'wid.tkinter.button.opt.image'
p2543
(dp2544
g4
(lp2545
sg6
S'>option.image.generic "Button"'
p2546
sg8
(lp2547
sg10
(lp2548
sg12
I0
sg13
(lp2549
sg15
(lp2550
ssS'option.highlightthickness.generic'
p2551
(dp2552
g4
(lp2553
S'&dimension'
p2554
aS'&focus'
p2555
asg6
S'{H@0 - highlightthickness}\n\nA &dimensioned number giving the thickness of the &focus highlight around the\n@0.'
p2556
sg8
(lp2557
sg10
(lp2558
S'2005/03/02'
p2559
asg12
I0
sg13
(lp2560
sg15
(lp2561
ssS'wid.pmw.counter.opt.autorepeat'
p2562
(dp2563
g4
(lp2564
sg6
S'{HCounter - autorepeat}\n\nIf True, the counter will continue to count up or down\nas long as the arrow button is held down.'
p2565
sg8
(lp2566
sg10
(lp2567
S'2006/03/18'
p2568
asg12
I0
sg13
(lp2569
sg15
(lp2570
ssS'wid.tkinter.radiobutton.opt.foreground'
p2571
(dp2572
g4
(lp2573
sg6
S'>option.foreground.generic "Radiobutton"'
p2574
sg8
(lp2575
sg10
(lp2576
sg12
I0
sg13
(lp2577
sg15
(lp2578
ssS'wid.pmw.timecounter.opt.pyclass'
p2579
(dp2580
g4
(lp2581
sg6
S'>option.pyclass.generic "TimeCounter"'
p2582
sg8
(lp2583
sg10
(lp2584
sg12
I0
sg13
(lp2585
sg15
(lp2586
ssS'wid.tkinter.canvas.opt.insertwidth'
p2587
(dp2588
g4
(lp2589
sg6
S'>option.insertwidth.generic "Canvas"'
p2590
sg8
(lp2591
sg10
(lp2592
sg12
I0
sg13
(lp2593
sg15
(lp2594
ssS'option.foreground.generic'
p2595
(dp2596
g4
(lp2597
S'&color'
p2598
asg6
S'{H@0 - foreground}\n\nThe normal foreground &color to use with this @0.'
p2599
sg8
(lp2600
sg10
(lp2601
S'2005/03/02'
p2602
asg12
I0
sg13
(lp2603
sg15
(lp2604
ssS'optioneditor.resizeknobs'
p2605
(dp2606
g4
(lp2607
S'&option editor'
p2608
asg6
S"{bOption Editor - Resize Knobs}    {P$imgpr-help-Resize.ppm}\n\nThe &option editor's has two of these resize knobs, each of which can be dragged\nleft or right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p2609
sg8
(lp2610
sg10
(lp2611
S'2005/03/04'
p2612
asg12
I0
sg13
(lp2613
sg15
(lp2614
ssS'wid.tkinter.menu.opt.activebackground'
p2615
(dp2616
g4
(lp2617
sg6
S'>option.activebackground.generic "Menu"'
p2618
sg8
(lp2619
sg10
(lp2620
sg12
I0
sg13
(lp2621
sg15
(lp2622
ssS'wid.pmw.combobox.opt.fliparrow'
p2623
(dp2624
g4
(lp2625
sg6
S'{HComboBox - fliparrow}\n\nUsed only in dropdown ComboBoxes. If True, the arrow button is drawn upside down\nwhen the ListBox is being displayed.  The &default is {gTrue}.'
p2626
sg8
(lp2627
sg10
(lp2628
S'2006/03/18'
p2629
asg12
I0
sg13
(lp2630
sg15
(lp2631
ssS'wid.tkinter.button.opt.underline'
p2632
(dp2633
g4
(lp2634
sg6
S'>option.underline.generic "Button"'
p2635
sg8
(lp2636
sg10
(lp2637
sg12
I0
sg13
(lp2638
sg15
(lp2639
ssS'wid.pmw.timecounter.overview'
p2640
(dp2641
g4
(lp2642
S'=wid.pmw.counter.overview'
p2643
asg6
S'{HWhat is: A TimeCounter widget}\n\nA time counter is similar to a regular\n{LPmw.Counter=wid.pmw.counter.overview} except that the user may increment\nand decrement the hours, minutes and seconds individually.'
p2644
sg8
(lp2645
sg10
(lp2646
S'2006/03/21'
p2647
asg12
I0
sg13
(lp2648
sg15
(lp2649
S'What is: A TimeCounter widget'
p2650
assS'wid.tkinter.entry.opt.insertbackground'
p2651
(dp2652
g4
(lp2653
sg6
S'>option.insertbackground.generic "Entry"'
p2654
sg8
(lp2655
sg10
(lp2656
sg12
I0
sg13
(lp2657
sg15
(lp2658
ssS'maintained.by.rapyd'
p2659
(dp2660
g4
(lp2661
S'&binding'
p2662
aS'&command option'
p2663
aS'&event'
p2664
aS'&handler'
p2665
aS'&binding'
p2666
aS'&bind editor'
p2667
aS'&option editor'
p2668
aS'&binding'
p2669
aS'&binding'
p2670
aS'&event'
p2671
aS'&handler'
p2672
aS'&event'
p2673
aS'&handler'
p2674
aS'&binding'
p2675
aS'&event'
p2676
aS'&handler'
p2677
aS'&event'
p2678
aS'&handler'
p2679
aS'&binding'
p2680
aS'&handler'
p2681
aS'&binding'
p2682
aS'&handler'
p2683
asg6
S'{HBindings and command options maintained by $$}\n\nWe talk a lot about &bindings, &command options and &event &handlers\n"maintained" by $$. What does that mean exactly?\n\n&Bindings which are created via the &bind editor or the &option editor (for\nthose options where you get to specify a command to call) are &bindings which\nare "maintained by $$". When you create such a &binding you automatically get\nan &event &handler as well. The body of that &event &handler is yours to code as\nyou please but the header of the event handler is maintained by $$.\n\nAny bindings or event handlers which you put in your code by hand are\nmaintained by you and not by $$.\n\nThis is sometimes an important distinction. For example, when working with\n&bindings and &event &handlers which are maintained by $$ if you rename an &event\n&handler then any &bindings which refer to that &handler are automatically\nupdated to refer to the new name. When you create bindings and handlers which\nare not maintained by $$ then no such renaming happens.\n\nUsing $$ to maintain &bindings and &handlers is the way to go unless you have\nsome Really Good reason to do otherwise.'
p2684
sg8
(lp2685
S'maintained'
p2686
asg10
(lp2687
S'2006/02/07'
p2688
asg12
I0
sg13
(lp2689
sg15
(lp2690
S'What is: Bindings and command options maintained by $$'
p2691
assS'wid.pmw.timecounter.opt.hull'
p2692
(dp2693
g4
(lp2694
sg6
S">option.pmw.hull.generic 'TimeCounter'"
p2695
sg8
(lp2696
sg10
(lp2697
sg12
I0
sg13
(lp2698
sg15
(lp2699
ssS'option.pmw.label.generic'
p2700
(dp2701
g4
(lp2702
sg6
S'{H@0 - label}\n\nIf the {glabelpos} option is not {gNone}, this component is created as a\ntext label for the @0 megawidget.'
p2703
sg8
(lp2704
sg10
(lp2705
S'2006/03/19'
p2706
asg12
I0
sg13
(lp2707
sg15
(lp2708
ssS'bind.eventwizard.basicevent'
p2709
(dp2710
g4
(lp2711
S'&event'
p2712
aS'&bind wizard'
p2713
aS'&event'
p2714
aS'&focus'
p2715
aS'&focus'
p2716
aS'&new mexico tech'
p2717
asg6
S'{HBind Event Wizard - Basic Types}\n\nAn &Event string consists of a {bbasic event} plus optional other stuff. Right now the &bind\nwizard is waiting for you to choose the basic &event. Having made your choice you should\npress the {gNext} button to continue the process.\n\nThe basic event types available through the wizard are:\n\no {GActivate}  A widget is changing from being inactive to being active. This refers to\n  changes in the state option of a widget such as a button changing from inactive (grayed\n  out) to active.\n\no {gButtonPress}  The user pressed one of the mouse buttons.\n\no {gButtonRelease} The user let up on a mouse button. This is probably a better choice in\n  most cases than the ButtonPress event, because if the user accidentally presses the\n  button, they can move it off the widget to avoid setting off the event.\n\no {GConfigure}  The user changed the size of a widget, for example by dragging a corner or\n  side of the window.\n\no {gDeactivate}  A widget is changing from being active to being inactive. This refers to\n  changes in the state option of a widget such as a radiobutton changing from active to\n  inactive (grayed out).\n\no {gDestroy}  A widget is being destroyed.\n\no {gEnter}  The user moved the mouse pointer into a visible part of a widget. (This is\n  different than the enter key, which is a KeyPress event for a key whose name is actually\n  "return".)\n\no {gExpose}  This event occurs whenever at least some part of your application or widget\n  becomes visible after having been covered up by another window.\n\no {gFocusIn}  A widget got the input &focus. This can happen either in response to a user\n  event (like using the tab key to move focus between widgets) or programmatically (for\n  example, your program calls the {f.focus_set()} on a widget).\n\no {gFocusOut} The input &focus was moved out of a widget. As with FocusIn, the user can\n  cause this event, or your program can cause it.\n\no {gKeyPress}  The user pressed a key on the keyboard.\n\no {gKeyRelease}  The user let up on a key.\n\no {gLeave}  The user moved the mouse pointer out of a widget.\n\no {gMap}  A widget is being mapped, that is, made visible in the application. This will\n  happen, for example, when you call the widget\'s {f.pack()} method.\n\no {gMotion}  The user moved the mouse pointer entirely within a widget.\n\no {gUnmap}  A widget is being unmapped and is no longer visible. This happens, for example,\n  when you use the widget\'s {f.pack_remove()} method.\n\no {gVisibility}  Happens when at least some part of the application window becomes visible\n  on the screen.\n\n$nmt'
p2718
sg8
(lp2719
sg10
(lp2720
S'2005/03/13'
p2721
asg12
I0
sg13
(lp2722
sg15
(lp2723
S'Bind Event Wizard - Basic event types'
p2724
assS'wid.pmw.scrolledtext.opt.scrollmargin'
p2725
(dp2726
g4
(lp2727
S'&default'
p2728
asg6
S'{HScrolledText - scrollmargin}\n\nThe distance between the scrollbars and the text widget. The &default is 2.'
p2729
sg8
(lp2730
sg10
(lp2731
S'2006/03/23'
p2732
asg12
I0
sg13
(lp2733
sg15
(lp2734
ssS'bind.on.parkinglot'
p2735
(dp2736
g4
(lp2737
S'&binding'
p2738
aS'&a widget'
p2739
aS'&event'
p2740
aS'&handler'
p2741
aS'&form'
p2742
aS'&a widget'
p2743
aS'&form'
p2744
aS'&binding'
p2745
aS'&parking lot'
p2746
aS'&form'
p2747
aS'&a widget'
p2748
aS'&parking lot'
p2749
aS'&binding'
p2750
aS'&form'
p2751
aS'&binding'
p2752
aS'&handler'
p2753
asg6
S"{HEvent bindings while on parking lot}\n\nA &binding is a connection between &a widget related &event and an event &handler method of\na &form. You need both &a widget and a &form in order to create or modify a &binding.\n\nThe current widget is presently on the &parking lot and thus is not part of any &form. When\n&a widget is moved to the &parking lot any &bindings it had are retained, in escrow so to\nspeak, and when that widget is moved back onto a &form it will attempt to reconnect it's\n&bindings to event &handlers of the corresponding name. However, you can't alter it's\nbindings as long as the widget is on the parking lot."
p2754
sg8
(lp2755
sg10
(lp2756
S'2005/05/13'
p2757
aS'This one is for when the user attempts to modify bindings of a widreq which'
p2758
aS'is on the parking lot.'
p2759
asg12
I0
sg13
(lp2760
sg15
(lp2761
ssS'wid.tkinter.entry.opt.selectforeground'
p2762
(dp2763
g4
(lp2764
sg6
S'>option.selectforeground.generic "Entry", "selected text"'
p2765
sg8
(lp2766
sg10
(lp2767
sg12
I0
sg13
(lp2768
sg15
(lp2769
ssS'code-editor'
p2770
(dp2771
g4
(lp2772
S'&layout area'
p2773
aS'&project'
p2774
aS'&layout editor'
p2775
aS'&form'
p2776
aS'&layout editor'
p2777
aS'=howto.swap.code.layout'
p2778
aS'=code-editor.colorization'
p2779
aS'=code-editor.actions'
p2780
asg6
S"{hCode Editor}\n\nThe Code Editor is part of the &Layout Area. It's job is to make it easy\nfor you to edit the code that makes up your &project.\n\nThe code editor time-shares space on the screen with the &layout editor\nwhich is the visual representation of your &form. You can snap back and\nforth between the code and the &layout editor in {Lthree different\nways=howto.swap.code.layout}.\n\n{lColorization=code-editor.colorization}\n\nText is automatically colorized as you type it. This makes it easier to\nfollow your code and easier to spot syntactic and spelling errors.\n\n{lEdit Actions=code-editor.actions}\n\nMost of the standard, and a few non-standard, edit actions are supported.\n\n{BLook-don't-touch $$ generated code}\n\nSome code (for example the code that generates the class of your form, and\nthe initial part of event handler methods) is generated automatically by\n$$. This is look-don't-touch code; you can look at it, you can move the\ncursor through it but attempts to modify it are ignored. This system\ngenerated code is rendered on a different colored background so you can\neasily spot it. The exact color of the background is set by the config\nfile."
p2781
sg8
(lp2782
S'code editor'
p2783
asg10
(lp2784
S'2005/04/06'
p2785
asg12
I0
sg13
(lp2786
sg15
(lp2787
S'The Code Editor'
p2788
aS'$$ generated code is rendered with a different background color'
p2789
assS'option.pmw.frame.generic'
p2790
(dp2791
g4
(lp2792
sg6
S'{H@0 - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos} option is not\n{gNone}), the {gframe} component is created to act as the container of the @1\ncreated by the @2. If there is no {glabel} component then no {gframe} component\nis created and the {ghull} component acts as the container.'
p2793
sg8
(lp2794
sg10
(lp2795
S'@0 Type of widget eg ButtonBox'
p2796
aS'@1 Type of widget created inside the frame eg Buttons'
p2797
aS'@2 The methods eg "add() and insert() methods"'
p2798
asg12
I0
sg13
(lp2799
sg15
(lp2800
ssS'wid.pmw.buttonbox.opt.labelpos'
p2801
(dp2802
g4
(lp2803
sg6
S'>option.pmw.labelpos.generic "ButtonBox"'
p2804
sg8
(lp2805
sg10
(lp2806
sg12
I0
sg13
(lp2807
sg15
(lp2808
ssS'wid.tkinter.checkbutton.opt.activeforeground'
p2809
(dp2810
g4
(lp2811
sg6
S'>option.activeforeground.generic "Checkbutton"'
p2812
sg8
(lp2813
sg10
(lp2814
sg12
I0
sg13
(lp2815
sg15
(lp2816
ssS'wid.tkinter.label.opt.takefocus'
p2817
(dp2818
g4
(lp2819
sg6
S'>option.takefocus.generic "Label"'
p2820
sg8
(lp2821
sg10
(lp2822
sg12
I0
sg13
(lp2823
sg15
(lp2824
ssS'option.from_.generic'
p2825
(dp2826
g4
(lp2827
S'=option.to.generic'
p2828
aS'&new mexico tech'
p2829
asg6
S'{H@0 - from_}\n\nA float or integer value that defines one end of the scale\'s range.\n\nFor vertical scales, this is the top end; for horizontal scales, the left\nend.\n\nThe underbar (_) is not a typo: because {gfrom} is a reserved word in\nPython, this option is spelled {Bfrom_}. The default is 0. See the "{Lto\noption=option.to.generic}" for the other end of the range.\n\n$nmt'
p2830
sg8
(lp2831
sg10
(lp2832
S'2005/03/02'
p2833
asg12
I0
sg13
(lp2834
sg15
(lp2835
ssS'wid.tkinter.canvas.opt.highlightbackground'
p2836
(dp2837
g4
(lp2838
sg6
S'>option.highlightbackground.generic "Canvas"'
p2839
sg8
(lp2840
sg10
(lp2841
sg12
I0
sg13
(lp2842
sg15
(lp2843
ssS'wid.tkinter.scrollbar.opt.relief'
p2844
(dp2845
g4
(lp2846
sg6
S'>option.relief.generic "Scrollbar"'
p2847
sg8
(lp2848
sg10
(lp2849
sg12
I0
sg13
(lp2850
sg15
(lp2851
ssS'wid.tkinter.scale.opt.length'
p2852
(dp2853
g4
(lp2854
sg6
S'>option.length.generic "Scale"'
p2855
sg8
(lp2856
sg10
(lp2857
sg12
I0
sg13
(lp2858
sg15
(lp2859
ssS'whatis.config.file'
p2860
(dp2861
g4
(lp2862
sg6
S'{HWhat is: The configuration file}\n\nThe configuration file - $configfile - contains a great pile of setup and\nconfiguration information used by $$ including:\n\n o One or more text editor "schemes". Each scheme specifies the colors and\n   bindings used by the code editor.\n\n o A line which say which of the defined schemes to use for the code\n   editors.\n\n o Definitions of all the options of all the widgets.\n\n o A specification that says whether each widget-providing module (eg\n   Tkinter and Pmw) should be imported using "import yada" or "from yada\n   import *".\n\n$$ comes with two already-defined text editor schemes: one based on the\n{gIdle} colors and bindings, one based on the {gMidnight Commander} (aka\nCoolEdit) colors and bindings. Unless you change the config file you get\nthe {gIdle} scheme. If you want to change the scheme then look in the\nconfig file for the line that says "DefaultEditorScheme=Idle".\n\nIt\'s not hard to define your own editor scheme. Check the documentation in\nthe config file itself for details.\n\nBy default $$ used "{gfrom Tkinter import *}" for Tkinter (so that all the\nhandy Tkinter constants are available without having to prefix them with\n"Tkinter.") and "{gimport Pmw}" for Pmw. If you change one or both of\nthese in the config file then the startup code in the main code area of\nthe main module of any existing projects will need updating to take the\nchange into account. Although this code is created at new-project-creation\ntime it is *not* automatically updated by $$.\n\nThere is a fair bit of documentation in the config file. If you have\nspecific questions take a look in the file itself.'
p2863
sg8
(lp2864
S'config file'
p2865
asg10
(lp2866
sg12
I0
sg13
(lp2867
sg15
(lp2868
S'What is: The configuration file'
p2869
assS'wid.pmw.combobox.opt.pyclass'
p2870
(dp2871
g4
(lp2872
sg6
S'>option.pyclass.generic "ComboBox"'
p2873
sg8
(lp2874
sg10
(lp2875
sg12
I0
sg13
(lp2876
sg15
(lp2877
ssS'frame-properties-dialog'
p2878
(dp2879
g4
(lp2880
S'=layout-frame-select'
p2881
aS'=form-properties-dialog-noname'
p2882
asg6
S"{HFrame properties dialog}\n\nInterior frames in a form are instances of either:\n\n o {gTkinter.Frame}\n t or\n o {gPmw.ScrolledFrame}\n\nNewly created frames are always instances of {gTkinter.Frame}. Use this dialog if you want\nthem to be an instance of {gPmw.ScrolledFrame}.\n\nTo call up the frame properties dialog, {Lselect=layout-frame-select} the frame, right-click\nand from the popup-menu choose {gProperties}.\n\nThe outermost frame of a form represents the form itself and of necessity it's properties\nare different from those of interior frames; {Lclick here=form-properties-dialog-noname} for\ndetails."
p2883
sg8
(lp2884
sg10
(lp2885
S'2006/03/12'
p2886
asg12
I0
sg13
(lp2887
sg15
(lp2888
S'The frame properties dialog'
p2889
assS'wid.pmw.combobox.opt.hull'
p2890
(dp2891
g4
(lp2892
sg6
S">option.pmw.hull.generic 'ComboBox'"
p2893
sg8
(lp2894
sg10
(lp2895
sg12
I0
sg13
(lp2896
sg15
(lp2897
ssS'option.selectcolor.generic'
p2898
(dp2899
g4
(lp2900
S'&new mexico tech'
p2901
asg6
S'{H@0 - selectcolor}\n\nThe color of the @0 when it is set.\n\nThe default is red.\n\n$nmt'
p2902
sg8
(lp2903
sg10
(lp2904
S'2005/03/06'
p2905
asg12
I0
sg13
(lp2906
sg15
(lp2907
ssS'wid.tkinter.toplevel.opt.name'
p2908
(dp2909
g4
(lp2910
sg6
S'>option.name.generic "Toplevel"'
p2911
sg8
(lp2912
sg10
(lp2913
sg12
I0
sg13
(lp2914
sg15
(lp2915
ssS'wid.tkinter.scale.opt.state'
p2916
(dp2917
g4
(lp2918
sg6
S'>option.state.generic "Scale"'
p2919
sg8
(lp2920
sg10
(lp2921
sg12
I0
sg13
(lp2922
sg15
(lp2923
ssS'wid.tkinter.button.opt.activebackground'
p2924
(dp2925
g4
(lp2926
sg6
S'>option.activebackground.generic "Button"'
p2927
sg8
(lp2928
sg10
(lp2929
sg12
I0
sg13
(lp2930
sg15
(lp2931
ssS'option.underline.generic'
p2932
(dp2933
g4
(lp2934
S'&new mexico tech'
p2935
asg6
S"{H@0 - underline}\n\nDefault is {g-1}, meaning that no character of the @0's text will be\nunderlined. If non-negative, the corresponding text character will be\nunderlined. For example, underline {g1} would underline the second character\nof the @0's text.\n\n$nmt"
p2936
sg8
(lp2937
sg10
(lp2938
S'2005/04/05'
p2939
asg12
I0
sg13
(lp2940
sg15
(lp2941
ssS'wid.tkinter.menubutton.opt.height'
p2942
(dp2943
g4
(lp2944
sg6
S'>option.height.generic "Menubutton"'
p2945
sg8
(lp2946
sg10
(lp2947
sg12
I0
sg13
(lp2948
sg15
(lp2949
ssS'wid.tkinter.menubutton.opt.text'
p2950
(dp2951
g4
(lp2952
sg6
S'>option.text.generic "Menubutton"'
p2953
sg8
(lp2954
sg10
(lp2955
sg12
I0
sg13
(lp2956
sg15
(lp2957
ssS'option.justify.generic'
p2958
(dp2959
g4
(lp2960
sg6
S'{H@0 - justify}\n\nHow to show multiple text lines on this @0:\n\nt {gcenter} to center each line.\nt {gleft  } to left-justify each line.\nt {gright } to right-justify each line.'
p2961
sg8
(lp2962
sg10
(lp2963
S'2005/03/04'
p2964
asg12
I0
sg13
(lp2965
sg15
(lp2966
ssS'bind-editor.resizeknobs'
p2967
(dp2968
g4
(lp2969
S'&bind editor'
p2970
aS'=bind-editor.abbreviation'
p2971
aS'&event'
p2972
aS'&handler'
p2973
aS'&handler'
p2974
aS'&bind editor'
p2975
asg6
S"{bBind Editor - Resize Knobs}   {p$img/pr-msc-resize.ppm}\n\nThese are the &bind editor's resize knobs, both of which can be dragged left or right.\n\n o Dragging the first resize knob adjusts the width of the area which shows the\n   {Labbreviation=bind-editor.abbreviation} of the &event description string.\n\n o Dragging the second resize knob adjusts the width of the area which shows the name of the\n   &handler for this binding.\n\n{bNote}: To make the &handler name area wider, you can drag the second resize knob off the\nright side of the &bind editor. Although the resize knob itself stops at the edge of the\neditor, the position of the mouse is still being tracked and the handler name area will\nresize appropriately."
p2976
sg8
(lp2977
sg10
(lp2978
S'2005/03/17'
p2979
asg12
I0
sg13
(lp2980
sg15
(lp2981
S'The Bind editor resize knobs'
p2982
assS'wid.tkinter.menubutton.opt.activebackground'
p2983
(dp2984
g4
(lp2985
sg6
S'>option.activebackground.generic "Menubutton"'
p2986
sg8
(lp2987
sg10
(lp2988
sg12
I0
sg13
(lp2989
sg15
(lp2990
ssS'wid.tkinter.text.opt.font'
p2991
(dp2992
g4
(lp2993
S'&font'
p2994
aS'&new mexico tech'
p2995
asg6
S'{HText - font}\n\nThe default &font for text inserted into the widget. Note that you can have\nmultiple fonts in Text widgets by using tags to change the properties of some\ntext.\n\n$nmt'
p2996
sg8
(lp2997
sg10
(lp2998
S'2005/04/27'
p2999
asg12
I0
sg13
(lp3000
sg15
(lp3001
ssS'wid.pmw.counter.opt.datatype'
p3002
(dp3003
g4
(lp3004
sg6
S"{HCounter - datatype}\n\nSpecifies how the counter should count up and down.\n\no {gInteger}\n   The counter counts using whole numbers.\n\no {gReal}\n   The counter counts using floating point numbers. With this choice you get\n  to set the character used to separate the integer portion of the number\n  from the fractional portion.\n\no {gDate}\n   The counter counts in days, months and years. With this choice you get to\n  set the character that separates the date elements and you get to specify\n  the order in which the elements appear. Of course ymd is the only\n  reasonable choice but such is the joy of Pmw that it lets you select any of\n  the unreasonable choices if you so desire.\n\no {gTime}\n   The counter counts in hours and minutes. With this choice you get to set\n  the character that separates the time elements.\n\no {gDictionary}\n   For this one you specify either the name of a dictionary or an actual\n  dictionary enclosed in braces. The dictionary should contain an entry whose\n  key is {g'counter'} and whose value is a function. The function will be\n  called with at least three arguments:\n\n  n {gtext} The current content of the entry field.\n  n {gfactor} 1 when incrementing, -1 when decrementing.\n  n {gincrement} The value of the {gincrement} option.\n\n  The other arguments are keyword arguments made up of the items of the\n  {gdatatype} dictionary, excluding the {gcounter} item.\n\n  The {gcounter} function should return a string representing the revised\n  value. It should raise a {gValueError} if the {itext} is invalid. In this\n  case the bell is rung and the entry text is not changed."
p3005
sg8
(lp3006
sg10
(lp3007
S'2006/03/18'
p3008
asg12
I0
sg13
(lp3009
sg15
(lp3010
ssS'wid.tkinter.label.opt.pyclass'
p3011
(dp3012
g4
(lp3013
sg6
S'>option.pyclass.generic "Label"'
p3014
sg8
(lp3015
sg10
(lp3016
sg12
I0
sg13
(lp3017
sg15
(lp3018
ssS'wid.tkinter.checkbutton.opt.disabledforeground'
p3019
(dp3020
g4
(lp3021
sg6
S'>option.disabledforeground.generic "Checkbutton"'
p3022
sg8
(lp3023
sg10
(lp3024
sg12
I0
sg13
(lp3025
sg15
(lp3026
ssS'run-error-dialog'
p3027
(dp3028
g4
(lp3029
S'&project'
p3030
aS'&module'
p3031
aS'&form'
p3032
aS'&module'
p3033
aS'&form'
p3034
aS'&form'
p3035
aS'&project'
p3036
aS'&module'
p3037
aS'&form'
p3038
asg6
S'{HError in run project}\n\nYou just ran your &project and it encountered an error. The traceback shows the\nerror history. The traceback lines are generally like this:\n\nt Module {gMM}, form {gFF}, line {gLL} in {gRR}  (File {gPP}, line {gNN})\n\n o {gMM} is the name of a &module.\n o {gFF} is the name of the $$ &form (or "{f-Main-}" if within the main code area\n   of a &module).\n o {gLL} is the line number within the &form.\n o {gRR} is the name of the routine or function within the &form.\n o {gPP} is the name of the generated file that was actually running.\n o {gNN} is the line number within the generated file. Since the generated file\n   contains all the code from the main code area and all the forms, this number is\n   different from the number of the line number within the form.\n\nFollowing each traceback line is the line of text in question. These are green to\nindicate that they are links. Click on one of the green lines to be taken to that\nline in the appropriate code editor.\n\nClick on the {bDismiss} button to close the error dialog.\n\nSome of the traceback lines may refer to code which is not part of the current\n&project (for example if your project does an {ginclude} of a non-project module).\nIn this case the traceback line shows {g<None>} for &module, &form and line number\nwithin form, and the text line does not show up in green. To look at such lines\ninvoke your favorite text editor.'
p3039
sg8
(lp3040
sg10
(lp3041
S'2006/01/29'
p3042
asg12
I0
sg13
(lp3043
sg15
(lp3044
S'The traceback when a run project hits an error'
p3045
assS'option.insertofftime.generic'
p3046
(dp3047
g4
(lp3048
S'&new mexico tech'
p3049
asg6
S'{H@0 - insertofftime}\n\nThe number of milliseconds the insertion cursor is off during its blink\ncycle.\n\nSet this option to zero to suppress blinking.\n\nDefault is 300.\n\n$nmt'
p3050
sg8
(lp3051
sg10
(lp3052
S'2005/03/03'
p3053
asg12
I0
sg13
(lp3054
sg15
(lp3055
ssS'wid.tkinter.scale.opt.resolution'
p3056
(dp3057
g4
(lp3058
sg6
S'>option.resolution.generic "Scale"'
p3059
sg8
(lp3060
sg10
(lp3061
sg12
I0
sg13
(lp3062
sg15
(lp3063
ssS'wid.tkinter.label.opt.foreground'
p3064
(dp3065
g4
(lp3066
sg6
S'>option.foreground.generic "Label"'
p3067
sg8
(lp3068
sg10
(lp3069
sg12
I0
sg13
(lp3070
sg15
(lp3071
ssS'option.selectmode.generic'
p3072
(dp3073
g4
(lp3074
S'&new mexico tech'
p3075
asg6
S"{H@0 - selectmode}\n\nDetermines how many items can be selected, and how mouse drags affect the\nselection:\n\no {GBROWSE} Normally, you can only select one line out of a listbox. If you\n  click on an item and then drag to a different line, the selection will\n  follow the mouse. This is the default.\n\no {GSINGLE} You can only select one line, and you can't drag the\n  mouse--wherever you click button 1, that line is selected.\n\no {GMULTIPLE} You can select any number of lines at once. Clicking on any\n  line toggles whether or not it is selected.\n\no {GEXTENDED} You can select any adjacent group of lines at once by clicking\n  on the first line and dragging to the last line.\n\n$nmt"
p3076
sg8
(lp3077
sg10
(lp3078
S'2005/04/03'
p3079
asg12
I0
sg13
(lp3080
sg15
(lp3081
ssS'parking-lot.main'
p3082
(dp3083
g4
(lp3084
S'&layout editor'
p3085
aS'&form'
p3086
aS'&module'
p3087
aS'&form'
p3088
aS'&form'
p3089
aS'&project'
p3090
asg6
S"\n{P$imgpr-parking.ppm}  {HThe Parking Lot}\n\nHi!\n\nI'm the parking lot, down near the bottom of the &layout editor. If you want\nto move a widget from one &form to another, from one &module to another, or\nif you want to temporarily move a widget off a &form (but you don't want to\nlose the widget) then I'm for you. Just drag your widget and drop it on me.\nTo put the widget back on a &form, just drag it back again. What could be\nsimpler.\n\nWidgets which are on the parking lot are saved when you save your &project\nand will reappear on the parking lot when you reload your project."
p3091
sg8
(lp3092
S'parking lot'
p3093
asg10
(lp3094
sg12
I0
sg13
(lp3095
sg15
(lp3096
S'The Parking Lot'
p3097
assS'wid.tkinter.checkbutton.opt.variable'
p3098
(dp3099
g4
(lp3100
sg6
S'>option.variable.generic "Checkbutton"'
p3101
sg8
(lp3102
sg10
(lp3103
sg12
I0
sg13
(lp3104
sg15
(lp3105
ssS'wid.pmw.combobox.opt.arrowbutton'
p3106
(dp3107
g4
(lp3108
sg6
S'{HComboBox - arrowbutton}\n\nIn a dropdown ComboBox, the button to popup the listbox.'
p3109
sg8
(lp3110
sg10
(lp3111
S'2006/03/18'
p3112
asg12
I0
sg13
(lp3113
sg15
(lp3114
ssS'wid.tkinter.listbox.opt.font'
p3115
(dp3116
g4
(lp3117
sg6
S'>option.font.generic "Listbox"'
p3118
sg8
(lp3119
sg10
(lp3120
sg12
I0
sg13
(lp3121
sg15
(lp3122
ssS'option.resolution.generic'
p3123
(dp3124
g4
(lp3125
S'&new mexico tech'
p3126
asg6
S"{H@0 - resolution}\n\nNormally, the user is only able to change the scale in whole units.\n\nSet this option to some other value to set the smallest increment of the\nscale's value.\n\nFor example, if {Gfrom_} is -1.0 and {gto} is 1.0, and you set {gresolution}\nto 0.5, the @0 will have 5 possible values:\n\nt {f-1.0\nt -0.5\nt  0.0\nt +0.5\nt +1.0}\n\nAll smaller movements will be ignored.\n\n$nmt"
p3127
sg8
(lp3128
sg10
(lp3129
S'2005/03/06'
p3130
asg12
I0
sg13
(lp3131
sg15
(lp3132
ssS'wid.tkinter.toplevel.opt.highlightbackground'
p3133
(dp3134
g4
(lp3135
sg6
S'>option.highlightbackground.generic "Toplevel"'
p3136
sg8
(lp3137
sg10
(lp3138
sg12
I0
sg13
(lp3139
sg15
(lp3140
ssS'code-editor.recolorizing-long'
p3141
(dp3142
g4
(lp3143
sg6
S'{HRecolorizing - the long story}\n\nConsider a 10,000 line file which currently has no triple quotes. You insert\nthis line somewhere near the top:\n\nt {gJ = \'\'\'}\n\nIn theory, the thousands of lines following should now be recolorized as strings\nsince there is an open triple quote and no closing quote. In fact what you are\nprobably doing is keying in a triple quoted string of some modest length and\nReal Soon now you are going to key in the closing triple quote.\n\nn On a theoretical level there is some question as to the usefulness of having\n  the entire rest of the file flash into string colors when in fact you have no\n  intention of making all that stuff into a string.\n\nn There is the practical issue of the time it would take to recolorize the\n  entire file. Colorizing is not fast and roaring ahead chewing up lots of\n  processor cycle to do pointless colorization isn\'t an obvious winner.\n\nSo instead, what the editor does in the face of a new set of triple quotes is to\ncolor the current line, and any subsequent lines you move to, based on the new\nquotes but it doesn\'t start recolorizing the whole file. For most situations\nthis works fine.\n\nThe one time it doesn\'t work fine is if you "comment out" an area of existing\ntext by putting triple quotes at the start and end of the area. If the area is\nof modest size you can recolorize it simply by zipping over it with the cursor\nup or down keys. If the area is large then recolorization is in order. Go to the\ntop of the area and press the {grecolorize} ($tActionRecolorize) key. The reason\nyou move to the top of the area is that the recolorization will start from the\ntop most line visible on the screen and work down. If you start from the bottom\nof the area the colorizer will {ieventually} get it done but it may take some\ntime. Given that you are manually provoking a recolorization you might as well\ndo so from the optimum location.\n\nIf you are inspired to write a Really Fast colorizer, great. It is probably not\npossible to write a Really Fast colorizer in Python. Guido\'s Idle colorizer is\nway faster than ours but:\n\nn He\'s Guido and we\'re not.\n\nn His doesn\'t colorize format phrases and escape characters in strings, and we\n  really like that feature.\n\nn Even his is still too slow to go recolorizing long files in a flash.\n\nOnce you have written your Amazingly Fast and Fully Compatible colorizer, you\ncan get in touch with us at $mailto'
p3144
sg8
(lp3145
sg10
(lp3146
S'2004/04/08'
p3147
asg12
I0
sg13
(lp3148
sg15
(lp3149
S'Recolorizing - the long story'
p3150
assS'wid.pmw.notebook.opt.pagemargin'
p3151
(dp3152
g4
(lp3153
S'&default'
p3154
asg6
S"{HNoteBook - pagemargin}\n\nThe margin (in pixels) around the selected page inside the notebook's page\nborder. The &default is 4."
p3155
sg8
(lp3156
sg10
(lp3157
S'2006/03/21'
p3158
asg12
I0
sg13
(lp3159
sg15
(lp3160
ssS'wid.tkinter.listbox.opt.xscrollcommand'
p3161
(dp3162
g4
(lp3163
sg6
S'>option.xscrollcommand.generic "Listbox"'
p3164
sg8
(lp3165
sg10
(lp3166
sg12
I0
sg13
(lp3167
sg15
(lp3168
ssS'wid.tkinter.frame.opt.name'
p3169
(dp3170
g4
(lp3171
sg6
S'>option.name.generic "Frame"'
p3172
sg8
(lp3173
sg10
(lp3174
sg12
I0
sg13
(lp3175
sg15
(lp3176
ssS'assist.image'
p3177
(dp3178
g4
(lp3179
sg6
S'{HAssist - image}\n\nSince this is a placeholder assist dialog all you can do is enter the name of the image\nto be used with this widget.'
p3180
sg8
(lp3181
sg10
(lp3182
sg12
I0
sg13
(lp3183
sg15
(lp3184
S'The option editor image assist dialog'
p3185
assS'commandassist.handlerinvalidname'
p3186
(dp3187
g4
(lp3188
S'&event'
p3189
aS'&handler'
p3190
aS'&command option'
p3191
asg6
S'{HInvalid name of command-option handler}\n\n\nThe name of the &event &handler for a &command option must conform to the usual\nPython rules for names but the name you supplied violates those rules. Either\ncorrect the name or click {gCancel}.'
p3192
sg8
(lp3193
sg10
(lp3194
S'2006/04/13'
p3195
asg12
I0
sg13
(lp3196
sg15
(lp3197
ssS'wid.tkinter.radiobutton.opt.highlightbackground'
p3198
(dp3199
g4
(lp3200
sg6
S'>option.highlightbackground.generic "Radiobutton"'
p3201
sg8
(lp3202
sg10
(lp3203
sg12
I0
sg13
(lp3204
sg15
(lp3205
ssS'wid.tkinter.radiobutton.opt.image'
p3206
(dp3207
g4
(lp3208
sg6
S'>option.image.generic "Radiobutton"'
p3209
sg8
(lp3210
sg10
(lp3211
sg12
I0
sg13
(lp3212
sg15
(lp3213
ssS'wid.pmw.entryfield.opt.labelpos'
p3214
(dp3215
g4
(lp3216
sg6
S">option.pmw.labelpos.generic 'EntryField'"
p3217
sg8
(lp3218
sg10
(lp3219
sg12
I0
sg13
(lp3220
sg15
(lp3221
ssS'wid.pmw.mainmenubar.opt.hotkeys'
p3222
(dp3223
g4
(lp3224
sg6
S">option.pmw.hotkeys.generic 'MainMenuBar'"
p3225
sg8
(lp3226
sg10
(lp3227
sg12
I0
sg13
(lp3228
sg15
(lp3229
ssS'wid.pmw.entryfield.opt.command'
p3230
(dp3231
g4
(lp3232
S'&command option'
p3233
aS'&event'
p3234
aS'&handler'
p3235
asg6
S'{HEntryField - command}\n\nThis &command option specifies the name of the &event &handler to be called\nwhenever the {gReturn} key is pressed or {ginvoke()} is called.'
p3236
sg8
(lp3237
sg10
(lp3238
S'2006/03/19'
p3239
asg12
I0
sg13
(lp3240
sg15
(lp3241
ssS'wid.tkinter.label.opt.underline'
p3242
(dp3243
g4
(lp3244
sg6
S'>option.underline.generic "Label"'
p3245
sg8
(lp3246
sg10
(lp3247
sg12
I0
sg13
(lp3248
sg15
(lp3249
ssS'wid.pmw.scrolledframe.opt.labelmargin'
p3250
(dp3251
g4
(lp3252
sg6
S">option.pmw.labelmargin.generic 'ScrolledFrame'"
p3253
sg8
(lp3254
sg10
(lp3255
sg12
I0
sg13
(lp3256
sg15
(lp3257
ssS'wid.pmw.scrolledlistbox.opt.hscrollmode'
p3258
(dp3259
g4
(lp3260
sg6
S">option.pmw.hscrollmode.generic 'ScrolledListBox'"
p3261
sg8
(lp3262
sg10
(lp3263
sg12
I0
sg13
(lp3264
sg15
(lp3265
ssS'bindassist.name-suggestion'
p3266
(dp3267
g4
(lp3268
S'&event'
p3269
aS'&handler'
p3270
aS'&event'
p3271
aS'&handler'
p3272
aS'&event'
p3273
aS'&handler'
p3274
aS'&event'
p3275
aS'&handler'
p3276
aS'&handler'
p3277
aS'&handler'
p3278
aS'&handler'
p3279
aS'&handler'
p3280
aS'&handler'
p3281
aS'&handler'
p3282
aS'&handler'
p3283
aS'&handler'
p3284
aS'&handler'
p3285
asg6
S"{hWhy we recommend handler names of the form on_widgetname_whatever}\n\nActually we recommend &event &handler names of the format\n{gon_widgetname_whatever} only if the &event &handler is solely for use by a\nsingle widget. This is generally the case, but if you plan to use one &event\n&handler for many widgets then by all means name it anything you want.\n\nAssuming the &event &handler is for use only by a single widget then the\nadvantages of the suggested format are:\n\n o Since the name of the widget is part of the &handler name and since $$\n   keeps &handlers in alphabetical order by &handler name, then all the\n   &handlers for a given widget will stay together.\n\n o Having the widget name as part of the &handler name makes it easy to know,\n   as you review the code, which &handlers belong to which widgets. If a\n   widget named {GFox} has a &handler named {GBanana} then the connection is\n   somewhat less than obvious.\n\n o If you rename a widget and it's &handlers are of the recommended form then\n   $$ will notice this and give you the option to automatically rename all\n   the &handlers at the same time. This can be very convenient."
p3286
sg8
(lp3287
S'recommend'
p3288
asg10
(lp3289
S'2005/03/15'
p3290
asg12
I0
sg13
(lp3291
sg15
(lp3292
S'Why we recommend handler names of the form on_widgetname_whatever'
p3293
assS'pack.option.ipady'
p3294
(dp3295
g4
(lp3296
S'&dimension'
p3297
asg6
S'{HPack Option - ipady}\n\nA &dimensioned number specifying the amount of padding to add inside the\nwidget on the top and bottom.'
p3298
sg8
(lp3299
sg10
(lp3300
S'2005/05/19'
p3301
asg12
I0
sg13
(lp3302
sg15
(lp3303
ssS'pack.option.ipadx'
p3304
(dp3305
g4
(lp3306
S'&dimension'
p3307
asg6
S'{HPack Option - ipadx}\n\nA &dimensioned number specifying the amount of padding to add inside the\nwidget on the left and right.'
p3308
sg8
(lp3309
sg10
(lp3310
S'2005/05/19'
p3311
asg12
I0
sg13
(lp3312
sg15
(lp3313
ssS'wid.tkinter.entry.opt.exportselection'
p3314
(dp3315
g4
(lp3316
sg6
S'>option.exportselection.generic "Entry"'
p3317
sg8
(lp3318
sg10
(lp3319
sg12
I0
sg13
(lp3320
sg15
(lp3321
ssS'wid.pmw.labeledwidget.opt.labelmargin'
p3322
(dp3323
g4
(lp3324
sg6
S">option.pmw.labelmargin.generic 'LabeledWidget'"
p3325
sg8
(lp3326
sg10
(lp3327
sg12
I0
sg13
(lp3328
sg15
(lp3329
ssS'buffet.widget.radioselect'
p3330
(dp3331
g4
(lp3332
sg6
S'>buffet.widget.generic2 "Pmw.RadioSelect", \'\', \'wid.pmw.radioselect.overview\''
p3333
sg8
(lp3334
sg10
(lp3335
sg12
I0
sg13
(lp3336
sg15
(lp3337
ssS'wid.tkinter.scale.opt.orient'
p3338
(dp3339
g4
(lp3340
sg6
S'>option.orient.generic "Scale"'
p3341
sg8
(lp3342
sg10
(lp3343
sg12
I0
sg13
(lp3344
sg15
(lp3345
ssS'buffet.widget.entry'
p3346
(dp3347
g4
(lp3348
sg6
S'>buffet.widget.generic "Entry", "n"'
p3349
sg8
(lp3350
sg10
(lp3351
sg12
I0
sg13
(lp3352
sg15
(lp3353
ssS'wid.tkinter.checkbutton.opt.font'
p3354
(dp3355
g4
(lp3356
sg6
S'>option.font.generic "Checkbutton"'
p3357
sg8
(lp3358
sg10
(lp3359
sg12
I0
sg13
(lp3360
sg15
(lp3361
ssS'wid.tkinter.button.opt.activeforeground'
p3362
(dp3363
g4
(lp3364
sg6
S'>option.activeforeground.generic "Button"'
p3365
sg8
(lp3366
sg10
(lp3367
sg12
I0
sg13
(lp3368
sg15
(lp3369
ssS'layout-widget-move'
p3370
(dp3371
g4
(lp3372
S'&layout area'
p3373
aS'&parking lot'
p3374
asg6
S"{HMoving Widgets around}\n\nTo move a widget around within the &layout area, simply click anwhere within\nthe widget and drag it to it's new location.\n\nIf you don't want the widget on the form right now, but you don't want to\nlose this particular widget either (perhaps you have set it's options in a\nparticular way) then drag it to the &parking lot just below the layout area."
p3375
sg8
(lp3376
sg10
(lp3377
S'2005/03/05'
p3378
asg12
I0
sg13
(lp3379
sg15
(lp3380
S'How to: Move widgets in your form'
p3381
assS'howto.select.editor.schema'
p3382
(dp3383
g4
(lp3384
sg6
S'{HHow to: Select the editor scheme to use}\n\nAn editor scheme defines which key does what when editing text etc. and\nspecifies the colors for the various Python syntactic elements in colorized\ntext.\n\nThe configuration file $configfile can contain any number of different editor\nschemes. As this help message was written there were two editor schemes\ndefined:\n\n o {GIdle}\n    Attemts to mimic the color and key-bindings of Idle.\n\n o {gMidnightCommander}\n    Attempts to mimic the color and keybindings of the Midnight Commander\n   editor.\n\nt In both of these the colors match pretty closely and the key bindings don\'t\n  because some editing features provided by Rapyd don\'t exist in the other\n  editors and vice versa. Where the features match, idential bindings have\n  been assigned and where the features don\'t match binding have been assigned\n  that seemed reasonable at the time.\n\nA line in the config file says what scheme to use. To set this yourself, open\n$configfile with your favorite text editor, search for the line which\ncontains "{gDefaultEditorScheme =}", then change the part after the equal\nsign to say {gMidnightCommander}, {gIdle} or whatever other editor scheme you\nmay have defined.\n\nTo define your own scheme look at the existing ones and read the\ndocumentation contained in the configuration file itself.'
p3385
sg8
(lp3386
sg10
(lp3387
S'2006/02/10'
p3388
asg12
I0
sg13
(lp3389
sg15
(lp3390
S'How to: Select the editor scheme to use'
p3391
assS'wid.tkinter.menubutton.opt.highlightbackground'
p3392
(dp3393
g4
(lp3394
sg6
S'>option.highlightbackground.generic "Menubutton"'
p3395
sg8
(lp3396
sg10
(lp3397
sg12
I0
sg13
(lp3398
sg15
(lp3399
ssS'wid.tkinter.text.opt.highlightbackground'
p3400
(dp3401
g4
(lp3402
sg6
S'>option.highlightbackground.generic "Text"'
p3403
sg8
(lp3404
sg10
(lp3405
sg12
I0
sg13
(lp3406
sg15
(lp3407
ssS'wid.tkinter.label.opt.pady'
p3408
(dp3409
g4
(lp3410
sg6
S'>option.pady.generic "Label", "text"'
p3411
sg8
(lp3412
sg10
(lp3413
sg12
I0
sg13
(lp3414
sg15
(lp3415
ssS'wid.tkinter.label.opt.padx'
p3416
(dp3417
g4
(lp3418
sg6
S'>option.padx.generic "Label", "text"'
p3419
sg8
(lp3420
sg10
(lp3421
sg12
I0
sg13
(lp3422
sg15
(lp3423
ssS'wid.pmw.messagebar.opt.name'
p3424
(dp3425
g4
(lp3426
sg6
S">option.name.generic 'MessageBar'"
p3427
sg8
(lp3428
sg10
(lp3429
sg12
I0
sg13
(lp3430
sg15
(lp3431
ssS'wid.pmw.entryfield.opt.value'
p3432
(dp3433
g4
(lp3434
S'&default'
p3435
asg6
S"{HEntryField - value}\n\nSpecifies the initial contents of the entry. If this\ntext is invalid, it will be displayed with the errorbackground color and the\ninvalidcommand function will be called. If both value and entry_textvariable\noptions are specified in the constructor, value will take precedence. The\n&default is ''."
p3436
sg8
(lp3437
sg10
(lp3438
S'2006/03/19'
p3439
asg12
I0
sg13
(lp3440
sg15
(lp3441
ssS'wid.pmw.scrolledframe.opt.vertscrollbar'
p3442
(dp3443
g4
(lp3444
sg6
S'{HScrolledFrame - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p3445
sg8
(lp3446
sg10
(lp3447
S'2006/03/23'
p3448
asg12
I0
sg13
(lp3449
sg15
(lp3450
ssS'wid.tkinter.checkbutton.opt.selectimage'
p3451
(dp3452
g4
(lp3453
sg6
S'>option.selectimage.generic "Checkbutton"'
p3454
sg8
(lp3455
sg10
(lp3456
sg12
I0
sg13
(lp3457
sg15
(lp3458
ssS'wid.tkinter.menubutton.opt.bitmap'
p3459
(dp3460
g4
(lp3461
sg6
S'>option.bitmap.generic "Menubutton"'
p3462
sg8
(lp3463
sg10
(lp3464
sg12
I0
sg13
(lp3465
sg15
(lp3466
ssS'wid.tkinter.button.opt.pyclass'
p3467
(dp3468
g4
(lp3469
sg6
S'>option.pyclass.generic "Button"'
p3470
sg8
(lp3471
sg10
(lp3472
sg12
I0
sg13
(lp3473
sg15
(lp3474
ssS'code-edit.action.cut'
p3475
(dp3476
g4
(lp3477
S'=code-edit.action.cutappend'
p3478
aS'&editor actions'
p3479
asg6
S'{HCode editor - Cut}\n\n Key:   $tActionCut\n Menu: {fEdit/Cut}\n\nThe clipboard is cleared, the currently selected text is copied to the\nclipboard, then the currently selected text is deleted.\n\nNote that {LCutAppend=code-edit.action.cutappend} performs a similar function\nbut without clearing the clipboard.\n\nCode &editor actions'
p3480
sg8
(lp3481
sg10
(lp3482
S'2005/04/07'
p3483
asg12
I0
sg13
(lp3484
sg15
(lp3485
S'Code editor - Cut'
p3486
assS'buffet.widget.combobox'
p3487
(dp3488
g4
(lp3489
sg6
S'>buffet.widget.generic2 "Pmw.ComboBox", \'\', \'wid.pmw.combobox.overview\''
p3490
sg8
(lp3491
sg10
(lp3492
sg12
I0
sg13
(lp3493
sg15
(lp3494
ssS'wid.tkinter.scrollbar.opt.command'
p3495
(dp3496
g4
(lp3497
sg6
S'>option.command.generic "Scrollbar","the scrollbar is moved."'
p3498
sg8
(lp3499
sg10
(lp3500
sg12
I0
sg13
(lp3501
sg15
(lp3502
ssS'wid.tkinter.radiobutton.opt.command'
p3503
(dp3504
g4
(lp3505
sg6
S'>option.command.generic "Radiobutton","the state of the Radiobutton changes."'
p3506
sg8
(lp3507
sg10
(lp3508
sg12
I0
sg13
(lp3509
sg15
(lp3510
ssS'whatis.frame'
p3511
(dp3512
g4
(lp3513
S'&form'
p3514
aS'&layout editor'
p3515
asg6
S'{HWhat is: A frame}\n\nA frame is a rectangular area with a &form which can contain widgets or\nsub-frames. Use the &layout editor to create, maintain and delete frames.'
p3516
sg8
(lp3517
S'frame'
p3518
asg10
(lp3519
S'2003/03/13'
p3520
asg12
I0
sg13
(lp3521
sg15
(lp3522
S'What is: A frame'
p3523
assS'formimportnameselect'
p3524
(dp3525
S'Links'
p3526
(lp3527
sS'Text'
p3528
S'{HSetting the name at form-import time}\n\nYou just asked to import a form. Regardless of what the form was named when it was saved, you\ncan name it whatever you want as long as:\n\n o The name is a valid Python name, and\n o No other form in this module has the same name.\n\nYou are prompted with the name that was in use when the form was saved. If you are happy\nwith that name then go ahead and click {gOK}. Otherwise, now is you opportunity to revise the\nname.'
p3529
sS'Hotlinks'
p3530
(lp3531
sS'Comments'
p3532
(lp3533
S'2008-09-24'
p3534
asS'Wip'
p3535
I1
sS'Plurals'
p3536
(lp3537
sS'Abstracts'
p3538
(lp3539
ssS'wid.tkinter.toplevel.opt.relief'
p3540
(dp3541
g4
(lp3542
sg6
S'>option.relief.generic "Toplevel"'
p3543
sg8
(lp3544
sg10
(lp3545
sg12
I0
sg13
(lp3546
sg15
(lp3547
ssS'wid.tkinter.entry.opt.foreground'
p3548
(dp3549
g4
(lp3550
sg6
S'>option.foreground.generic "Entry"'
p3551
sg8
(lp3552
sg10
(lp3553
sg12
I0
sg13
(lp3554
sg15
(lp3555
ssS'wid.tkinter.radiobutton.opt.height'
p3556
(dp3557
g4
(lp3558
sg6
S'>option.height.generic "Radiobutton"'
p3559
sg8
(lp3560
sg10
(lp3561
sg12
I0
sg13
(lp3562
sg15
(lp3563
ssS'option.tickinterval.generic'
p3564
(dp3565
g4
(lp3566
S'&new mexico tech'
p3567
asg6
S'{H@0 - tickinterval}\n\nNormally, no "ticks" are displayed along the @0.\n\nTo display periodic @0 values, set this option to a number, and ticks will be\ndisplayed on multiples of that value. For example, if {gfrom_=0.0, to=1.0},\nand {gtickinterval=0.25}, labels will be displayed along the @0 at values\n0.0, 0.25, 0.50, 0.75, and 1.00.\n\nThese labels appear below the scale if horizontal, to its left if vertical.\n\nDefault is 0, which suppresses display of ticks.\n\n$nmt'
p3568
sg8
(lp3569
sg10
(lp3570
S'2005/04/05'
p3571
asg12
I0
sg13
(lp3572
sg15
(lp3573
ssS'option.spacing2.generic'
p3574
(dp3575
g4
(lp3576
S'&new mexico tech'
p3577
asg6
S'{H@0 - spacing2}\n\nThis option specifies how much extra vertical space to add between displayed\nlines of text when a logical line wraps.\n\n$nmt'
p3578
sg8
(lp3579
sg10
(lp3580
S'2005/04/04'
p3581
asg12
I0
sg13
(lp3582
sg15
(lp3583
ssS'wid.tkinter.menu.opt.title'
p3584
(dp3585
g4
(lp3586
sg6
S'>option.title.generic "Menu"'
p3587
sg8
(lp3588
sg10
(lp3589
sg12
I0
sg13
(lp3590
sg15
(lp3591
ssS'bind.eventwizard.overview'
p3592
(dp3593
g4
(lp3594
S'&event'
p3595
aS'&binding'
p3596
aS'&event'
p3597
aS'&event'
p3598
asg6
S'{HThe bind Event Wizard}\n\nThe &Event Wizard walks you through the process of creating a valid &event string\nfor use as part of a &binding.\n\nWhile you can key in an &event string manually, using the Wizard is faster, less\nerror prone and guarantees that you will end up with a valid &event string. No\nmore missing angle brackets or mis-spelled modifiers.'
p3599
sg8
(lp3600
S'bind wizard'
p3601
asg10
(lp3602
S'2005/03/13'
p3603
asg12
I0
sg13
(lp3604
sg15
(lp3605
S'The bind event wizard'
p3606
assS'wid.pmw.scrolledlistbox.opt.name'
p3607
(dp3608
g4
(lp3609
sg6
S">option.name.generic 'ScrolledListBox'"
p3610
sg8
(lp3611
sg10
(lp3612
sg12
I0
sg13
(lp3613
sg15
(lp3614
ssS'wid.pmw.timecounter.opt.downminutearrow'
p3615
(dp3616
g4
(lp3617
sg6
S">wid.pmw.timecounter.arrow 'down','dec','minute'"
p3618
sg8
(lp3619
sg10
(lp3620
sg12
I0
sg13
(lp3621
sg15
(lp3622
ssS'wid.tkinter.scale.opt.command'
p3623
(dp3624
g4
(lp3625
sg6
S'>option.command.generic "Scale","the slider is moved."'
p3626
sg8
(lp3627
sg10
(lp3628
sg12
I0
sg13
(lp3629
sg15
(lp3630
ssS'wid.mainmenubar.treatise'
p3631
(dp3632
g4
(lp3633
S'&form'
p3634
aS'=form.main.info'
p3635
asg6
S"{HA brief treatise on Pmw.MainMenuBars}\n\n{fPmw.MainMenuBars} are a bit of an odd duck. They work only in\nconjunction with a {fToplevel} type form. In the context of $$ that means\neither the main-form of the main-module or a &form which derives from\n{fTkinter.Toplevel}.\n\nUnlike most widgets, {fMainMenuBars} don't get packed.\n\nIf you create a {fMainMenuBar} inside the main-form of the main-module\n(which is itself {Lsomewhat special=form.main.info}) then it's master is\n{fRoot} while when created inside a {fToplevel} form it's master is\n{fself}.\n\nBy way of example here is a minimal example of a {fMainMenuBar} used\ninside the main-form of the main-module. Note that in this case the master\nis {fRoot} because, being in the main-form of the main-module, this\nMainMenuBar applies to the root window of the application which was\ncreated by Tkinter and we named {fRoot}. If you are wondering where\n{fRoot} came from, take a look in the -Main- code are of the main module\nof any project.\n\n{P$imgpr-help-MainMenuBarFrame.ppm}\n\nwhile here is an example of a {fMainMenuBar} inside a {fToplevel} form. In\nthis case the master is {fself} because the {fMainMenuBar} pertains to the\nclass being defined, not to the root window.\n\n{P$imgpr-help-MainMenuBarTop.ppm}\n\nIn both cases while the MainMenuBar is created automatically by $$ it is\nstill up to you to create the code which populates it."
p3636
sg8
(lp3637
sg10
(lp3638
S'2006/03/27'
p3639
asg12
I0
sg13
(lp3640
sg15
(lp3641
S'A brief treatise on Pmw.MainMenuBars'
p3642
assS'wid.pmw.optionmenu.opt.hull'
p3643
(dp3644
g4
(lp3645
sg6
S">option.pmw.hull.generic 'OptionMenu'"
p3646
sg8
(lp3647
sg10
(lp3648
sg12
I0
sg13
(lp3649
sg15
(lp3650
ssS'command.option.on.parkinglot'
p3651
(dp3652
g4
(lp3653
S'&command option'
p3654
aS'&a widget'
p3655
aS'&event'
p3656
aS'&handler'
p3657
aS'&form'
p3658
aS'&a widget'
p3659
aS'&form'
p3660
aS'&command option'
p3661
aS'&parking lot'
p3662
aS'&form'
p3663
aS'&a widget'
p3664
aS'&parking lot'
p3665
aS'&command option'
p3666
aS'&form'
p3667
aS'&command option'
p3668
aS'&handler'
p3669
aS'&command option'
p3670
asg6
S"{HCommand options while on parking lot}\n\nA &command option is a connection between &a widget related &event and an\nevent &handler method of a &form. You need both &a widget and a &form in\norder to create or modify a &command option.\n\nThe current widget is presently on the &parking lot and thus is not part of\nany &form. When &a widget is moved to the &parking lot any &command options\nit had are retained, in escrow so to speak, and when that widget is moved\nback onto a &form it will attempt to reconnect it's &command options to event\n&handlers of the corresponding name. However, you can't alter &command\noptions as long as the widget is on the parking lot."
p3671
sg8
(lp3672
sg10
(lp3673
S'2005/05/13'
p3674
asg12
I0
sg13
(lp3675
sg15
(lp3676
S"You can't change command options for a widget which is on the parking lot"
p3677
assS'wid.tkinter.text.opt.spacing1'
p3678
(dp3679
g4
(lp3680
sg6
S'>option.spacing1.generic "Text"'
p3681
sg8
(lp3682
sg10
(lp3683
sg12
I0
sg13
(lp3684
sg15
(lp3685
ssS'option.pmw.selectioncommand.generic'
p3686
(dp3687
g4
(lp3688
S'&event'
p3689
aS'&handler'
p3690
asg6
S'{H@0 - selectioncommand}\n\nThe &event &handler to call when an item is selected. If this handler takes a\nlong time to run, and you want the display to be updated, call\n{fupdate_idletasks()} at the beginning of the handler.'
p3691
sg8
(lp3692
sg10
(lp3693
S'2006/03/18'
p3694
asg12
I0
sg13
(lp3695
sg15
(lp3696
ssS'wid.tkinter.button.opt.foreground'
p3697
(dp3698
g4
(lp3699
sg6
S'>option.foreground.generic "Button"'
p3700
sg8
(lp3701
sg10
(lp3702
sg12
I0
sg13
(lp3703
sg15
(lp3704
ssS'wid.pmw.timecounter.opt.labelmargin'
p3705
(dp3706
g4
(lp3707
sg6
S">option.pmw.labelmargin.generic 'TimeCounter'"
p3708
sg8
(lp3709
sg10
(lp3710
sg12
I0
sg13
(lp3711
sg15
(lp3712
ssS'wid.tkinter.radiobutton.opt.variable'
p3713
(dp3714
g4
(lp3715
S'&control variable'
p3716
asg6
S'{HRadiobutton - variable}\n\nThe &control variable that this radiobutton shares with the other\nradiobuttons in the group.\n\nThis can be either an IntVar or a StringVar.'
p3717
sg8
(lp3718
sg10
(lp3719
S'2005/04/27'
p3720
asg12
I0
sg13
(lp3721
sg15
(lp3722
ssS'wid.tkinter.checkbutton.opt.background'
p3723
(dp3724
g4
(lp3725
sg6
S'>option.background.generic "Checkbutton"'
p3726
sg8
(lp3727
sg10
(lp3728
sg12
I0
sg13
(lp3729
sg15
(lp3730
ssS'assist.dim'
p3731
(dp3732
g4
(lp3733
sg6
S'Since dimensioned numbers are so simple there, at present, no assist provided form them so\nusers should never see this message.'
p3734
sg8
(lp3735
sg10
(lp3736
S'2006/02/08'
p3737
asg12
I0
sg13
(lp3738
sg15
(lp3739
ssS'wid.tkinter.label.opt.relief'
p3740
(dp3741
g4
(lp3742
sg6
S'>option.relief.generic "Label"'
p3743
sg8
(lp3744
sg10
(lp3745
sg12
I0
sg13
(lp3746
sg15
(lp3747
ssS'wid.tkinter.canvas.opt.selectforeground'
p3748
(dp3749
g4
(lp3750
sg6
S'>option.selectforeground.generic "Canvas", "items"'
p3751
sg8
(lp3752
sg10
(lp3753
sg12
I0
sg13
(lp3754
sg15
(lp3755
ssS'optionedit.invalidvalue'
p3756
(dp3757
g4
(lp3758
sg6
S"{HOption Edit - Invalid Value}\n\nHi, I'm the option editor for widget @2 and I notice that you just put in a\nrequest to @0. Howerver right now the value in option @1 is invalid. Please\ncorrect the invalid value, then you can @0.\n\nTo get help about the @1 option in particular option, close this help message\nthen click the $hb over the label, inside the black rectangle, that says\n{g@1}."
p3759
sg8
(lp3760
sg10
(lp3761
S'<2005/04/07'
p3762
aS'@0 The action requested'
p3763
aS'@1 The name of the invalid option'
p3764
aS'@2 The name of the widget'
p3765
asg12
I0
sg13
(lp3766
sg15
(lp3767
ssS'bind.on.parkinglot2'
p3768
(dp3769
g4
(lp3770
S'&binding'
p3771
aS'&a widget'
p3772
aS'&event'
p3773
aS'&handler'
p3774
aS'&form'
p3775
aS'&a widget'
p3776
aS'&form'
p3777
aS'&binding'
p3778
aS'&parking lot'
p3779
aS'&form'
p3780
aS'&a widget'
p3781
aS'&parking lot'
p3782
aS'&binding'
p3783
aS'&form'
p3784
aS'&binding'
p3785
aS'&handler'
p3786
asg6
S"{HEvent bindings while on parking lot}\n\nA &binding is a connection between &a widget related &event and an event\n&handler method of a &form. You need both &a widget and a &form in order to\ncreate or modify a &binding.\n\nWhen a widget is on the &parking lot it is not part of any &form. When &a\nwidget is moved to the &parking lot any &bindings it had are retained, in\nescrow so to speak, and when that widget is moved back onto a &form it will\nattempt to reconnect it's &bindings to event &handlers of the corresponding\nname. However, you can't alter it's bindings as long as the widget is on the\nparking lot."
p3787
sg8
(lp3788
sg10
(lp3789
S'2005/05/13'
p3790
asg12
I0
sg13
(lp3791
sg15
(lp3792
S"You can't create or change event bindings for a widget which is on the parking lot"
p3793
assS'option.indicatoron.generic'
p3794
(dp3795
g4
(lp3796
S'&new mexico tech'
p3797
asg6
S'{H@0 - indicatoron}\n\nNormally a @0 displays as its indicator a box that shows whether the @0 is\nset or not. You can get this behavior by setting this option to {gtrue}.\nHowever, if you set {findicatoron} to {gfalse}, the indicator disappears, and\nthe entire widget becomes a push-push button that looks raised when it is\ncleared and sunken when it is set. You may want to increase the borderwidth \nvalue to make it easier to see the state of such a control.\n\n$nmt'
p3798
sg8
(lp3799
sg10
(lp3800
S'2005/03/02'
p3801
asg12
I0
sg13
(lp3802
sg15
(lp3803
ssS'wid.tkinter.label.opt.bitmap'
p3804
(dp3805
g4
(lp3806
S'&bitmap'
p3807
aS'&image'
p3808
asg6
S">option.bitmap.generic 'Label'"
p3809
sg8
(lp3810
sg10
(lp3811
sg12
I0
sg13
(lp3812
sg15
(lp3813
ssS'wid.tkinter.menu.opt.font'
p3814
(dp3815
g4
(lp3816
sg6
S'>option.font.generic "Menu"'
p3817
sg8
(lp3818
sg10
(lp3819
sg12
I0
sg13
(lp3820
sg15
(lp3821
ssS'wid.tkinter.text.opt.xscrollcommand'
p3822
(dp3823
g4
(lp3824
sg6
S'>option.xscrollcommand.generic "Text"'
p3825
sg8
(lp3826
sg10
(lp3827
sg12
I0
sg13
(lp3828
sg15
(lp3829
ssS'form.main.info'
p3830
(dp3831
g4
(lp3832
S'&form'
p3833
aS'&module'
p3834
aS'=form.main.arcane'
p3835
aS'&project'
p3836
aS'&module'
p3837
aS'&form'
p3838
aS'&module'
p3839
aS'&form'
p3840
aS'&module'
p3841
aS'&form'
p3842
aS'&module'
p3843
aS'&frame'
p3844
aS'&form'
p3845
aS'&module'
p3846
aS'&project'
p3847
asg6
S"{HThe main form of the main module}\n\nThe main &form of the main &module is special. The reasons why are pretty {larcane=form.main.arcane} but here's the\nexecutive summary about the specialness:\n\no The name of the &project == the name of the main &module == the name of the main &form of the main &module. To\n  change one is to change them all.\n\no You are not allowed to delete the main &form of the main &module.\n\no The main &form of the main &module has to be a &frame. Thus, it must derive from {gTkinter.Frame}, from\n  {gPmw.ScrolledFrame} or from something which provides equivalent functionality.\n\no Code which creates an instance of the main &form of the main &module is generated automatically by $$. This\n  instance is packed into the Toplevel which is provided by Tk as the main window of the &project.\n\no $$ is currently unable to export the main form of the main module because the code to implement that has not been\n  written yet."
p3848
sg8
(lp3849
sg10
(lp3850
S'2006/03/26'
p3851
asg12
I0
sg13
(lp3852
sg15
(lp3853
S'The main form of the main module is special'
p3854
assS'wid.pmw.timecounter.opt.pady'
p3855
(dp3856
g4
(lp3857
S'&default'
p3858
asg6
S'{HTimeCounter - pady}\n\nSpecifies how much higher to make each row of arrow buttons than the default\nhight. The arrow buttons are centered in the available space. The &default is\n0.'
p3859
sg8
(lp3860
sg10
(lp3861
S'2006/03/24'
p3862
asg12
I0
sg13
(lp3863
sg15
(lp3864
ssS'wid.pmw.timecounter.opt.padx'
p3865
(dp3866
g4
(lp3867
S'&default'
p3868
asg6
S'{HTimeCounter - padx}\n\nSpecifies how much wider to make each column than the default width (where a\ncolumn consists of two arrows and an entry field). The entry fields expand to\nfill the extra space, but the arrow buttons are centered in the available\nspace. The &default is 0.'
p3869
sg8
(lp3870
sg10
(lp3871
S'2006/03/24'
p3872
asg12
I0
sg13
(lp3873
sg15
(lp3874
ssS'option.selectforeground.generic'
p3875
(dp3876
g4
(lp3877
S'&new mexico tech'
p3878
asg6
S'{H@0 - selectforeground}\n\nThe foreground color to use when this @0 is displaying @1.\n\n$nmt'
p3879
sg8
(lp3880
sg10
(lp3881
S'2005/03/06'
p3882
asg12
I0
sg13
(lp3883
sg15
(lp3884
ssS'wid.pmw.entryfield.opt.hull'
p3885
(dp3886
g4
(lp3887
sg6
S">option.pmw.hull.generic 'EntryField'"
p3888
sg8
(lp3889
sg10
(lp3890
sg12
I0
sg13
(lp3891
sg15
(lp3892
ssS'option.repeatdelay.generic'
p3893
(dp3894
g4
(lp3895
S'&new mexico tech'
p3896
asg6
S'{H@0 - repeatdelay}\n\nThis option controls how long {fbutton-1} has to be held down in the trough\nbefore the slider starts moving in that direction repeatedly.\n\nThe unit is milliseconds and the default is 300 mS.\n\n$nmt'
p3897
sg8
(lp3898
sg10
(lp3899
S'2005/03/06'
p3900
asg12
I0
sg13
(lp3901
sg15
(lp3902
ssS'code-edit.selectall'
p3903
(dp3904
g4
(lp3905
S'&editor actions'
p3906
asg6
S'{HCode editor - Select all}\n\n Key:   $tActionSelectAll\n Menu: {fEdit/Select all}\n\nSelects all the text.\n\nCode &editor actions.'
p3907
sg8
(lp3908
sg10
(lp3909
S'2005/04/07'
p3910
asg12
I0
sg13
(lp3911
sg15
(lp3912
S'Code editor - select all'
p3913
assS'wid.pmw.buttonbox.opt.labelmargin'
p3914
(dp3915
g4
(lp3916
sg6
S'>option.pmw.labelmargin.generic "ButtonBox"'
p3917
sg8
(lp3918
sg10
(lp3919
sg12
I0
sg13
(lp3920
sg15
(lp3921
ssS'option-dimension'
p3922
(dp3923
g4
(lp3924
sg6
S'{HDimensioned numbers}\n\nPretty much any time you supply a number saying how big a widget or part of a\nwidget is to be, you can use a dimensioned number.\n\nIf you supply just a number then it is taken to be in pixels. You can specify\nspecific units by supplying a string consisting of a number followed by:\n\nt {Gc}   for centimeters\nt {Gi}   for inches\nt {Gm}   for millimeters\nt {Gp}   for printer\'s points (1/72")\n\nSome examples of dimensioned numbers:\n\nt {g12\'    - twelve pixels}\nt {g\'0.1c\' - 1/10 of a centimeter}\nt {g\'.05i\' - 1/20 of an inch}\nt {g\'4m\'   - 4 millimeters}\nt {g\'3p\'   - 3 points}\n\n{BNote:} There are some instances where you supply a size in {Icharacters}\n(eg the width option of a Button which is displaying text) and in those cases\nyou can only use plain number, not a dimensioned number.'
p3925
sg8
(lp3926
S'dimension'
p3927
asg10
(lp3928
S'2005/02/27'
p3929
asg12
I0
sg13
(lp3930
sg15
(lp3931
S'Dimensioned numbers'
p3932
assS'module.select.dialog'
p3933
(dp3934
g4
(lp3935
S'&module'
p3936
aS'&module'
p3937
aS'&project'
p3938
asg6
S'{HModule selection dialog}\n\nThis dialog is where you select which &module you want to work on now. It\npresents you with a list of all the &modules in your &project. Select the one\nyou want and press OK.\n\nAs long as were talking module selection, note that:\n\n o You can use the {g$tActionModuleAlternate} key to alternate between two\n   modules.\n o You can use the {g$tActionModuleNext} key to step through all\n   modules of the project in alphabetical order.'
p3939
sg8
(lp3940
sg10
(lp3941
S'2005/05/25'
p3942
asg12
I0
sg13
(lp3943
sg15
(lp3944
ssS'option.troughcolor.generic'
p3945
(dp3946
g4
(lp3947
S'&color'
p3948
asg6
S'{H@0 - troughcolor}\n\nThe &color of the trough.'
p3949
sg8
(lp3950
sg10
(lp3951
S'2005/04/05'
p3952
asg12
I0
sg13
(lp3953
sg15
(lp3954
ssS'wid.tkinter.menubutton.opt.indicatoron'
p3955
(dp3956
g4
(lp3957
sg6
S'{HMenubutton - indicatoron}\n\nIf True then a small indicator rectangle will be displayed on the right side\nof the menubutton and the default menu bindings will treat this as an option\nmenubutton. If False then no indicator will be displayed.'
p3958
sg8
(lp3959
sg10
(lp3960
S'2005/04/19'
p3961
asg12
I0
sg13
(lp3962
sg15
(lp3963
ssS'wid.tkinter.canvas.opt.pyclass'
p3964
(dp3965
g4
(lp3966
sg6
S'>option.pyclass.generic "Canvas"'
p3967
sg8
(lp3968
sg10
(lp3969
sg12
I0
sg13
(lp3970
sg15
(lp3971
ssS'wid.tkinter.entry.opt.highlightbackground'
p3972
(dp3973
g4
(lp3974
sg6
S'>option.highlightbackground.generic "Entry"'
p3975
sg8
(lp3976
sg10
(lp3977
sg12
I0
sg13
(lp3978
sg15
(lp3979
ssS'_temp2'
p3980
(dp3981
g4
(lp3982
sg6
S'Baffy\n\n{fFixed pitch}\n\n{gFixed pitch bold}\n\n\nAnd stuff'
p3983
sg8
(lp3984
sg10
(lp3985
sg12
I0
sg13
(lp3986
sg15
(lp3987
ssS'wid.tkinter.scrollbar.opt.highlightthickness'
p3988
(dp3989
g4
(lp3990
sg6
S'>option.highlightthickness.generic "Scrollbar"'
p3991
sg8
(lp3992
sg10
(lp3993
sg12
I0
sg13
(lp3994
sg15
(lp3995
ssS'wid.pmw.scrolledtext.opt.hull'
p3996
(dp3997
g4
(lp3998
sg6
S">option.pmw.hull.generic 'ScrolledText'"
p3999
sg8
(lp4000
sg10
(lp4001
sg12
I0
sg13
(lp4002
sg15
(lp4003
ssS'option.value.generic'
p4004
(dp4005
g4
(lp4006
S'&control variable'
p4007
aS'&new mexico tech'
p4008
asg6
S'{H@0 - value}\n\nWhen a @0 is turned on by the user, its &control variable is set to its\ncurrent {gvalue} option.\n\nIf the control variable is an {gIntVar}, give each @0 in the group a\ndifferent integer value option. If the control variable is a {gStringVar},\ngive each @0 a different string value option.\n\n$nmt'
p4009
sg8
(lp4010
sg10
(lp4011
S'2005/04/05'
p4012
asg12
I0
sg13
(lp4013
sg15
(lp4014
ssS'wid.tkinter.scale.opt.from_'
p4015
(dp4016
g4
(lp4017
sg6
S'>option.from_.generic "Scale"'
p4018
sg8
(lp4019
sg10
(lp4020
sg12
I0
sg13
(lp4021
sg15
(lp4022
ssS'wid.pmw.notebook.overview'
p4023
(dp4024
g4
(lp4025
sg6
S'{HWhat is: A NoteBook widget}\n\nA notebook contains a set of tabbed pages. At any one time only one of these\npages (the selected page) is visible, with the other pages being hidden\n"beneath" it. Another page in the notebook may be displayed by clicking on\nthe tab attached to the page. The tabs are displayed along the top edge.\n\nOptionally, the notebook may be displayed without tabs. In this case, another\nselection widget, such as Pmw.OptionMenu, may be used to select the pages.\n\nThis megawidget is derived from Pmw.MegaArchetype (not Pmw.MegaWidget like\nmost other megawidgets), with the hull class being Tkinter.Canvas.'
p4026
sg8
(lp4027
sg10
(lp4028
S'2006/03/21'
p4029
asg12
I0
sg13
(lp4030
sg15
(lp4031
S'What is: A NoteBook widget'
p4032
assS'option.borderwidth.generic'
p4033
(dp4034
g4
(lp4035
S'&dimension'
p4036
asg6
S'{H@0 - borderwidth}\n\nA &dimensioned number specifying the width of the bevel that makes up the\noutside of this @0.'
p4037
sg8
(lp4038
sg10
(lp4039
S'2005/02/28'
p4040
asg12
I0
sg13
(lp4041
sg15
(lp4042
ssS'option.command.generic'
p4043
(dp4044
g4
(lp4045
S'=command-option.whatis'
p4046
asg6
S'{H@0 - command}\n\nA {Lcommand=command-option.whatis} to be called whenever @1'
p4047
sg8
(lp4048
sg10
(lp4049
S'2005/02/28'
p4050
asg12
I0
sg13
(lp4051
sg15
(lp4052
ssS'wid.pmw.scrolledfield.opt.hull'
p4053
(dp4054
g4
(lp4055
sg6
S">option.pmw.hull.generic 'ScrolledField'"
p4056
sg8
(lp4057
sg10
(lp4058
sg12
I0
sg13
(lp4059
sg15
(lp4060
ssS'option.validatecommand.generic'
p4061
(dp4062
g4
(lp4063
S'=command-option.whatis'
p4064
aS'=option.validate.generic'
p4065
asg6
S"{H@0 - validatecommand}\n\nA {Lfunction or method=command-option.whatis} to call to check if the\ncontents is valid. The function should return a true value if the new\ncontents is valid, or false if it isn't.\n\nNote that this option is meaningful only if the {lvalidate\noption=option.validate.generic} is set to something other than {gnone}."
p4066
sg8
(lp4067
sg10
(lp4068
S'2005/04/05'
p4069
asg12
I0
sg13
(lp4070
sg15
(lp4071
ssS'wid.tkinter.text.opt.width'
p4072
(dp4073
g4
(lp4074
sg6
S'>option.width.generic "Text"'
p4075
sg8
(lp4076
sg10
(lp4077
sg12
I0
sg13
(lp4078
sg15
(lp4079
ssS'wid.tkinter.listbox.opt.borderwidth'
p4080
(dp4081
g4
(lp4082
sg6
S'>option.borderwidth.generic "Listbox"'
p4083
sg8
(lp4084
sg10
(lp4085
sg12
I0
sg13
(lp4086
sg15
(lp4087
ssS'wid.tkinter.toplevel.opt.height'
p4088
(dp4089
g4
(lp4090
sg6
S'{HToplevel - height}\n\nThe height of the Toplevel window in pixels.'
p4091
sg8
(lp4092
sg10
(lp4093
S'2005/04/28'
p4094
asg12
I0
sg13
(lp4095
sg15
(lp4096
ssS'wid.tkinter.entry.opt.highlightcolor'
p4097
(dp4098
g4
(lp4099
sg6
S'>option.highlightcolor.generic "Entry"'
p4100
sg8
(lp4101
sg10
(lp4102
sg12
I0
sg13
(lp4103
sg15
(lp4104
ssS'wid.tkinter.text.opt.insertborderwidth'
p4105
(dp4106
g4
(lp4107
sg6
S'>option.insertborderwidth.generic "Text"'
p4108
sg8
(lp4109
sg10
(lp4110
sg12
I0
sg13
(lp4111
sg15
(lp4112
ssS'gpl'
p4113
(dp4114
g4
(lp4115
S'=gpl.txt'
p4116
asg6
S'$$: A rapid application development program for Python+Tkinter\n Copyright (C) 2010  Cam Farnell\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public\nLicense, version 2, as published by the Free Software Foundation\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\nwarranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\ndetails.\n\n{LFull text of the GNU General Public License=gpl.txt}\n\nNote that the projects generated by $$ are not inherently covered by the GPL since their contents is not "a work\nbased on $$". However, the $$ team does heartily encourage project authors to license their projects under the GPL.'
p4117
sg8
(lp4118
sg10
(lp4119
S'<2006/03/12'
p4120
asg12
I0
sg13
(lp4121
sg15
(lp4122
S'$$ is supplied under the terms of the GNU General Public License ( GPL )'
p4123
assS'option.tabs.generic'
p4124
(dp4125
g4
(lp4126
S'&new mexico tech'
p4127
asg6
S'{H@0 - tabs}\n\nThe tabs option for Text widgets gives you a number of ways to set tab stops\nwithin the widget.\n\no The default is to place tabs every eight characters.\n\no To set specific tab stops, set this option to a sequence of one or more\n  distances. For example, setting tabs=("3c", "5c", "12c") would put tab\n  stops 3, 5, and 12cm from the left side. Past the last tab you set, tabs\n  have the same width as the distance between the last two existing tab\n  stops. So, continuing our example, because 12c-5c is 7 cm, if the user\n  keeps pressing the Tab key, the cursor would be positioned at 19cm, 26cm,\n  33cm, and so on.\n\no Normally, text after a tab character is aligned with its left edge on the\n  tab stop, but you can include any of the keywords LEFT, RIGHT, CENTER, or\n  NUMERIC in the list after a distance, and that will change the positioning\n  of the text after each tab.\n\n  o A LEFT tab stop has the default behavior.\n  o A RIGHT tab stop will position the text so its right edge is on the stop.\n  o A CENTER tab will center the following text on the tab stop.\n  o A NUMERIC tab stop will place following text to the left of the stop up\n    until the first period (".") in the text--after that, the period will be\n    centered on the stop, and the rest of the text will positioned to its\n    right.\n\nFor example, setting tabs to\n\nt {g"0.5i", "0.8i", RIGHT, "1.2i", CENTER, "2i", NUMERIC}\n\nwould set four tab stops: a left-aligned tab stop half an inch from the left\nside, a right-aligned tab stop 0.8" from the left side, a center-aligned tab\nstop 1.2" from the left, and a numeric-aligned tab stop 2" from the left.\n\n$nmt'
p4128
sg8
(lp4129
sg10
(lp4130
S'2005/04/04'
p4131
asg12
I0
sg13
(lp4132
sg15
(lp4133
ssS'widgetator.tab.pack'
p4134
(dp4135
g4
(lp4136
S'&widgetator'
p4137
aS'&within'
p4138
aS'&within'
p4139
asg6
S'{HWidgetator - Pack tab}\n\nThis tab is part of the &widgetator. It brings forward the pack editor which\nlets you see and edit all the pack related settings of the selected widget.\n\nTo get help about a particular pack option, click the $hb over the name of\nthat pack option.\n\nThere is no pack option for {gside}; it is set automatically by $$ based on\nwhere you place your widgets &within their frame. A series of widgets placed\nnear the top of a frame will be {gtop} packed; widgets placed near the right\nside will be {gright} packed and so on.\n\nNote that widgets &within a given frame should be arranged either\nhorizontally or vertically. If you want to have more complex arrangements of\nwidgets, then add additional frames as necessary so that within each frame\nthe widgets are either horizontal or vertical. If a frame contains both\nwidgets near the top and near the bottom (or left/right for the horizontal\ncase) then they are packed appropriately.'
p4140
sg8
(lp4141
sg10
(lp4142
S'2005/04/30'
p4143
asg12
I0
sg13
(lp4144
sg15
(lp4145
ssS'buffet.widget.labeledwidget'
p4146
(dp4147
g4
(lp4148
sg6
S'>buffet.widget.generic2 "Pmw.LabeledWidget", \'\', \'wid.pmw.labeledwidget.overview\''
p4149
sg8
(lp4150
sg10
(lp4151
sg12
I0
sg13
(lp4152
sg15
(lp4153
ssS'wid.pmw.scrolledlistbox.opt.labelmargin'
p4154
(dp4155
g4
(lp4156
sg6
S">option.pmw.labelmargin.generic 'ScrolledListBox'"
p4157
sg8
(lp4158
sg10
(lp4159
sg12
I0
sg13
(lp4160
sg15
(lp4161
ssS'wid.tkinter.listbox.opt.setgrid'
p4162
(dp4163
g4
(lp4164
sg6
S'>option.setgrid.generic "Listbox"'
p4165
sg8
(lp4166
sg10
(lp4167
sg12
I0
sg13
(lp4168
sg15
(lp4169
ssS'wid.tkinter.radiobutton.opt.wraplength'
p4170
(dp4171
g4
(lp4172
sg6
S'>option.wraplength.generic "Radiobutton"'
p4173
sg8
(lp4174
sg10
(lp4175
sg12
I0
sg13
(lp4176
sg15
(lp4177
ssS'bind.eventwizard.keylogical'
p4178
(dp4179
g4
(lp4180
S'&event'
p4181
aS'&event'
p4182
asg6
S'{HBind Event Wizard - Logical Key}\n\nRight now you need to press the key combination that you want your &event to be bound to. To\ndo this:\n\n n First press and hold any of the "meta" keys ({gAlt, Control, Shift} and {gCapsLock}) that\n   you want to be part of this key combination (possibly none) then\n\n n Press the function (example: {gF3}, {Gcursor up} etc) or symbol (example: {gA}, {g$} etc)\n   key that you want to form the basis of this &event.\n\nGo ahead and the press key-combination you want, after you have closed this help window.\n\nRemember that once you have pressed your key-combination you can see the resulting event\nstring up at the top of the wizard.\n\nIf you hit a wrong key-combination, hit the correct one; you can enter as many\nkey-combinations as you like and each new one pressed replaces the previous one.\n\nWhen you are happy with the key-combination click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p4183
sg8
(lp4184
sg10
(lp4185
S'2005/03/14'
p4186
asg12
I0
sg13
(lp4187
sg15
(lp4188
S'Bind Event Wizard - Logical key'
p4189
assS'code-edit.action.indentblock'
p4190
(dp4191
g4
(lp4192
S'&editor actions'
p4193
asg6
S'{HCode editor - Indent block}\n\n Key:   $tActionIndentBlock\n Menu: {fEdit/Indent block}\n\n\nEvery line in the currently selected block is indented by the {gindent} amount.\nThe indent amount is set in the &config file.\n\nCode &editor actions'
p4194
sg8
(lp4195
sg10
(lp4196
S'2005/04/07'
p4197
asg12
I0
sg13
(lp4198
sg15
(lp4199
S'Code editor - Indent block'
p4200
assS'wid.tkinter.canvas.opt.selectbackground'
p4201
(dp4202
g4
(lp4203
sg6
S'>option.selectbackground.generic "Canvas", "items"'
p4204
sg8
(lp4205
sg10
(lp4206
sg12
I0
sg13
(lp4207
sg15
(lp4208
ssS'wid.pmw.notebook.opt.lowercommand'
p4209
(dp4210
g4
(lp4211
S'&command option'
p4212
aS'&event'
p4213
aS'&handler'
p4214
asg6
S'{HNoteBook - lowercommand}\n\nA &command option which specifies the &event &handler to call when the\nselected page is replaced with a new selected page. The function is called\nwith a single argument, which is the name of the previously selected page,\nand is called before the {fcreatecommand} or {fraisecommand} functions.'
p4215
sg8
(lp4216
sg10
(lp4217
S'2006/03/21'
p4218
asg12
I0
sg13
(lp4219
sg15
(lp4220
ssS'wid.tkinter.scale.opt.font'
p4221
(dp4222
g4
(lp4223
sg6
S'>option.font.generic "Scale"'
p4224
sg8
(lp4225
sg10
(lp4226
sg12
I0
sg13
(lp4227
sg15
(lp4228
ssS'wid.tkinter.canvas.opt.highlightcolor'
p4229
(dp4230
g4
(lp4231
sg6
S'>option.highlightcolor.generic "Canvas"'
p4232
sg8
(lp4233
sg10
(lp4234
sg12
I0
sg13
(lp4235
sg15
(lp4236
ssS'buffet.widget.scrolledlistbox'
p4237
(dp4238
g4
(lp4239
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledListBox", \'\', \'wid.pmw.scrolledlistbox.overview\''
p4240
sg8
(lp4241
sg10
(lp4242
sg12
I0
sg13
(lp4243
sg15
(lp4244
ssS'option.insertwidth.generic'
p4245
(dp4246
g4
(lp4247
S'&new mexico tech'
p4248
asg6
S'{H@0 - insertwidth}\n\nWidth of the insertion cursor (its height is determined by the tallest item\nin its line).\n\nDefault is 2 pixels.\n\n$nmt'
p4249
sg8
(lp4250
sg10
(lp4251
S'2005/03/03'
p4252
asg12
I0
sg13
(lp4253
sg15
(lp4254
ssS'wid.tkinter.scale.opt.tickinterval'
p4255
(dp4256
g4
(lp4257
sg6
S'>option.tickinterval.generic "Scale"'
p4258
sg8
(lp4259
sg10
(lp4260
sg12
I0
sg13
(lp4261
sg15
(lp4262
ssS'wid.tkinter.scrollbar.opt.elementborderwidth'
p4263
(dp4264
g4
(lp4265
sg6
S'>option.elementborderwidth.generic "Scrollbar"'
p4266
sg8
(lp4267
sg10
(lp4268
sg12
I0
sg13
(lp4269
sg15
(lp4270
ssS'pack.option.expand'
p4271
(dp4272
g4
(lp4273
sg6
S'{HPack option - Expand}\n\nConcerns allocation of space to this widget.\n\n o {gYes}\n    Make the space allocated to this widget as large as possible\n\n o {gNo}\n    Allocate only as much space as is actually needed for the widget.\n\nNote that if several widgets which are competing for the same space all have\n{gexpand} set to {gYes} then the space is shared among them.'
p4274
sg8
(lp4275
sg10
(lp4276
S'2006/02/11'
p4277
asg12
I0
sg13
(lp4278
sg15
(lp4279
ssS'wid.tkinter.radiobutton.opt.text'
p4280
(dp4281
g4
(lp4282
sg6
S'>option.text.generic "Radiobutton"'
p4283
sg8
(lp4284
sg10
(lp4285
sg12
I0
sg13
(lp4286
sg15
(lp4287
ssS'wid.tkinter.button.opt.width'
p4288
(dp4289
g4
(lp4290
sg6
S'{HButton - width}\n\nThe width of the button in pixels (for images or bitmaps), or in characters\n(for text Buttons).'
p4291
sg8
(lp4292
sg10
(lp4293
sg12
I0
sg13
(lp4294
sg15
(lp4295
ssS'layout-widget-delete'
p4296
(dp4297
g4
(lp4298
S'&trash bin'
p4299
aS'&layout area'
p4300
aS'&parking lot'
p4301
aS'=layout-frame-delete'
p4302
asg6
S"{HDeleting Widgets}\n\nTo delete a widget drag it to the &trash bin, which is located below the\n&layout area and to the right of the &parking lot. Once a widget is deleted\nit's gone forever; try not to trash ones you actually want.\n\nWhen a {Lframe is deleted=layout-frame-delete}, any widgets which were inside\nthe frame are deleted at the same time."
p4303
sg8
(lp4304
sg10
(lp4305
S'2005/03/05'
p4306
asg12
I0
sg13
(lp4307
sg15
(lp4308
S'Deleting widgets from your form'
p4309
assS'wid.pmw.combobox.opt.history'
p4310
(dp4311
g4
(lp4312
sg6
S'{HComboBox - history}\n\nWhen {gReturn} is pressed in the entry field, the current value of the entry field\nis appended to the ListBox if {ghistory} is True. The &default is {gTrue}.'
p4313
sg8
(lp4314
sg10
(lp4315
S'2006/03/18'
p4316
asg12
I0
sg13
(lp4317
sg15
(lp4318
ssS'wid.pmw.optionmenu.opt.menubutton'
p4319
(dp4320
g4
(lp4321
sg6
S'{HMenuButton - menubutton}\n\nThe menu button displaying the currently selected value.'
p4322
sg8
(lp4323
sg10
(lp4324
S'2006/03/21'
p4325
asg12
I0
sg13
(lp4326
sg15
(lp4327
ssS'wid.tkinter.frame.opt.borderwidth'
p4328
(dp4329
g4
(lp4330
sg6
S'>option.borderwidth.generic "Frame"'
p4331
sg8
(lp4332
sg10
(lp4333
sg12
I0
sg13
(lp4334
sg15
(lp4335
ssS'automangle'
p4336
(dp4337
g4
(lp4338
S'&config file'
p4339
aS'&event'
p4340
aS'&handler'
p4341
aS'&config file'
p4342
asg6
S"{HWhat is: The AutoMangle option for widget and event handler names}\n\n{bAutoMangle} is a option set in the &config file.\n\nIf {bAutoMangle} is true then the names suggested for widgets and for event handlers start\nwith double-underscore marking them quasi-private to the current class and thus making it\nless likely that you will refer to these names by accident from outside the class. Of course\nthe names are only suggested and by removing the double underscores you can turn then into\npublic names.\n\nIf {bAutoMangle} is false then the names suggested for widgets and for &event &handlers do\nnot start with double-underscore. Since the names are only suggested you can make them\nquasi-private by adding double underscores at the front.\n\nOn the assumption that more names are private than public {bAutoMangle} is enabled when you\nget $$ but it's easy to change in the &config file."
p4343
sg8
(lp4344
sg10
(lp4345
S'2006/04/14'
p4346
asg12
I0
sg13
(lp4347
sg15
(lp4348
S'What is: The AutoMangle option for widget and event handler names'
p4349
assS'wid.pmw.timecounter.opt.max'
p4350
(dp4351
g4
(lp4352
sg6
S'{HTimeCounter - max}\n\nSpecifies the maximum acceptable time in the form "HH:MM:SS".'
p4353
sg8
(lp4354
sg10
(lp4355
S'2006/03/24'
p4356
asg12
I0
sg13
(lp4357
sg15
(lp4358
ssS'__intro'
p4359
(dp4360
g4
(lp4361
S'&option editor'
p4362
aS'&pack editor'
p4363
aS'=tutorial'
p4364
asg6
S"{HHello new user}\n\nWelcome to {b$$}, a tool for quickly constructing and maintaining top-level forms and widgets\nusing Python and Tkinter. This help system makes the assumption that you are familiar with\nboth Python and Tkinter.\n\nFeatures:\n\n o Graphical layout of form structure.\n o Option editor to quickly set widget attributes.\n o Bind editor to easily mainting widget bindings.\n o Pack editor to maintain pack settings.\n o Integrated code editor.\n o Following a run-time error can snap directly to the offending line.\n o Extensive help.\n\nWhat you have right now is an alpha version of {b$$}; it works but it has some limitations:\n\n o There is as yet no support for the 'grid' geometry manager.\n\n o Most of the dialogs which render assistance ('assists') when you are using the &Option\n   Editor and the &Pack Editor work but are bare bones in comparison to what would be nice.\n\n{hTutorial}\n\nYes Virginia there is a tutorial. {LClick here=tutorial} for a simple tutorial which will take\nyou through the process of creating a Hello World application with $$."
p4365
sg8
(lp4366
sg10
(lp4367
sg12
I0
sg13
(lp4368
sg15
(lp4369
S'-- New users start here--'
p4370
assS'option.pmw.repeatrate.generic'
p4371
(dp4372
g4
(lp4373
S'&default'
p4374
asg6
S'{H@0 - repeatrate}\n\nSpecifies the delay in milliseconds between automatic counts while an\narrow button is held down. The &default is 50.'
p4375
sg8
(lp4376
sg10
(lp4377
S'2006/03/19'
p4378
asg12
I0
sg13
(lp4379
sg15
(lp4380
ssS'wid.tkinter.text.opt.padx'
p4381
(dp4382
g4
(lp4383
sg6
S'>option.padx.generic "Text","widget"'
p4384
sg8
(lp4385
sg10
(lp4386
sg12
I0
sg13
(lp4387
sg15
(lp4388
ssS'wid.pmw.scrolledcanvas.opt.hull'
p4389
(dp4390
g4
(lp4391
sg6
S">option.pmw.hull.generic 'ScrolledCanvas'"
p4392
sg8
(lp4393
sg10
(lp4394
sg12
I0
sg13
(lp4395
sg15
(lp4396
ssS'option.setgrid.generic'
p4397
(dp4398
g4
(lp4399
sg6
S"{H@0 - setgrid}\n\nSpecifies a boolean value that determines whether this widget controls the\nresizing grid for its top-level window.\n\nThis option is typically used in Listbox and Text widgets, where the\ninformation in the widget has a natural size (the size of a character) and it\nmakes sense for the window's dimensions to be integral numbers of these\nunits. These natural window sizes form a grid. If the setGrid option is set\nto true then the widget will communicate with the window manager so that when\nthe user interactively resizes the top-level window that contains the widget,\nthe dimensions of the window will be displayed to the user in grid units and\nthe window size will be constrained to integral numbers of grid units.\n\nAt least, that's the theory. In fact when we tried this option it caused the\ntop-level window to balloon to a larger than expected size for no obvious\nreason. If you know all about this one, get in touch at\n\n$mailto"
p4400
sg8
(lp4401
sg10
(lp4402
S'2005/04/04'
p4403
asg12
I0
sg13
(lp4404
sg15
(lp4405
ssS'wid.tkinter.listbox.opt.selectmode'
p4406
(dp4407
g4
(lp4408
sg6
S'>option.selectmode.generic "Listbox"'
p4409
sg8
(lp4410
sg10
(lp4411
sg12
I0
sg13
(lp4412
sg15
(lp4413
ssS'wid.tkinter.text.opt.insertofftime'
p4414
(dp4415
g4
(lp4416
sg6
S'>option.insertofftime.generic "Text"'
p4417
sg8
(lp4418
sg10
(lp4419
sg12
I0
sg13
(lp4420
sg15
(lp4421
ssS'module.rename.dialog'
p4422
(dp4423
g4
(lp4424
S'&module'
p4425
aS'&project'
p4426
aS'&module'
p4427
aS'&module'
p4428
aS'&project'
p4429
aS'&module'
p4430
asg6
S'{HModule rename dialog}\n\nThis dialog is about changing the name of the current &module within the\ncurrent &project. Enter the new name for the &module (which must be different\nfrom any existing &module of the project) and press OK.\n\nThe next time you make the &project the &module will be saved under the new\nname.'
p4431
sg8
(lp4432
sg10
(lp4433
S'2005/05/25'
p4434
asg12
I0
sg13
(lp4435
sg15
(lp4436
ssS'code-edit.search-menu'
p4437
(dp4438
g4
(lp4439
S'&code editor'
p4440
aS'=code-edit.action.search'
p4441
aS'=code-edit.action.searchagain'
p4442
aS'=code-edit.searchandreplace'
p4443
aS'=code-edit.findmatch'
p4444
asg6
S'{HCode Editor - Search Menu}\n\nThe &code editor menu for search operations.\n\nt {lSearch=code-edit.action.search} - Initiate a new search.\nt {lSearch again=code-edit.action.searchagain} - Continue an existing search.\nt {lSearch and replace=code-edit.searchandreplace} - Initiate a search and\n  replace operation.\n\nt {lFind matching=code-edit.findmatch} Find matching character.'
p4445
sg8
(lp4446
sg10
(lp4447
S'2005/04/15'
p4448
asg12
I0
sg13
(lp4449
sg15
(lp4450
S'Code editor - Search Menu'
p4451
assS'pack.option.fill'
p4452
(dp4453
g4
(lp4454
S'=pack.option.anchor'
p4455
aS'=pack.option.anchor'
p4456
aS'=pack.option.anchor'
p4457
asg6
S'{HPack Option - fill}\n\nThis option is concerned with the widget being stretched to fit within the\nspace allocated for it.\n\no {gNo}\n   The widget is rendered at it\'s natural size. If it is smaller than the\n  space allocated, it is placed within that space as directed by the pack\n  option {l"anchor"=pack.option.anchor}.\n\no {gBoth}\n   The widget is stretched in both directions to fill the space allocated for\n  it.\n\no {gX}\n   The widget is stretched in the X (horizontal) direction to fill the full\n  width the space allocated for it. Vertically the widget is drawn at it\n  natural size and is placed within the height allocated to its as directed\n  by the pack option {l"anchor"=pack.option.anchor}.\n\no {gY}\n   The widget is stretched in the Y (vertical) direction to fill the full\n  height of the space allocated for it. Horizontally the widget is drawn at\n  its natural size and is placed within the width allocated to it as directed\n  by the pack option {l"anchor"=pack.option.anchor}.'
p4458
sg8
(lp4459
sg10
(lp4460
S'2005/05/19'
p4461
asg12
I0
sg13
(lp4462
sg15
(lp4463
ssS'option.variable.generic'
p4464
(dp4465
g4
(lp4466
S'&control variable'
p4467
aS'=option.onvalue.generic'
p4468
asg6
S'{H@0 - variable}\n\nThe &control variable that tracks the current state of the @0.\n\nNormally this is an {gIntVar} and {g0} means cleared and {g1} means set.\nHowever, this can also be of type String or Float if if the corresponding\n{gonvalue} and {goffvalue} options are set accordingly.\n\n{Lonvalue=option.onvalue.generic}'
p4469
sg8
(lp4470
sg10
(lp4471
S'2005/04/15'
p4472
asg12
I0
sg13
(lp4473
sg15
(lp4474
ssS'wid.tkinter.label.opt.background'
p4475
(dp4476
g4
(lp4477
S'&color'
p4478
asg6
S">option.background.generic 'Label'"
p4479
sg8
(lp4480
sg10
(lp4481
sg12
I0
sg13
(lp4482
sg15
(lp4483
ssS'wid.pmw.timecounter.arrow'
p4484
(dp4485
g4
(lp4486
sg6
S'{HTimeCounter - @0@2arrow}\n\nThe arrow button used for @1rementing the @2 field. Its component group is\nArrow.'
p4487
sg8
(lp4488
sg10
(lp4489
S'2006/03/23'
p4490
asg12
I0
sg13
(lp4491
sg15
(lp4492
ssS'wid.tkinter.checkbutton.opt.textvariable'
p4493
(dp4494
g4
(lp4495
sg6
S'>option.textvariable.generic "Checkbutton"'
p4496
sg8
(lp4497
sg10
(lp4498
sg12
I0
sg13
(lp4499
sg15
(lp4500
ssS'wid.tkinter.checkbutton.opt.takefocus'
p4501
(dp4502
g4
(lp4503
sg6
S'>option.takefocus.generic "Checkbutton"'
p4504
sg8
(lp4505
sg10
(lp4506
sg12
I0
sg13
(lp4507
sg15
(lp4508
ssS'option-cursors'
p4509
(dp4510
g4
(lp4511
sg6
S"{hCursors}\n\nThere are a whole lot of available cursors, although if there is a way of\ncreating your own cursors, I'm not aware of it.\n\nThe cursor option can be set for any widget, including the root window. The\navailable cursors are:\n\nt {fX_cursor\n   arrow\n   based_arrow_down\n   based_arrow_up\n   boat\n   bogosity\n   bottom_left_corner\n   bottom_right_corner\n   bottom_side\n   bottom_tee\n   box_spiral\n   center_ptr\n   circle\n   clock\n   coffee_mug\n   cross\n   cross_reverse\n   crosshair\n   diamond_cross\n   dot\n   dotbox\n   double_arrow\n   draft_large\n   draft_small\n   draped_box\n   exchange\n   fleur\n   gobbler\n   gumby\n   hand1\n   hand2\n   heart\n   icon\n   iron_cross\n   left_ptr\n   left_side\n   left_tee\n   leftbutton\n   ll_angle\n   lr_angle\n   man\n   middlebutton\n   mouse\n   pencil\n   pirate\n   plus\n   question_arrow\n   right_ptr\n   right_side\n   right_tee\n   rightbutton\n   rtl_logo\n   sailboat\n   sb_down_arrow\n   sb_h_double_arrow\n   sb_left_arrow\n   sb_right_arrow\n   sb_up_arrow\n   sb_v_double_arrow\n   shuttle\n   sizing\n   spider\n   spraycan\n   star\n   target\n   tcross\n   top_left_arrow\n   top_left_corner\n   top_right_corner\n   top_side\n   top_tee\n   trek\n   ul_angle\n   umbrella\n   ur_angle\n   watch\n   xterm}"
p4512
sg8
(lp4513
S'cursor'
p4514
asg10
(lp4515
S'2005/02/21'
p4516
asg12
I0
sg13
(lp4517
sg15
(lp4518
S'Cursors'
p4519
assS'wid.pmw.menubar.opt.hull'
p4520
(dp4521
g4
(lp4522
sg6
S">option.pmw.hull.generic 'MenuBar'"
p4523
sg8
(lp4524
sg10
(lp4525
sg12
I0
sg13
(lp4526
sg15
(lp4527
ssS'wid.tkinter.radiobutton.opt.indicatoron'
p4528
(dp4529
g4
(lp4530
sg6
S'>option.indicatoron.generic "Radiobutton"'
p4531
sg8
(lp4532
sg10
(lp4533
sg12
I0
sg13
(lp4534
sg15
(lp4535
ssS'wid.pmw.entryfield.opt.pyclass'
p4536
(dp4537
g4
(lp4538
sg6
S'>option.pyclass.generic "EntryField"'
p4539
sg8
(lp4540
sg10
(lp4541
sg12
I0
sg13
(lp4542
sg15
(lp4543
ssS'wid.pmw.scrolledframe.opt.hull'
p4544
(dp4545
g4
(lp4546
sg6
S">option.pmw.hull.generic 'ScrolledFrame'"
p4547
sg8
(lp4548
sg10
(lp4549
sg12
I0
sg13
(lp4550
sg15
(lp4551
ssS'tutorial.6'
p4552
(dp4553
g4
(lp4554
S'&widget buffet'
p4555
aS'&trash bin'
p4556
aS'&duplicator'
p4557
aS'&parking lot'
p4558
aS'&module'
p4559
aS'&module'
p4560
aS'&module'
p4561
aS'=tutorial.5'
p4562
asg6
S'{HTutorial - page 6}\n\nNow when you run the project you get the label and button on the left and the text\nwidget on the right. How much space they get is controlled by the pack option\nsettings in the usual Tkinter manner.\n\nYou can move frame lines by clicking and dragging them.\n\nIf you right click within a frame (other than over a widget) a menu pops up frome\nwhere you can do various things, the most important of which is delete the frame.\n\nThe &widget buffet has tabs for both the Tkinter and the Pmw widgets.\n Widgets other than frames are deleted by dragging them down to the &trash bin\n{P$imgpr-trash.ppm}.\n You can use the &duplicator {P$imgpr-duplicator.ppm} to make copies of existing\nwidgets.\n The &parking lot {P$imgpr-parking.ppm} is handy for temporarily storing widgets.\nYou can move them between forms or even modules by putting it on the parking lot,\nselecting the target form and then moving the widget from the parking lot to the\nnew form. Widgets on the parking lot when your project is saved will still be\nthere when the project is re-loaded.\n\n{BThe main code area}\n\nEach &module has, in addition to the code associated with each form, a "{gMain\ncode area}" which is where you put any code that pertains to the entire module and\nnot just one particular form. The Main Code Area of the Main Module of a project\nalso holds the code (which is automatically provided when the project is first\ncreated) to do necessary housekeeping and establish the main loop.\n\n{bForms}\n\nA &module can contain many forms. Use the main menu "{GForms}" button to create and\ndelete forms. You select the form to see by clicking on it\'t tab just below the\nmain menu area.\n\n{bModules}\n\nA project always has a main &module but it can have additional modules as well.\nUse the main menu "{GModules}" button to create, delete, rename and select\nmodules.\n\n{bWrapup}\n\nThis tutorial should have at least gotten your feet wet as far as starting to use\n$$ goes. Feel free to experiment. There are a whole lot of help messages so use\nthem to find out about features of interest. Using the {GIndex} feature at the top\nof the help window is a good way to do this. You can also get to the index feature\ndirectly via the main menu {gHelp->SearchHelpIndex} choice.\n\n{LPrevious Tutorial Page=tutorial.5}  <==='
p4563
sg8
(lp4564
sg10
(lp4565
S'2006/03/17'
p4566
asg12
I0
sg13
(lp4567
sg15
(lp4568
ssS'tutorial.4'
p4569
(dp4570
g4
(lp4571
S'=bindassist.name-suggestion'
p4572
aS'&bind editor'
p4573
aS'&bind editor'
p4574
aS'=tutorial.3'
p4575
aS'=tutorial.5'
p4576
asg6
S'{HTutorial - page 4}\n\nUp pops the Bind Assist Dialog. We\'re going to do things the easy way so click on the {gEvent\nWizard} button. We want our button widget to respond when the user has clicked and released so\nselect the radio-button marked {gButtonRelease} then press {gEnter}. We want "single click", "button\none" and "no modifiers" so press {gEnter} three more times although feel free to do this slowly and\ntake a look at the choices and possibly click on help as you go. Most people find that after using\nthe Event Wizard a couple of times they can roar through it pretty fast going click, Enter, click\nEnter.\n\nWe now have a valid event string "{g<ButtonRelease-1>}" and the Wizard had\n{Lsuggested=bindassist.name-suggestion} "{Gon_Button1_ButRel_1}" as the name of the handler.  Click\non the {gOK} button to accept the suggested handler name and create the binding. An empty handler is\ncreated and placed in the code editor.\n\nAt this point you generally want to go into the code editor and write code for the handler. Right\nnow we only have one event handler so finding it is easy. In a form with a lot of handlers it is\nharder. Two notes:\n\n n To make handlers easy to find $$ keep them in alphabetic order in the code.\n n Double-clicking on an entry in the &bind editor takes you directly to that entries code in the\n   code editor.\nSo, go ahead and double-click on the new entry in the &bind editor (but not on the\n{P$imgpr-help-Assist.ppm} button - that\'s how you modify or delete a binding).\n\nThe cursor should now be placed on the first line of the body of the event handler:\n\n{P$imgpr-help-HandlerFragment.ppm}\n\nNote that the start of the header line of the handler (everything from {gdef} through {gself}) is\nprotected text but the argument(s) are not - you can change them if it suits your purpose.\n\nThe body of a newly created event handler consists solely of a "{gpass}" statement, giving you a\nmethod which exists but does nothing; you get to put in whatever code you want. In this case we want\nto replace the pass line with one which says "{gself.quit()}".\n\n{LPrevious Tutorial Page=tutorial.3}  <===>  {LNext Tutorial Page=tutorial.5}'
p4577
sg8
(lp4578
sg10
(lp4579
S'2006/03/17'
p4580
asg12
I0
sg13
(lp4581
sg15
(lp4582
ssS'tutorial.5'
p4583
(dp4584
g4
(lp4585
S'&layout editor'
p4586
aS'&pack editor'
p4587
aS'&layout editor'
p4588
aS'&frame'
p4589
aS'&widgetator'
p4590
aS'&select the frame'
p4591
aS'=tutorial.4'
p4592
aS'=tutorial.6'
p4593
asg6
S'{HTutorial - page 5}\n\nNow when you run the project you have a proper "Hello World" window complete\nwith the label and a quit button. You might experiment with placing the Label\nand Button at various locations in the &layout editor and seeing where they\nshow up when you run the project. But put them either one above the other or\none next to the other; for more complicated arrangements you add additional\nframes which we\'ll get to Real Soon now.\n\nIf you call up the &pack editor for the Label or Button you can mess around\nwith the pack settings as shown there. Note that the pack "{gside}" option\nthat you know and love is {inot} one of the pack options shown. It is set\nautomatically by $$ depending on where you place the widget within the\n&layout editor.\n\n{bFrames}\n\nAs soon as you want a layout more complicated than several widgets in a row\nthen &frames are in order. Adding a frame line to divide a portion of the\nlayout area into two frames is easy:\n\no Move the cursor to about where you want the line (but not over a widget),\n  click and hold the left mouse button then drag a bit. Drag down to get a\n  vertical line, drag right to get a horizontal line. While continuing to\n  hold the left button down, drag the line to where you want it then let go.\n  Presto. You have two new frames.\n\nFrames are a kind of widget and you can see and change their options over in\nthe &widgetator. You can easily create frames within frames. If a frame is\nthe selected widget it has a grey outline just inside it\'s border. There are\nways to &select the frame you want.\n\nCreate a vertical frame line, move the Label and Button so they are one above\neach other in the left frame and create a "{gText}" widget in the right\nframe. It should look something like this only bigger (we shrank ours so it\nwould fit here):\n\n{P$imgpr-help-WithFrame.ppm} \n\n{LPrevious Tutorial Page=tutorial.4}  <===> \n{LNext Tutorial Page=tutorial.6}'
p4594
sg8
(lp4595
sg10
(lp4596
S'2006/03/17'
p4597
asg12
I0
sg13
(lp4598
sg15
(lp4599
ssS'tutorial.2'
p4600
(dp4601
g4
(lp4602
S'&code editor'
p4603
aS'&layout editor'
p4604
aS'=howto.swap.code.layout'
p4605
aS'&form'
p4606
aS'&code editor'
p4607
aS'&layout editor'
p4608
aS'&layout editor'
p4609
aS'&widget buffet'
p4610
aS'&a widget'
p4611
aS'&widget buffet'
p4612
aS'=tutorial'
p4613
aS'=tutorial.3'
p4614
asg6
S'{HTutorial - page 2}\n\nThe project you just created is in fact ready to run. From the {gProject}\nmenu click on {gSave+Build+Run} which saves it, builds it and runs it. The\nrun project appears as a windown named {gHello} and since you haven\'t put\nany widgets or code in the project about all you can do is use the window\nmanager to close it. But it does run.\n\nLets take a quick look at the &code editor which timeshares space with the\n&layout editor. There are {Lthree ways=howto.swap.code.layout} to swap\nbetween these two editors but for now just press the\n{g$tActionFormSwapCodeLayout} key. Bam. You are in the code editor for\n&form "{gHello}". Note that the code to create the form is already there\nand is on a different colored background. The different background\nindicates code that has been generated automatically by $$. You can look at\nthis code, you can step the cursor through it but you can\'t change it. To\nfind out about the features of the &code editor, click on either the\n{gEdit} or {gSearch} menu buttons and then on the {gHelp} choice at the\nbottom. Once you are done with that, press {g$tActionFormSwapCodeLayout}\nagain to get back to the &layout editor.\n\nNow to make your project a bit more interesting. Down at the bottom of the\n&layout editor is the &widget buffet, part of which should look something\nlike this:\n\n{P$imgpr-help-WidgetBuffet.ppm}\n\nTo add &a widget to your form you drag it from the &widget buffet onto your\nform. If you are wondering which widget is which, put the cursor over any\nof them and the name of that kind of widget will pop up.\n\nGo ahead and drag a {gLabel} widget from the buffet and place it near the\ntop of the layout area and about centered left-to-right. If you pop into\nthe code editor for a second you\'ll see that the code to create the Label\nwidget has already been generated.\n\n{LPrevious Tutorial Page=tutorial}  <===>  {LNext Tutorial Page=tutorial.3}'
p4615
sg8
(lp4616
sg10
(lp4617
S'2006/03/16'
p4618
asg12
I0
sg13
(lp4619
sg15
(lp4620
ssS'code-edit.deleteline'
p4621
(dp4622
g4
(lp4623
S'&editor actions'
p4624
asg6
S'{HCode editor - Delete line}\n\n Key:   $tActionDeleteLine\n Menu: {fEdit/Delete line}\n\nThe line which contains the cursor is deleted.\n\nNote that this function pays no attention to the current selection. If you\nwant to delete the current selection use the {gDelete} key. The whole point\nof {bthis} editor action is to allow you to easily delete a single line without\nhaving to select it first.\n\nCode &editor actions'
p4625
sg8
(lp4626
sg10
(lp4627
S'2006/04/02'
p4628
asg12
I0
sg13
(lp4629
sg15
(lp4630
S'Code editor - delete line'
p4631
assS'wid.pmw.optionmenu.opt.menu'
p4632
(dp4633
g4
(lp4634
sg6
S'{HOptionMenu - menu}\n\nThe popup menu displayed when the menubutton is pressed.'
p4635
sg8
(lp4636
sg10
(lp4637
S'2006/03/21'
p4638
asg12
I0
sg13
(lp4639
sg15
(lp4640
ssS'wid.tkinter.menubutton.opt.state'
p4641
(dp4642
g4
(lp4643
sg6
S'>option.state.generic "Menubutton"'
p4644
sg8
(lp4645
sg10
(lp4646
sg12
I0
sg13
(lp4647
sg15
(lp4648
ssS'wid.pmw.scrolledcanvas.opt.scrollmargin'
p4649
(dp4650
g4
(lp4651
S'&default'
p4652
asg6
S'{HScrolledCanvas - scrollmargin}\n\nThe distance between the scrollbars and the enclosing canvas widget. The\n&default is 2.'
p4653
sg8
(lp4654
sg10
(lp4655
S'2006/03/22'
p4656
asg12
I0
sg13
(lp4657
sg15
(lp4658
ssS'wid.pmw.scrolledtext.opt.name'
p4659
(dp4660
g4
(lp4661
sg6
S">option.name.generic 'ScrolledText'"
p4662
sg8
(lp4663
sg10
(lp4664
sg12
I0
sg13
(lp4665
sg15
(lp4666
ssS'wid.pmw.timecounter.opt.upsecondarrow'
p4667
(dp4668
g4
(lp4669
sg6
S">wid.pmw.timecounter.arrow 'up','inc','second'"
p4670
sg8
(lp4671
sg10
(lp4672
sg12
I0
sg13
(lp4673
sg15
(lp4674
ssS'wid.tkinter.label.opt.activebackground'
p4675
(dp4676
g4
(lp4677
S'&color'
p4678
aS'&color'
p4679
asg6
S'>option.activebackground.generic "Label"'
p4680
sg8
(lp4681
sg10
(lp4682
sg12
I0
sg13
(lp4683
sg15
(lp4684
ssS'wid.pmw.timecounter.opt.frame'
p4685
(dp4686
g4
(lp4687
sg6
S'{HTimeCounter - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos}  option is not\n{gNone}), the frame component is created to act as the container of the entry\nfields and arrow buttons. If there is no {glabel} component, then no {gframe}\ncomponent is created and the {ghull} component acts as the container. In either\ncase the border around the container of the entry fields and arrow buttons\nwill be raised (but not around the label).'
p4688
sg8
(lp4689
sg10
(lp4690
S'2006/03/24'
p4691
asg12
I0
sg13
(lp4692
sg15
(lp4693
ssS'wid.tkinter.menubutton.opt.direction'
p4694
(dp4695
g4
(lp4696
sg6
S'>option.direction.generic "Menubutton"'
p4697
sg8
(lp4698
sg10
(lp4699
sg12
I0
sg13
(lp4700
sg15
(lp4701
ssS'howto.delete.event.handler'
p4702
(dp4703
g4
(lp4704
S'&maintained'
p4705
aS'&event'
p4706
aS'&handler'
p4707
aS'&event'
p4708
aS'&handler'
p4709
asg6
S'{HHow to delete an event handler}\n\nTo delete a $$ &maintained &event &handler:\n\n o Find the event handler in the code editor.\n\n o Right click over the header (any of the text on a different colored\n   background) of the &event &handler.\n\n o Choose the {gDelete} item of the popup menu.'
p4710
sg8
(lp4711
sg10
(lp4712
S'2006/02/14'
p4713
asg12
I0
sg13
(lp4714
sg15
(lp4715
S'How to: Delete an event handler'
p4716
assS'wid.tkinter.menu.opt.type'
p4717
(dp4718
g4
(lp4719
sg6
S'>option.type.generic "Menu"'
p4720
sg8
(lp4721
sg10
(lp4722
sg12
I0
sg13
(lp4723
sg15
(lp4724
ssS'wid.tkinter.checkbutton.opt.highlightthickness'
p4725
(dp4726
g4
(lp4727
sg6
S'>option.highlightthickness.generic "Checkbutton"'
p4728
sg8
(lp4729
sg10
(lp4730
sg12
I0
sg13
(lp4731
sg15
(lp4732
ssS'wid.pmw.counter.opt.label'
p4733
(dp4734
g4
(lp4735
sg6
S">option.pmw.label.generic 'Counter'"
p4736
sg8
(lp4737
sg10
(lp4738
sg12
I0
sg13
(lp4739
sg15
(lp4740
ssS'formseedialog'
p4741
(dp4742
g4
(lp4743
S'&form'
p4744
aS'&layout area'
p4745
aS'&form'
p4746
aS'&module'
p4747
aS'&form'
p4748
aS'&layout area'
p4749
aS'&form'
p4750
aS'&form'
p4751
aS'&form'
p4752
aS'&form'
p4753
aS'&module'
p4754
aS'&form'
p4755
aS'&form'
p4756
asg6
S'{HSelecting which forms you want to see}\n\nThe main menu "{gForms/Select forms to see}" choice lets you set which &forms will appear in\nthe tabs at the top of the &layout area.\n\nAs you add &forms to a &module, each new &form gets it\'s own tab at the top of the &layout\narea. If you have a lot of &forms then the tabs get crowded. Since it is unlikely that you\nwill be working on every &form all the time, this menu item lets you select which &forms\nwill and will not have a tab.\n\nA menu showing the name of every &form in the current &module pops up. Select the\ncheckbutton next to each &form that you want to have a tab, and deselect the checkbutton for\nall other &forms. When you press {gOK} the tabs will be adjusted to reflect your request.'
p4757
sg8
(lp4758
sg10
(lp4759
S'2005/05/23'
p4760
asg12
I0
sg13
(lp4761
sg15
(lp4762
S'How to: Select which forms have a tab at the top of the layout area'
p4763
assS'wid.tkinter.frame.opt.pyclass'
p4764
(dp4765
g4
(lp4766
sg6
S'>option.pyclass.generic "Frame"'
p4767
sg8
(lp4768
sg10
(lp4769
sg12
I0
sg13
(lp4770
sg15
(lp4771
ssS'wid.tkinter.frame.opt.takefocus'
p4772
(dp4773
g4
(lp4774
sg6
S'>option.takefocus.generic "Frame"'
p4775
sg8
(lp4776
sg10
(lp4777
sg12
I0
sg13
(lp4778
sg15
(lp4779
ssS'wid.tkinter.button.opt.padx'
p4780
(dp4781
g4
(lp4782
sg6
S'>option.padx.generic "Button", "text"'
p4783
sg8
(lp4784
sg10
(lp4785
sg12
I0
sg13
(lp4786
sg15
(lp4787
ssS'wid.tkinter.button.opt.pady'
p4788
(dp4789
g4
(lp4790
sg6
S'>option.pady.generic "Button", "text"'
p4791
sg8
(lp4792
sg10
(lp4793
sg12
I0
sg13
(lp4794
sg15
(lp4795
ssS'wid.pmw.scrolledcanvas.opt.horizscrollbar'
p4796
(dp4797
g4
(lp4798
sg6
S'{HScrolledCanvas - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is {bScrollbar}.'
p4799
sg8
(lp4800
sg10
(lp4801
S'2006/03/22'
p4802
asg12
I0
sg13
(lp4803
sg15
(lp4804
ssS'option-relief'
p4805
(dp4806
g4
(lp4807
sg6
S'{HRelief}\n\nThe type of border to draw around a widget or widget element. Can be one of:\n\n o {GRaised}\n o {GSunken}\n o {GGroove}\n o {GRidge}\n o {GFlat}'
p4808
sg8
(lp4809
S'relief'
p4810
asg10
(lp4811
S'2005/02/26'
p4812
asg12
I0
sg13
(lp4813
sg15
(lp4814
S'The widget Relief option'
p4815
assS'bindassist.delete'
p4816
(dp4817
g4
(lp4818
S'=bindassist.general'
p4819
aS'&event'
p4820
asg6
S'{HBind Assist Dialog - Delete Button}\n\nThis is the {GDelete} button of the {lBind Assist Dialog=bindassist.general}.\n\nClick this button to delete the current &binding from the list of &events for\n&binding to the current widget. You will be asked for confirmation before the\ndeletion actually happens.'
p4821
sg8
(lp4822
sg10
(lp4823
S'2005/03/16'
p4824
asg12
I0
sg13
(lp4825
sg15
(lp4826
S'The Delete button of the Bind Assist Dialog'
p4827
assS'wid.tkinter.label.opt.state'
p4828
(dp4829
g4
(lp4830
sg6
S'>option.state.generic "Label"'
p4831
sg8
(lp4832
sg10
(lp4833
sg12
I0
sg13
(lp4834
sg15
(lp4835
ssS'wid.tkinter.checkbutton.opt.relief'
p4836
(dp4837
g4
(lp4838
sg6
S'>option.relief.generic "Checkbutton"'
p4839
sg8
(lp4840
sg10
(lp4841
sg12
I0
sg13
(lp4842
sg15
(lp4843
ssS'wid.tkinter.canvas.opt.closeenough'
p4844
(dp4845
g4
(lp4846
sg6
S'>option.closeenough.generic "Canvas"'
p4847
sg8
(lp4848
sg10
(lp4849
sg12
I0
sg13
(lp4850
sg15
(lp4851
ssS'wid.pmw.messagebar.opt.labelpos'
p4852
(dp4853
g4
(lp4854
sg6
S">option.pmw.labelpos.generic 'MessageBar'"
p4855
sg8
(lp4856
sg10
(lp4857
sg12
I0
sg13
(lp4858
sg15
(lp4859
ssS'code-edit.action.searchagain'
p4860
(dp4861
g4
(lp4862
S'=search.dialog'
p4863
aS'&editor actions'
p4864
asg6
S'{HCode editor - Search again}\n\n Key:   $tActionSearchAgain\n Menu: {fSearch/Search again}\n\nRepeats an existing search, looking for the next occurrence of the search string.\n\nIf there was no previous search, then this action puts up a\n{ldialog=search.dialog} to initiate a new search.\n\nCode &editor actions.'
p4865
sg8
(lp4866
sg10
(lp4867
S'2005/04/07'
p4868
asg12
I0
sg13
(lp4869
sg15
(lp4870
S'Code editor - search again'
p4871
assS'wid.tkinter.button.opt.name'
p4872
(dp4873
g4
(lp4874
sg6
S'>option.name.generic "Button"'
p4875
sg8
(lp4876
sg10
(lp4877
sg12
I0
sg13
(lp4878
sg15
(lp4879
ssS'code-edit.action.goto'
p4880
(dp4881
g4
(lp4882
S'&editor actions'
p4883
asg6
S'{HCode editor - Goto}\n\n Key:   $tActionGoto\n Menu: {fEdit/Goto}\n\nPuts up a dialog where you can enter a line number to be taken to that line in\nthe file. If you enter a number larger than the number of lines in the file you\nare taken to the last line of the file.\n\nCode &editor actions'
p4884
sg8
(lp4885
sg10
(lp4886
S'2005/04/06'
p4887
asg12
I0
sg13
(lp4888
sg15
(lp4889
S'Code editor - goto linenumber'
p4890
assS'option-bitmaps'
p4891
(dp4892
g4
(lp4893
S'&image'
p4894
asg6
S'{HBitmaps}\n\nSome widgets (eg Buttons, Labels etc,) can display a bitmap. Note that\nbitmaps and &images are different entities although they do a similar job.\n\nThere are two ways to specify a bitmap for your widget:\n\nn Enter the name of a standard system bitmap from this list: {f\n\n  o error\n  o gray75\n  o gray50\n  o gray25\n  o gray12\n  o hourglass\n  o info\n  o questionhead\n  o question\n  o warning}\n\nn Enter an at-sign followed by the path to an {g.xbm} (X bitmap) file\n  containing the bitmap to be displayed, for example:\n\n  {f@/usr/X11R6/include/X11/bitmaps/card.xbm}'
p4895
sg8
(lp4896
S'bitmap'
p4897
asg10
(lp4898
S'2005/02/22'
p4899
asg12
I0
sg13
(lp4900
sg15
(lp4901
S'Bitmaps'
p4902
assS'search.replace-dialog'
p4903
(dp4904
g4
(lp4905
sg6
S'{HCode Editor - Search and Replace Dialog}\n\nUse this to search for and replace one or many instances of a text string.\n\nType the target text and the text to replace it with into the Entry areas\nnear the top.\n\no {GFrom first line}  If selected, then we start searching from the first\n  line of text. If this is not selected then the search starts from the\n  current cursor position. Note that if the {gbackwards} choice is selected\n  then this choice becomes "from last line".\n\no {GCase sensitive}  Normally searches are case insensitive. Check this if\n  you want the search to be case sensitive.\n\no {GBackwards}  Normally searches run in the forward direction. Check this if\n  you want the search to run in the backward direction. If this choice is\n  selected then the "from first line" choice becomes the "from last line"\n  choice.\n\no {GRegular expression}  Normally search looks for a simple match with the\n  specifed search string. Check this choice to search using a sub-set of\n  regular expressions. Features supported are:\n\n  t {G. ^ $ [}c1...{G] (}...{g) * + ?  }e1 {G|} e2\n\no {GPrompt on replace}  If this is selected you are prompted each time before\n  text is replaced. If this is not selected then text is replaced without you\n  being prompted.\n\no {GReplace all}  Normally search and replace will only replace one instance\n  of the target text with the replacement text. If this is checked then we\n  search for all instances between the starting and ending points. If\n  prompting is enabled then you get to choose on a case-by-case basis if each\n  matching string is replaced. If prompting is not enabled then all matching\n  instances in the search area are replaced and a message appears showing the\n  number of replacements done.\n\nNote that search-and-replace ignores all system generated text (the text\nwhich is on a different color background).'
p4906
sg8
(lp4907
sg10
(lp4908
sg12
I0
sg13
(lp4909
sg15
(lp4910
S'Code editor - Search and Replace Dialog'
p4911
assS'wid.tkinter.listbox.opt.exportselection'
p4912
(dp4913
g4
(lp4914
sg6
S'>option.exportselection.generic "Listbox"'
p4915
sg8
(lp4916
sg10
(lp4917
sg12
I0
sg13
(lp4918
sg15
(lp4919
ssS'command.orphan.handler'
p4920
(dp4921
g4
(lp4922
S'&command option'
p4923
aS'&event'
p4924
aS'&handler'
p4925
aS'&event'
p4926
aS'&handler'
p4927
aS'&maintained'
p4928
aS'&command option'
p4929
aS'&binding'
p4930
aS'&event'
p4931
aS'&handler'
p4932
aS'&event'
p4933
aS'&handler'
p4934
aS'&event'
p4935
aS'&handler'
p4936
aS'&command option'
p4937
aS'&binding'
p4938
aS'&event'
p4939
aS'&handler'
p4940
aS'&event'
p4941
aS'&handler'
p4942
aS'&event'
p4943
aS'&handler'
p4944
aS'&handler'
p4945
aS'&command option'
p4946
aS'&handler'
p4947
asg6
S'{HOrphan event handler}\n\nYou just changed a &command option which used to refer to the &event &handler\n"@0" so it will now refer to existing &event &handler "@1". I note that no\nother $$ &maintained &command option nor &binding anywhere in the current\nform refers to &event &handler "@0", so it may be redundant. The dialog box\nyou pressed help on is giving you the opportunity to delete &event &handler\n"@0" now.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that)\n  or if you plan to create a new &command option or &binding which will refer\n  to that &Event &handler then clearly you want to choose {GKeep handler}\n  here and retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed\n  use for it then you might as well choose {GDelete handler} here and delete\n  the &handler rather than leaving unused code hanging around your form.\n\no If you click on {gCancel} nothing is changed: the &command option remains\n  the same and the &handlers remain the same.'
p4948
sg8
(lp4949
sg10
(lp4950
S'2006/02/04'
p4951
aS'@0 The event handler this option used to refer to'
p4952
aS'@1 The event handler this option will now refer to'
p4953
asg12
I0
sg13
(lp4954
sg15
(lp4955
ssS'wid.pmw.scrolledlistbox.opt.horizscrollbar'
p4956
(dp4957
g4
(lp4958
sg6
S'{HScrolledListBox - horizscrollbar}\n\nThe horizontal scrollbar. Its component group is Scrollbar.'
p4959
sg8
(lp4960
sg10
(lp4961
S'2006/03/23'
p4962
asg12
I0
sg13
(lp4963
sg15
(lp4964
ssS'widget.radiobutton'
p4965
(dp4966
g4
(lp4967
S'&control variable'
p4968
aS'=wid.tkinter.radiobutton.opt.variable'
p4969
aS'&control variable'
p4970
aS'&control variable'
p4971
aS'&new mexico tech'
p4972
asg6
S'{HRadiobuttons}\n\nRadiobuttons are sets of related widgets that allow the user to select only\none of a set of choices. Each radiobutton consists of two parts, the\nindicator and the label:\n\n o The indicator is the diamond-shaped part that turns red in the selected\n   item.\n\n o The label is usually text, although you can use an image or bitmap as the\n   label.\n\n\nIf you prefer, you can dispense with the indicator. This makes the\nradiobuttons look like "push-push" buttons, with the selected entry appearing\nsunken and the rest appearing raised.\n\n\nTo form several radiobuttons into a functional group, create a single\n&control variable and set the {Lvariable\noption=wid.tkinter.radiobutton.opt.variable} of each radiobutton to that\nvariable.\n\nThe &control variable can be either an IntVar or a StringVar. If two or more\nradiobuttons share the same control variable, setting any of them will clear\nthe others.\n\nEach radiobutton in a group must have a unique value option of the same type\nas the &control variable. For example, a group of three radiobuttons might\nshare an IntVar and have values of 0, 1, and 99. Or you can use a StringVar\ncontrol variable and give the radiobuttons value options like "too hot", "too\ncold", and "just right".\n\n$nmt'
p4973
sg8
(lp4974
S'radiobutton'
p4975
asg10
(lp4976
sg12
I0
sg13
(lp4977
sg15
(lp4978
S'Radiobutton'
p4979
assS'wid.pmw.mainmenubar.opt.pyclass'
p4980
(dp4981
g4
(lp4982
sg6
S'>option.pyclass.generic "MainMenuBar"'
p4983
sg8
(lp4984
sg10
(lp4985
sg12
I0
sg13
(lp4986
sg15
(lp4987
ssS'buffet.widget.panedwidget'
p4988
(dp4989
g4
(lp4990
sg6
S'>buffet.widget.generic2 "Pmw.PanedWidget", \'\', \'wid.pmw.panedwidget.overview\''
p4991
sg8
(lp4992
sg10
(lp4993
sg12
I0
sg13
(lp4994
sg15
(lp4995
ssS'wid.pmw.panedwidget.opt.pyclass'
p4996
(dp4997
g4
(lp4998
sg6
S'>option.pyclass.generic "Panedwidget"'
p4999
sg8
(lp5000
sg10
(lp5001
sg12
I0
sg13
(lp5002
sg15
(lp5003
ssS'wid.pmw.buttonbox.opt.label'
p5004
(dp5005
g4
(lp5006
sg6
S">option.pmw.label.generic 'ButtonBox'"
p5007
sg8
(lp5008
sg10
(lp5009
sg12
I0
sg13
(lp5010
sg15
(lp5011
ssS'widgetator.main'
p5012
(dp5013
g4
(lp5014
S'&layout area'
p5015
aS'&layout area'
p5016
aS'&option editor'
p5017
aS'&bind editor'
p5018
aS'&event'
p5019
aS'&pack editor'
p5020
aS'&option editor'
p5021
aS'&bind editor'
p5022
aS'&pack editor'
p5023
asg6
S"{HThe Widgetator}\n\nThe {bwidgetator} is the area on the far left of $$'s screen and, not\nsurprisingly, it is where you get to play with the attributes of widgets.\n\n{gThe Selector:} {P$imgpr-help-Selector.ppm}\n\nt at the top, is for selecting which widget you want to work on. You can\n  either click on the arrow to choose a widget from a dropdown list, or\n  you can type the name of the widget to select into the edit area then\n  press {fenter}. The specified widget will be selected and it will be\n  highlighted in the &layout area so you can see where the selected widget\n  is on the form.\n\n  Note that the selector only lists the widgets of the current form of the\n  current module.\n o To access the attributes of a widget on a different form, first select\n   that from in the &layout area.\n o To access a different module, from the main menu click the {gModules}\n   choice, then use one of the {gModule Select}, {gModule Alternate} or\n   {gModule next} choices.\n\n{gThe Tabs and Resize Knobs:} {P$imgpr-help-WidgetatorTabs.ppm}\n\nt The tabs select which of the three editors is active:\n\n o The {bOptions} tab. Click this to make visible the &option editor which\n   lets you see and edit all the options of the selected widget. The\n   options specified here are the ones that will be in effect when the\n   widget is created.\n\n o The {bBindings} tab. Click this to make visible the &bind editor which\n   lets you see and edit the bindings for the selected widget. Bindings\n   allow you to activate user-written methods in response to &events which\n   happen to a widget.\n\n o The {bPack} tab. Click this to make visible the &pack editor which lets\n   you se and edit the pack related options for the current widget. Note\n   that the main form itself has no pack options because it is a class and\n   any instance of that class has to be packed by your code that creates\n   the class.\n\nt The resize knobs {P$imgpr-msc-resize.ppm} are for changing the column\n  widths in the editors.\n\n{BThe Editing Area}\n\nThe editing area, below the resize knobs, is where the real action takes\nplace and exactly what happens there depends on which editor is active.\n\n o The &Option editor\n o The &Bind editor\n o The &Pack editor"
p5024
sg8
(lp5025
S'widgetator'
p5026
asg10
(lp5027
sg12
I0
sg13
(lp5028
sg15
(lp5029
S'The Widgetator is where you deal with widget options, bindings and packing.'
p5030
assS'wid.pmw.buttonbox.opt.name'
p5031
(dp5032
g4
(lp5033
sg6
S'>option.name.generic "ButtonBox"'
p5034
sg8
(lp5035
sg10
(lp5036
sg12
I0
sg13
(lp5037
sg15
(lp5038
ssS'wid.pmw.radioselect.overview'
p5039
(dp5040
g4
(lp5041
sg6
S'{HWhat is: A RadioSelect widget}\n\nA radio select is a container megawidget which manages a number of buttons.\nThe buttons may be laid out either horizontally or vertically. In single\nselection mode, only one button may be selected at any one time. In multiple\nselection mode, several buttons may be selected at the same time and clicking\non a selected button will deselect it.\n\nThe buttons displayed can be either standard buttons, radio buttons or check\nbuttons. When selected, standard buttons are displayed sunken and radio and\ncheck buttons are displayed with the appropriate indicator color and relief.'
p5042
sg8
(lp5043
sg10
(lp5044
S'2006/03/21'
p5045
asg12
I0
sg13
(lp5046
sg15
(lp5047
S'What is: A RadioSelect widget'
p5048
assS'bind.eventwizard.keyphysical'
p5049
(dp5050
g4
(lp5051
sg6
S'{HBind Event Wizard - Physical Key}\n\nRight now you need to select a single key, and that single key can be ANY of the keys that\nyour operating system knows about including keys that aren\'t normally considered to be\n"actual" keys, like {GAlt, Control, Shift} and {GCapsLock}.\n\nGo ahead and press key you want, after you have closed this help window.\n\nRemember that once you have pressed your key you can see the resulting event string up at\nthe top of the wizard.\n\nIf you hit a wrong key, hit the correct one; you can press as many keys as you like and each\nnew one pressed replaces the previous one pressed.\n\nWhen you are done chosing the key click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p5052
sg8
(lp5053
sg10
(lp5054
S'2005/03/14'
p5055
asg12
I0
sg13
(lp5056
sg15
(lp5057
S'Bind Event Wizard - Physical key'
p5058
assS'option.insertborderwidth.generic'
p5059
(dp5060
g4
(lp5061
sg6
S'{H@0 - insertborderwidth}\n\nThe size of the 3-D border around the insertion cursor.'
p5062
sg8
(lp5063
sg10
(lp5064
S'2005/03/02'
p5065
asg12
I0
sg13
(lp5066
sg15
(lp5067
ssS'dialog-handlerdelete'
p5068
(dp5069
g4
(lp5070
S'&maintained'
p5071
aS'&handler'
p5072
aS'&handler'
p5073
aS'&maintained'
p5074
aS'&binding'
p5075
aS'&maintained'
p5076
aS'&command option'
p5077
aS'&handler'
p5078
asg6
S'{hThe event handler delete dialog}\n\nThis dialog shows how many $$ &maintained bindings (if any) reference the\ncurrent event &handler. If you click on OK then the event &handler is\ndeleted and:\n\n o Any $$ &maintained &bindings which refer to this handler are deleted\n   and\n\n o Any $$ &maintained &command options which refer to this &handler are\n   cleared.'
p5079
sg8
(lp5080
sg10
(lp5081
S'2006/02/05'
p5082
asg12
I0
sg13
(lp5083
sg15
(lp5084
S'The event handler delete dialog'
p5085
assS'code-editor.actions'
p5086
(dp5087
g4
(lp5088
S'=code-edit.action.copy'
p5089
aS'=code-edit.action.copyappend'
p5090
aS'=code-edit.action.copytofile'
p5091
aS'=code-edit.action.cut'
p5092
aS'=code-edit.action.cutappend'
p5093
aS'=code-edit.deleteline'
p5094
aS'=code-edit.action.goto'
p5095
aS'=code-edit.action.indent'
p5096
aS'=code-edit.action.indentblock'
p5097
aS'=code-edit.action.outdentblock'
p5098
aS'=code-edit.action.paste'
p5099
aS'=code-edit.action.pastefile'
p5100
aS'=code-edit.poptolinenumber'
p5101
aS'&remembered line'
p5102
aS'=code-edit.action.pushlinenumber'
p5103
aS'&remembered line'
p5104
aS'=code-editor.colorization'
p5105
aS'=code-edit.action.swapwithtop'
p5106
aS'&remembered line'
p5107
aS'=code-edit.action.search'
p5108
aS'=code-edit.action.searchagain'
p5109
aS'=code-edit.searchandreplace'
p5110
aS'=code-edit.selectall'
p5111
asg6
S"{HCode Editor - Actions}\n\nThe various actions of the code editor are invoked by keys, menu choices or\nboth. Some of the very common operations have fixed key assignments. The rest\nare assigned to keys based on a scheme specified by the configuration file.\n\n{BActions with fixed key assignments}\n\n o The four cursor keys\n o PageUp, PageDown, Home and End\n o Delete, Backspace\n o Enter (aka 'return')\n\n{BActions with variable key assignments}\n\nt {lCopy=code-edit.action.copy} - Copy text to the clipboard,\nt {lCopy append=code-edit.action.copyappend} - Copy and append to the\n  clipboard.\nt {lCopy to file=code-edit.action.copytofile} - Copy selection to a file.\nt {lCut=code-edit.action.cut} - Cut text to the clipboard.\nt {lCut append=code-edit.action.cutappend} - Cut and append to the clipboard.\nt {lDelete one line=code-edit.deleteline} - Delete the line under the cursor.\nt {lGoto=code-edit.action.goto} - Goto a specific line number.\nt {lIndent=code-edit.action.indent} - Insert spaces until we are on an indent\n  multiple.\nt {lIndent block=code-edit.action.indentblock} - Indent an entire block of\n  text.\nt {lOutdent block=code-edit.action.outdentblock} - Outdent an entire block of\n  text.\nt {lPaste=code-edit.action.paste} - Insert the clipboard at the current\n  location.\nt {lPaste file=code-edit.action.pastefile} - Insert a file into the code.\nt {lPop to line number=code-edit.poptolinenumber} - Goto the most recent\n  &remembered line.\nt {lPush line number=code-edit.action.pushlinenumber} - Add current line to\n  list of &remembered lines\nt {lRestart colorizer=code-editor.colorization} - Restart the colorizer from\n  the first visible line.\nt {lSwap with top=code-edit.action.swapwithtop} - Flip between the current\n  and the &remembered line.\nt {lSearch=code-edit.action.search} - Initiate a new search.\nt {lSearch again=code-edit.action.searchagain} - Continue an existing search.\nt {lSearch and replace=code-edit.searchandreplace} - Initiate a search and\n  replace operation.\nt {lSelect all=code-edit.selectall} - Select all text."
p5112
sg8
(lp5113
S'editor actions'
p5114
asg10
(lp5115
S'2005/04/07'
p5116
asg12
I0
sg13
(lp5117
sg15
(lp5118
S'Code editor actions and key bindings'
p5119
assS'wid.mainmenubar.baddrop'
p5120
(dp5121
g4
(lp5122
S'=form.main.info'
p5123
aS'&trash bin'
p5124
aS'=wid.mainmenubar.treatise'
p5125
asg6
S"{HPmw.MainMenuBar dropped on non-toplevel form}\n\nYou just dropped a {gPmw.MainMenuBar} widget on a form which is neither the\nmain-form of the main-module (it's {Lspecial=form.main.info}) nor a\n{fToplevel} (which is where MainMenuBar widgets belong).\n\nWhile this isn't causing any immediate harm, neither is it likely to do any\ngood and probably the best course of action is to drag this {fMainMenuBar}\nwidget instance to the &trash bin.\n\nThere is also {La brief treatise on MainMenuBars=wid.mainmenubar.treatise}."
p5126
sg8
(lp5127
sg10
(lp5128
S'2006/03/27'
p5129
asg12
I0
sg13
(lp5130
sg15
(lp5131
ssS'wid.tkinter.label.opt.cursor'
p5132
(dp5133
g4
(lp5134
S'&cursor'
p5135
asg6
S'>option.cursor.generic "Label"'
p5136
sg8
(lp5137
sg10
(lp5138
sg12
I0
sg13
(lp5139
sg15
(lp5140
ssS'layoutarea.formtab'
p5141
(dp5142
g4
(lp5143
S'&layout area'
p5144
aS'&form'
p5145
aS'&project'
p5146
aS'&form'
p5147
aS'&form'
p5148
aS'&layout editor'
p5149
aS'&code editor'
p5150
aS'&form'
p5151
aS'=formseedialog'
p5152
asg6
S'\n{HLayout Area - Form Tabs}: {p$imgpr-help-FormTabs.ppm}\n\nThese tabs are part of the &Layout Area. Each &form in the &project has a\nname, and the tabs show the names of some or all of the project\'s &forms. At\nany give time one tab is selected (raised and a lighter color) and all the\nrest are not selected (not raised and a darker color).\n\no Clicking on a presently unselected tab will select that tab and bring the\n  corresponding &form to the front.\n\no Clicking on the presently selected tab keeps it selected and swaps between\n  the &layout editor and the &code editor. You can also use the \n  {G$tActionFormSwapCodeLayout} key or\n  the {gForms..Swap Text/Lauout} menu choice to swap between visual\n  respresentation and code.\n\nNote that not all &forms in a &project will necessarily have a tab. Exactly\nwhich forms are shown in tabs is controlled by the main menu "{lForms/Select\nforms to see=formseedialog}" choice.'
p5153
sg8
(lp5154
sg10
(lp5155
S'2005/03/22'
p5156
asg12
I0
sg13
(lp5157
sg15
(lp5158
S'The form tabs in the layout area'
p5159
assS'wid.pmw.panedwidget.opt.separatorrelief'
p5160
(dp5161
g4
(lp5162
S'&default'
p5163
asg6
S"{HPanedWidget - separatorrelief}\n\nSpecifies the relief of the lines separating the panes. The &default is\n'sunken'."
p5164
sg8
(lp5165
sg10
(lp5166
S'2006/03/21'
p5167
asg12
I0
sg13
(lp5168
sg15
(lp5169
ssS'wid.pmw.counter.opt.labelmargin'
p5170
(dp5171
g4
(lp5172
sg6
S">option.pmw.labelmargin.generic 'Counter'"
p5173
sg8
(lp5174
sg10
(lp5175
sg12
I0
sg13
(lp5176
sg15
(lp5177
ssS'wid.tkinter.entry.opt.validatecommand'
p5178
(dp5179
g4
(lp5180
sg6
S'>option.validatecommand.generic "Entry"'
p5181
sg8
(lp5182
sg10
(lp5183
sg12
I0
sg13
(lp5184
sg15
(lp5185
ssS'wid.tkinter.radiobutton.opt.borderwidth'
p5186
(dp5187
g4
(lp5188
sg6
S'>option.borderwidth.generic "Radiobutton"'
p5189
sg8
(lp5190
sg10
(lp5191
sg12
I0
sg13
(lp5192
sg15
(lp5193
ssS'buffet.widget.scrollbar'
p5194
(dp5195
g4
(lp5196
sg6
S'>buffet.widget.generic "Scrollbar"'
p5197
sg8
(lp5198
sg10
(lp5199
sg12
I0
sg13
(lp5200
sg15
(lp5201
ssS'bind-editor.abbreviation'
p5202
(dp5203
g4
(lp5204
S'&bind editor'
p5205
aS'&event'
p5206
aS'&event'
p5207
aS'&event'
p5208
aS'&event'
p5209
aS'&bind wizard'
p5210
aS'&binding'
p5211
aS'&recommend'
p5212
aS'&bind wizard'
p5213
aS'&event'
p5214
aS'&event'
p5215
asg6
S'{HBind Editor - Event Description Abbreviation}\n\nThe &bind editor displays an abbreviated version{f[1]} of the &event description because\nfull &event description strings can be rather lengthy at which point they take up an\nannoying amount of real estate on the screen. The abbreviation is of the form:\n\n  t {GEvent_Detail_Modifiers}\n\no {GEvent}\n   is a length limited version of the actual &event: "Actvte" for Activate, "KeyRel" for\n  KeyRelease and so on. The full list is shown below.\no {GDetail}\n   is the key (for Key events) or the button (for Mouse events). If there is no Detail and\n  no Modifiers then this section is omitted.\no {GModifiers}\n   are single letter codes for the various possible modifiers, as listed below. If there are\n  no modifiers, this section is omitted.\n\nTo see the full event string, place the mouse cursor over abbreviation and hold it still for\na second.\n\n{BSome Examples}\n {f\nt Full string:  <ButtonPress-2>\nt Abbreviation: Button_2\n\nt Full string:  <Control-Shift-KeyRelease-Delete>\nt Abbreviation: KeyRel_Delete_CS}\n\n{BThe Abbreviations}{g\n\nt -------Events-------      --Modifiers--\nt Full           Short      Full    Short}{f\n\nt Activate       Actvte     Alt       A\nt ButtonPress    Button     Any       N\nt ButtonRelease  ButRel     Control   C\nt Configure      Config     Double    D\nt Deactivate     Deact      Lock      L\nt Destroy        Dstry      Shift     S\nt Enter          Enter      Triple    T\nt Expose         Expose\nt FocusIn        FocIn\nt FocusOut       FocOut\nt KeyPress       Key\nt KeyRelease     KeyRel\nt Leave          Leave\nt Map            Map\nt Motion         Motion\nt Unmap          Unmap\nt Visibility     Vis}\n\n- - -\n {b[1]} Technically the &event string is abbreviated for display only if you used the &bind\nwizard to create the &binding. Assuming you heed our &recommendation to use the &bind wizard\nthen all &event strings will be abbreviated. If you create an &event string manually then\nthe we don\'t mess with it and the entire string (or as much of it as fits) is shown.'
p5216
sg8
(lp5217
sg10
(lp5218
S'2005/03/17'
p5219
asg12
I0
sg13
(lp5220
sg15
(lp5221
S'Event description abbreviations used in the bind editor.'
p5222
assS'wid.tkinter.menubutton.opt.image'
p5223
(dp5224
g4
(lp5225
S'&image'
p5226
asg6
S'{HMenubutton - image}\n\nAn &image to be displayed on this Menubutton (instead of text). If you supply\nboth text and image options, then the text option is ignored and the image\noption is used.'
p5227
sg8
(lp5228
sg10
(lp5229
S'2005/04/19'
p5230
asg12
I0
sg13
(lp5231
sg15
(lp5232
ssS'option.highlightbackground.generic'
p5233
(dp5234
g4
(lp5235
S'&color'
p5236
aS'&focus'
p5237
asg6
S'{H@0 - highlightbackground}\n\nThe &color of the &focus highlight when this @0 does not have the focus.'
p5238
sg8
(lp5239
sg10
(lp5240
S'2005/03/02'
p5241
asg12
I0
sg13
(lp5242
sg15
(lp5243
ssS'wid.pmw.scrolledframe.opt.borderframe'
p5244
(dp5245
g4
(lp5246
sg6
S'{HScrolledFrame - borderframe component}\n\nA frame widget which snuggly fits around the clipper, to give the appearance\nof a border. It is created with a border so that the clipper, which is\ncreated without a border, looks like it has a border.'
p5247
sg8
(lp5248
sg10
(lp5249
S'2006/03/22'
p5250
asg12
I0
sg13
(lp5251
sg15
(lp5252
ssS'wid.pmw.scrolledcanvas.opt.border-frame'
p5253
(dp5254
g4
(lp5255
S'&default'
p5256
asg6
S'{HScrolledCanvas - borderframe}\n\nInitialisation option. If true, the borderframe component will be created.\nThe &default is False.'
p5257
sg8
(lp5258
sg10
(lp5259
S'2006/03/22'
p5260
asg12
I0
sg13
(lp5261
sg15
(lp5262
ssS'wid.tkinter.text.opt.insertwidth'
p5263
(dp5264
g4
(lp5265
sg6
S'>option.insertwidth.generic "Text"'
p5266
sg8
(lp5267
sg10
(lp5268
sg12
I0
sg13
(lp5269
sg15
(lp5270
ssS'wid.tkinter.toplevel.opt.class_'
p5271
(dp5272
g4
(lp5273
S'&new mexico tech'
p5274
asg6
S'{HToplevel - class_}\n\nYou can give a Toplevel window a "class" name. Such names are matched against\nthe option database, so your application can pick up the user\'s configuration\npreferences (such as colors) by class name.\n\nFor example, you might design a series of popups called "screamers," and set\nthem all up with {gclass_} set to "Screamer". Then you can put a line in your\noption database like this:\n\nt *Screamer*background:red\n\nand then, if you use the {g.option_readfile()} method to read your option\ndatabase, all widgets with that class name will default to a red background.\nThis option is named {fclass_} because class is a reserved word in Python.\n\n$nmt'
p5275
sg8
(lp5276
sg10
(lp5277
S'2005/04/28'
p5278
asg12
I0
sg13
(lp5279
sg15
(lp5280
ssS'wid.tkinter.scale.opt.highlightthickness'
p5281
(dp5282
g4
(lp5283
sg6
S'>option.highlightthickness.generic "Scale"'
p5284
sg8
(lp5285
sg10
(lp5286
sg12
I0
sg13
(lp5287
sg15
(lp5288
ssS'wid.pmw.group.overview'
p5289
(dp5290
g4
(lp5291
sg6
S'{HWhat is: A Group widget}\n\nThis megawidget consists of an interior frame with an exterior ring border\nand an identifying tag displayed over the top edge of the ring. The\nprogrammer can create other widgets within the interior frame.'
p5292
sg8
(lp5293
sg10
(lp5294
S'2006/03/19'
p5295
asg12
I0
sg13
(lp5296
sg15
(lp5297
S'What is: A Group widget'
p5298
assS'wid.tkinter.listbox.opt.relief'
p5299
(dp5300
g4
(lp5301
sg6
S'>option.relief.generic "Listbox"'
p5302
sg8
(lp5303
sg10
(lp5304
sg12
I0
sg13
(lp5305
sg15
(lp5306
ssS'option.elementborderwidth.generic'
p5307
(dp5308
g4
(lp5309
sg6
S'{H@0 - elementborderwidth}\n\nThe width of the borders around the arrowheads and slider. The default is\n{gelementborderwidth = -1}, which means to use the value of the\n{gborderwidth} option.'
p5310
sg8
(lp5311
sg10
(lp5312
S'2005/03/02'
p5313
asg12
I0
sg13
(lp5314
sg15
(lp5315
ssS'new-project-details'
p5316
(dp5317
g4
(lp5318
S'&project'
p5319
aS'&project'
p5320
aS'&module'
p5321
aS'&project'
p5322
aS'&form'
p5323
aS'&module'
p5324
aS'&module'
p5325
aS'&form'
p5326
aS'&module'
p5327
aS'&form'
p5328
aS'&module'
p5329
aS'&form'
p5330
aS'&module'
p5331
aS'=form.main.info'
p5332
aS'&form'
p5333
aS'&project'
p5334
asg6
S'{HNew project - details}\n\nA newly created &project is complete and ready to run. It doesn\'t do much,\nbut it will run. For the sake of example lets assume you have asked to\ncreate a new project named "{fParrot}"; here\'s what happens:\n\n n An empty &project named "{fParrot}" is created.\n\n n A primary &module named "{fParrot}" is added to the &project. \n\n n A &form named "{fParrot}", which derives from Tkinter {gFrame}, is\n   added to the primary &module.\n\n n All &modules have a "main code area". Down at the bottom of the main\n   code area of module "{gParrot}" we place a few lines of code whose job\n   is to get the application going with &form "{gParrot}" filling the\n   toplevel window of our application.\n\nThus the project is complete and ready to run. A few notes on this\nprocess:\n\n o The project, the primary &module and the main &form of the primary\n   &module all share the same name. To rename one of them is to rename all\n   of them. The main &form of the primary &module is special; click\n   {Lhere for details.=form.main.info}\n\n o The code which is automatically supplied at the bottom of the main code\n   area of the primary &form is not cast in stone. There are many ways of\n   getting a Tk application off the ground and if you prefer a different\n   way then by all means change things to your heart\'s content.\n\n o The code that appears at the bottom of the main code area comes from\n   the file {grapyd.template}. If you know what you are doing and feel so\n   inclined then dive in and modify it as you see fit. Any changes you\n   make to this file will apply only to &projects created after the\n   changes.'
p5335
sg8
(lp5336
sg10
(lp5337
S'2006/01/28'
p5338
asg12
I0
sg13
(lp5339
sg15
(lp5340
S'What happens at new project time'
p5341
assS'wid.tkinter.text.opt.selectforeground'
p5342
(dp5343
g4
(lp5344
sg6
S'>option.selectforeground.generic "Text","text"'
p5345
sg8
(lp5346
sg10
(lp5347
sg12
I0
sg13
(lp5348
sg15
(lp5349
ssS'wid.tkinter.canvas.opt.confine'
p5350
(dp5351
g4
(lp5352
sg6
S'>option.confine.generic "Canvas"'
p5353
sg8
(lp5354
sg10
(lp5355
sg12
I0
sg13
(lp5356
sg15
(lp5357
ssS'code-edit.action.forget'
p5358
(dp5359
g4
(lp5360
S'&remembered line'
p5361
aS'&editor actions'
p5362
asg6
S'{HCode editor - Forget}\n\n Key:   None\n Menu: {fEdit/Forget}\n\nThe code editor keeps a stack of &remembered line numbers. This command tells\nit to forget any lines that have been remembered. Handy if you have a lot of\nline numbers on the stack that are no longer needed.\n\nCode &editor actions'
p5363
sg8
(lp5364
sg10
(lp5365
S'2006/01/267'
p5366
asg12
I0
sg13
(lp5367
sg15
(lp5368
ssS'wid.tkinter.text.opt.insertbackground'
p5369
(dp5370
g4
(lp5371
sg6
S'>option.insertbackground.generic "Text"'
p5372
sg8
(lp5373
sg10
(lp5374
sg12
I0
sg13
(lp5375
sg15
(lp5376
ssS'wid.tkinter.menu.opt.tearoff'
p5377
(dp5378
g4
(lp5379
sg6
S'>option.tearoff.generic "Menu"'
p5380
sg8
(lp5381
sg10
(lp5382
sg12
I0
sg13
(lp5383
sg15
(lp5384
ssS'code-edit.action.pushlinenumber'
p5385
(dp5386
g4
(lp5387
S'&remembered line'
p5388
aS'&editor actions'
p5389
asg6
S'{HCode editor - Push line number}\n\n Key:   $tActionPushLineNumber\n Menu: {fEdit/Push line number}\n \nPush the number of the current line onto the stack of &remembered line numbers. \n\nSince this is a stack you can push as many line numbers as are necessary and\nstep back through them when appropriate.\n\nCode &editor actions'
p5390
sg8
(lp5391
sg10
(lp5392
S'2005/04/07'
p5393
asg12
I0
sg13
(lp5394
sg15
(lp5395
ssS'wid.pmw.timecounter.opt.name'
p5396
(dp5397
g4
(lp5398
sg6
S">option.name.generic 'TimeCounter'"
p5399
sg8
(lp5400
sg10
(lp5401
sg12
I0
sg13
(lp5402
sg15
(lp5403
ssS'projects.overview'
p5404
(dp5405
g4
(lp5406
S'&module'
p5407
aS'&form'
p5408
aS'&module'
p5409
aS'&module'
p5410
aS'=layout.menu.project'
p5411
aS'&project'
p5412
aS'=project.files'
p5413
asg6
S'{hProjects - Overview}\n\nA project is the highest level of $$ organization.\n\n o A {bproject} consists of one or more &modules.\n\n o A {bmodule} consists of a main code area plus zero or more &forms.\n\n o A {bform} is a Python class representing a rectangular, visual entiry\n   which can contain frames and widgets.\n\nWorking on a $$ project goes like this:\n\n n You use the various $$ facilities to create widgets and write code in\n   forms.\n\n n When you want to try it, you ask $$ to "build" the project. For each\n   &module $$ gatheres up all the code from the main code area plus the code\n   from each of the forms and writes it to a python file which is in fact a\n   python module.\n\n n You run the primary &module of your project. Your project can be run\n   standalone or it can be run from inside $$. During development it is far\n   more convenient to run from inside $$ since, when an error is encountered,\n   the $$ error handler can take you directly to any of the lines in the\n   error chain.\n\nBuilding and running your project is handled by the {LProject\nMenu=layout.menu.project}.\n\nTo learn about the files involved in a $$ &project {Lclick\nhere=project.files}.'
p5414
sg8
(lp5415
S'project'
p5416
asg10
(lp5417
S'2005/05/25'
p5418
asg12
I0
sg13
(lp5419
sg15
(lp5420
S'$$ projects - an overview'
p5421
assS'bind.eventwizard.mousebuttons'
p5422
(dp5423
g4
(lp5424
S'&event'
p5425
asg6
S"{HEvent Wizard - Mouse Buttons}\n\nYour mouse &event can take place in response to a particular mouse button or in\nresponse to {bany} of the mouse buttons. Click one of the radio buttons to make\nyour selection.\n\nOnce that's done, click on the {gNext} button to continue the process.\n\nTo change a previous choice, click on the {GBackUp} button."
p5426
sg8
(lp5427
sg10
(lp5428
S'2005/03/13'
p5429
asg12
I0
sg13
(lp5430
sg15
(lp5431
S'Bind Event Wizard - Mouse Buttons'
p5432
assS'buffet.widget.text'
p5433
(dp5434
g4
(lp5435
sg6
S'>buffet.widget.generic "Text"'
p5436
sg8
(lp5437
sg10
(lp5438
sg12
I0
sg13
(lp5439
sg15
(lp5440
ssS'wid.tkinter.checkbutton.opt.indicatoron'
p5441
(dp5442
g4
(lp5443
sg6
S'>option.indicatoron.generic "Checkbutton"'
p5444
sg8
(lp5445
sg10
(lp5446
sg12
I0
sg13
(lp5447
sg15
(lp5448
ssS'wid.tkinter.button.opt.wraplength'
p5449
(dp5450
g4
(lp5451
sg6
S'>option.wraplength.generic "Button"'
p5452
sg8
(lp5453
sg10
(lp5454
sg12
I0
sg13
(lp5455
sg15
(lp5456
ssS'wid.tkinter.label.opt.width'
p5457
(dp5458
g4
(lp5459
sg6
S'>option.width.generic "Label"'
p5460
sg8
(lp5461
sg10
(lp5462
sg12
I0
sg13
(lp5463
sg15
(lp5464
ssS'forms.overview'
p5465
(dp5466
g4
(lp5467
S'&layout area'
p5468
aS'&code editor'
p5469
aS'=form.main.info'
p5470
aS'=forms.derivation.explained'
p5471
aS'&layout area'
p5472
aS'&layout area'
p5473
aS'&layout area'
p5474
aS'=howto.delete.form'
p5475
aS'&layout area'
p5476
aS'=howto.rename.form'
p5477
asg6
S'{HForms}\n\nForms are what $$ is all about.\n\n o Visually forms are rectangular areas which contain frames and widgets. You use\n   the &layout area to arrange the visual aspect of your form.\n\n o Programatically forms are Pythan classes which contain user written methods to\n   make things happen. You use the &code editor to look after the Python code for\n   your form.\n   \nNote: the main form of the main module of your project has a \n{Lfew special characteristics.=form.main.info}\n\nEach form has to derive, either {Ldirectly or\nindirectly=forms.derivation.explained}, from the widgets {gTkinter.Toplevel},\n{gTkinter.Frame}, {gPmw.ScrolledFrame} or equivalent.\n\nTo select which forms have tabs at the top of the &layout area, use the\n{gForms/Select-forms-to-work-on} menu choice.\n\nYou add new forms to a project by using the &layout area menu\n{gForms/Add-new-form-to-project}.\n\nYou change the class from which a form derives by using the &layout area menu\n{gForms/Set-"derive-from"-class}.\n\nYou {Ldelete a form=howto.delete.form} by using the &layout area menu\n{gForms/Delete-the-current-form}. Note that the entire form, including code,\nwidgets, bindings and so on, is deleted so think before you delete.\n\nYou {Lrename=howto.rename.form} a form by changing the name of the outermost frame\nof the form.'
p5478
sg8
(lp5479
S'form'
p5480
asg10
(lp5481
S'2005/05/18'
p5482
asg12
I0
sg13
(lp5483
sg15
(lp5484
S'$$ projects consist of one or more forms'
p5485
assS'wid.tkinter.text.opt.highlightcolor'
p5486
(dp5487
g4
(lp5488
sg6
S'>option.highlightcolor.generic "Text"'
p5489
sg8
(lp5490
sg10
(lp5491
sg12
I0
sg13
(lp5492
sg15
(lp5493
ssS'wid.tkinter.checkbutton.opt.wraplength'
p5494
(dp5495
g4
(lp5496
sg6
S'>option.wraplength.generic "Checkbutton"'
p5497
sg8
(lp5498
sg10
(lp5499
sg12
I0
sg13
(lp5500
sg15
(lp5501
ssS'wid.pmw.scrolledlistbox.opt.vscrollmode'
p5502
(dp5503
g4
(lp5504
sg6
S">option.pmw.vscrollmode.generic 'ScrolledListBox'"
p5505
sg8
(lp5506
sg10
(lp5507
sg12
I0
sg13
(lp5508
sg15
(lp5509
ssS'option.confine.generic'
p5510
(dp5511
g4
(lp5512
sg6
S'{H@0 - confine}\n\nIf true (the default) the @0 cannot be scrolled outside of the\n{fscrollregion}.'
p5513
sg8
(lp5514
sg10
(lp5515
S'2005/02/28'
p5516
asg12
I0
sg13
(lp5517
sg15
(lp5518
ssS'widget.rename.handlers.conflict'
p5519
(dp5520
g4
(lp5521
S'=bindassist.name-suggestion'
p5522
aS'=howto.rename.handler'
p5523
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form\nthe following event handler<0/s> reference<0s> widget "@0":\n\n@2\n\nNormally I would offer to change the name of the<0/se> handler<0/s> to\nreflect the new widget name BUT the following handler<1/s> already exist<1s>\nand renaming would thus cause a conflict:\n\n@6\n\nClick {bYes} to rename the handler<0/s> for which there is no conflict while\nleaving the rest alone.\n\nClick {bNo} to rename none of the handlers.\n\nNote that only event handlers with names of the\n{Lrecommended=bindassist.name-suggestion} form {gon_widget_whatever} are\nconsidered for automatic renaming. Non-standard event handler names are\nalways left as-is. If you wish to change them then you have to do the\n{Lrename=howto.rename.handler} manually.'
p5524
sg8
(lp5525
sg10
(lp5526
S'2006/02/06'
p5527
aS'@0 Old widget name'
p5528
aS'@1 New widget name'
p5529
aS'@2 List of old handler names'
p5530
aS'@3 Count of handlers (plural indicator 0)'
p5531
aS'@4 List of new handler names'
p5532
aS'@5 Count of conflicting handlers (plural indicator 1)'
p5533
aS'@6 List of conflicting handlers'
p5534
asg12
I0
sg13
(lp5535
I3
aI5
asg15
(lp5536
ssS'wid.pmw.timecounter.opt.downsecondarrow'
p5537
(dp5538
g4
(lp5539
sg6
S">wid.pmw.timecounter.arrow 'down','dec','second'"
p5540
sg8
(lp5541
sg10
(lp5542
sg12
I0
sg13
(lp5543
sg15
(lp5544
ssS'option.insertbackground.generic'
p5545
(dp5546
g4
(lp5547
S'&color'
p5548
asg6
S'{H@0 - insertbackground}\n\nThe &color of the insertion cursor. The default is black.'
p5549
sg8
(lp5550
sg10
(lp5551
S'2005/03/02'
p5552
asg12
I0
sg13
(lp5553
sg15
(lp5554
ssS'wid.pmw.scrolledfield.opt.text'
p5555
(dp5556
g4
(lp5557
S'&default'
p5558
asg6
S"{HScrolledField - text}\n\nSpecifies the text to display in the scrolled field. The &default is ''."
p5559
sg8
(lp5560
sg10
(lp5561
S'2006/03/22'
p5562
asg12
I0
sg13
(lp5563
sg15
(lp5564
ssS'option-state'
p5565
(dp5566
g4
(lp5567
sg6
S'{HState}\n\nDefault is {gNORMAL}. Set this to {GDISABLED} to gray out the widget and make\nit unresponsive. Has the value of {GACTIVE} when the mouse is over this\nwidget.'
p5568
sg8
(lp5569
S'state'
p5570
asg10
(lp5571
S'2005/02/28'
p5572
asg12
I0
sg13
(lp5573
sg15
(lp5574
S'State'
p5575
assS'wid.pmw.scrolledtext.opt.pyclass'
p5576
(dp5577
g4
(lp5578
sg6
S'>option.pyclass.generic "ScrolledText"'
p5579
sg8
(lp5580
sg10
(lp5581
sg12
I0
sg13
(lp5582
sg15
(lp5583
ssS'wid.pmw.counter.opt.repeatrate'
p5584
(dp5585
g4
(lp5586
sg6
S">option.pmw.repeatrate.generic 'Counter'"
p5587
sg8
(lp5588
sg10
(lp5589
sg12
I0
sg13
(lp5590
sg15
(lp5591
ssS'code-edit.action.indent'
p5592
(dp5593
g4
(lp5594
S'=code-editor.actions-tab'
p5595
aS'&config file'
p5596
aS'&editor actions'
p5597
asg6
S'{HCode editor - Indent}\n\n Key:   $tActionIndent\n Menu: {f-- none --}\n\nInserts spaces at the cursor position until the cursor lands on a multiple of\nthe indent amount.\n\nThis does {bnot} inject a, yuk, {ltab=code-editor.actions-tab} character into\nthe code.\n\nThe indent amount is set in the &config file.\n\nCode &editor actions'
p5598
sg8
(lp5599
sg10
(lp5600
S'2005/04/15'
p5601
asg12
I0
sg13
(lp5602
sg15
(lp5603
S'Code editor - Indent'
p5604
assS'code-edit.action.copy'
p5605
(dp5606
g4
(lp5607
S'&editor actions'
p5608
asg6
S'{HCode editor - Copy}\n\n Key:   $tActionCopy\n Menu: {fEdit/Copy}\n\nThe clipboard is cleared and then the currently selected text is copied to the\nclipboard.\n\nCode &editor actions'
p5609
sg8
(lp5610
sg10
(lp5611
S'2005/04/07'
p5612
asg12
I0
sg13
(lp5613
sg15
(lp5614
S'Code editor - Copy'
p5615
assS'wid.tkinter.label.opt.disabledforeground'
p5616
(dp5617
g4
(lp5618
sg6
S'>option.disabledforeground.generic "Label"'
p5619
sg8
(lp5620
sg10
(lp5621
sg12
I0
sg13
(lp5622
sg15
(lp5623
ssS'wid.tkinter.menu.opt.activeforeground'
p5624
(dp5625
g4
(lp5626
S'&color'
p5627
aS'&new mexico tech'
p5628
asg6
S'{HMenu - activeforeground}\n\nThe foreground &color that will appear on a choice when it is under the\nmouse.\n\n$nmt'
p5629
sg8
(lp5630
sg10
(lp5631
S'2005/04/19'
p5632
asg12
I0
sg13
(lp5633
sg15
(lp5634
ssS'load.filenotfound'
p5635
(dp5636
g4
(lp5637
sg6
S'{HCommand line file not found}\n\nHi. You just started $$ and specified "{g@0}" as the name of the project to\nload at startup but we didn\'t find a file of that name.\n\nNote that $$ project files always have the extension of {g.rpj} and if you\ndidn\'t supply an extension on the command line then one was supplied for you.\n\nIn any case we didn\'t find the file so now your choices are to either create\na new project or use the standard file selection dialog to pick an existing\nproject.'
p5638
sg8
(lp5639
sg10
(lp5640
S'2006/02/10'
p5641
aS'@0 - Name of the file we were looking for.'
p5642
asg12
I0
sg13
(lp5643
sg15
(lp5644
ssS'option.padx.generic'
p5645
(dp5646
g4
(lp5647
S'&dimension'
p5648
aS'&new mexico tech'
p5649
asg6
S'{H@0 - padx}\n\nA &dimensioned number which specifies the amount of additional padding left\nand right of the @1.\n\n$nmt'
p5650
sg8
(lp5651
sg10
(lp5652
S'2005/03/06'
p5653
asg12
I0
sg13
(lp5654
sg15
(lp5655
ssS'wid.tkinter.menu.opt.cursor'
p5656
(dp5657
g4
(lp5658
S'&new mexico tech'
p5659
asg6
S'{HMenu - cursor}\n\nThe cursor that appears when the mouse is over the choices, but only when the\nmenu has been torn off.\n\n$nmt'
p5660
sg8
(lp5661
sg10
(lp5662
S'2005/04/19'
p5663
asg12
I0
sg13
(lp5664
sg15
(lp5665
ssS'wid.pmw.radioselect.opt.command'
p5666
(dp5667
g4
(lp5668
sg6
S'{HRadioSelect - command}\n\nThis &command option specifies the &event &handler to call when one of the\nbuttons is clicked on or when invoke() is called.\n\nIn single selection mode, the function is called with a single argument,\nwhich is the name of the selected button.\n\nIn multiple selection mode, the function is called with the first argument\nbeing the name of the button and the second argument being true if the button\nis now selected or false if it is now deselected.'
p5669
sg8
(lp5670
sg10
(lp5671
S'2006/03/21'
p5672
asg12
I0
sg13
(lp5673
sg15
(lp5674
ssS'howto.new.handler.existing.binding'
p5675
(dp5676
g4
(lp5677
S'&binding'
p5678
aS'&command option'
p5679
aS'&event'
p5680
aS'&event'
p5681
aS'&handler'
p5682
aS'&binding'
p5683
aS'&binding'
p5684
aS'&binding'
p5685
aS'&command option'
p5686
aS'&bind editor'
p5687
aS'&option editor'
p5688
aS'&bind assist'
p5689
aS'&handler'
p5690
aS'&handler'
p5691
aS'&handler'
p5692
aS'&recommend'
p5693
aS'&handler'
p5694
aS'&handler'
p5695
aS'&handler'
p5696
aS'&event'
p5697
aS'&binding'
p5698
aS'&command option'
p5699
aS'&handler'
p5700
aS'&handler'
p5701
aS'&handler'
p5702
aS'&handler'
p5703
aS'=howto.rename.handler'
p5704
asg6
S'{HHow to: Create a new handler for an existing binding}\n\nThe situation is thus: Two or more &bindings or &command options refer to a\nsingle &event handler. You now want to create a new &event &handler\nspecifically for one of the existing &bindings while leaving all the other\n&bindings referring to the original handler. To accomplish this:\n\nn Find the &binding or &command option in question (in the &bind editor or\n  the &option editor) and click on it\'s {P$img/pr-msc-assist.ppm} "assist"\n  button. The &bind assist dialog pops up.\n\nn In the combo box just above the buttons, edit the &handler name to be the\n  name of the &handler you want to create (ie the name should be different\n  than the name of any existing &handler). We &recommend you use the standard\n  {gon_widget_whatever} form for for the new &handler name.\n\nn When you click {gOk} a dialog will pop up asking if you want to rename the\n  existing &handler (you don\'t) or create a new &handler specifically for\n  this &event. You do, so click the {GNew handler} button.\n\n- - - other cases - - -\n\nIf the &binding or &command option is the only reference to it\'s event\n&handler then this situation doesn\'t really come up. If you want to revised\nthe &handler then hack away: nobody else refers to the &handler so no harm\nwill be done. If you simply want to rename the &handler then that is {Leasily\ndone=howto.rename.handler}.'
p5705
sg8
(lp5706
sg10
(lp5707
S'2006/02/17'
p5708
asg12
I0
sg13
(lp5709
sg15
(lp5710
S'How to: Create a new handler for an existing binding'
p5711
assS'bind.orphan.handler'
p5712
(dp5713
g4
(lp5714
S'&binding'
p5715
aS'&event'
p5716
aS'&handler'
p5717
aS'&event'
p5718
aS'&handler'
p5719
aS'&binding'
p5720
aS'&command option'
p5721
aS'&form'
p5722
aS'&event'
p5723
aS'&handler'
p5724
aS'&event'
p5725
aS'&handler'
p5726
aS'&event'
p5727
aS'&handler'
p5728
aS'&binding'
p5729
aS'&command option'
p5730
aS'&event'
p5731
aS'&handler'
p5732
aS'&event'
p5733
aS'&handler'
p5734
aS'&event'
p5735
aS'&handler'
p5736
aS'&handler'
p5737
aS'&form'
p5738
aS'&event'
p5739
aS'&handler'
p5740
aS'&binding'
p5741
aS'&event'
p5742
aS'&handler'
p5743
asg6
S'{HOrphan event handler}\n\nYou just changed a &binding which used to refer to the &event &handler "@0"\nso it will now refer to existing &event &handler "@1".  I note that no other\n&binding nor &command option anywhere in the current &form refers to &event\n&handler "@0", so it may be redundant. The dialog box you pressed help on is\ngiving you the opportunity to delete &event &handler "@0" now.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that)\n  or if you plan to create new &bindings or &command options which will refer\n  to that &event &handler then clearly you want to choose {GKeep handler} to\n  retain the &event &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed\n  use for it then you might as well say {GDelete handler} to delete the\n  &handler rather than leaving unused code hanging around your &form.\n\no If you\'ve reconsidered and now don\'t want to change the &event &handler to\n  which this &binding pertains nor delete the &event &handler then click\n  {gCancel}.'
p5744
sg8
(lp5745
sg10
(lp5746
S'2005/05/14'
p5747
aS'@0 The event handler this binding used to refer to'
p5748
aS'@1 The event handler this binding will now refer to'
p5749
asg12
I0
sg13
(lp5750
sg15
(lp5751
ssS'wid.tkinter.label.opt.height'
p5752
(dp5753
g4
(lp5754
S'&default'
p5755
aS'&image'
p5756
aS'&bitmap'
p5757
aS'&dimension'
p5758
asg6
S'{HLabel - height}\n\nIf {gheight} remains at the &default value of {g0} then the Label will\nautomatically be sized to fit its content.\n\no If an &image or &bitmap is supplied for this Label, then {gheight} is a\n  &dimensioned number indicating the height of the Label. If you enter just\n  an integer, it is taken to be in pixels.\n\no If text (no image, no bitmap) is supplied for this Label, then {gheight} is\n  an integer indicating the height of the Label in lines.'
p5759
sg8
(lp5760
sg10
(lp5761
S'2005/04/16'
p5762
asg12
I0
sg13
(lp5763
sg15
(lp5764
ssS'wid.tkinter.canvas.opt.insertontime'
p5765
(dp5766
g4
(lp5767
sg6
S'>option.insertontime.generic "Canvas"'
p5768
sg8
(lp5769
sg10
(lp5770
sg12
I0
sg13
(lp5771
sg15
(lp5772
ssS'option.relief.generic'
p5773
(dp5774
g4
(lp5775
sg6
S'{H@0 - relief}\n\nThe type of border to draw around the @0. By way of example, here are five Tkinter.Buttons\nshowing the different types of relief:\n\n{P$imgpr-help-ReliefButtons.ppm}'
p5776
sg8
(lp5777
sg10
(lp5778
S'2005/03/06'
p5779
asg12
I0
sg13
(lp5780
sg15
(lp5781
ssS'wid.pmw.menubar.opt.balloon'
p5782
(dp5783
g4
(lp5784
sg6
S'{HMenuBar - balloon}\n\nSpecifies a Pmw.Balloon to display the help text for menu buttons and menu\nitems. If None, no help is displayed. If the balloon has an associated\nPmw.MessageBar, the help text will also be displayed there. The default is\nNone.'
p5785
sg8
(lp5786
sg10
(lp5787
S'2006/03/20'
p5788
asg12
I0
sg13
(lp5789
sg15
(lp5790
ssS'frame.popup'
p5791
(dp5792
g4
(lp5793
S'=howto.tidy.widgets'
p5794
aS'=frame.delete'
p5795
aS'=frame-properties-dialog'
p5796
aS'=layout-frame-insert'
p5797
aS'&form'
p5798
aS'&parking lot'
p5799
aS'&option editor'
p5800
asg6
S'{HLayout-area right-click popup menu}\n\nTo activate this menu move the cursor to be within the desired frame then click the right\nmouse button. This menu allows you to:\n\n o {LTidy=howto.tidy.widgets} the widgets within the frame\n o {LDelete=frame.delete} the frame and the widgets it contains\n o Set the {Lproperties=frame-properties-dialog} of the frame\n o {LInsert=Layout-Frame-Insert} a new frame along the side of an existing frame.\n\nNotes:\n\no If there are fewer than two widgets in the frame then by definition the widgets are already\n  tidy and in that case the "Tidy widgets" choice will be grayed out.\n\no The outermost frame is the form itself and you can\'t delete it (other than deleting the\n  entire &form). Thus if the current frame is the outermost frame then the "Delete frame"\n  choice is grayed out.\n\no In the case of nested frames, this menu works on the most deeply nested frame around the\n  cursor location. In order to delete a frame which has sub-frames you must first delete the\n  subframes. To delete a frame without losing it\'s widgets, temporarily move them onto the\n  &parking lot then delete the subframe.\n\no Frames are instances of widgets, and the option of all widget, including frame widgets, are\n  set using the &option editor, not via the right-click popup menu.'
p5801
sg8
(lp5802
sg10
(lp5803
S'2006/02/09'
p5804
asg12
I0
sg13
(lp5805
sg15
(lp5806
S'Layout-area right-click popup menu'
p5807
assS'project.files'
p5808
(dp5809
g4
(lp5810
S'&project'
p5811
aS'&module'
p5812
aS'&module'
p5813
aS'&project'
p5814
aS'&module'
p5815
aS'&form'
p5816
aS'&project'
p5817
aS'&project'
p5818
aS'&project'
p5819
aS'&module'
p5820
aS'&project'
p5821
aS'&project'
p5822
aS'&project'
p5823
aS'=layout.menu.project'
p5824
aS'&module'
p5825
aS'&project'
p5826
aS'&module'
p5827
aS'&project'
p5828
asg6
S'{HFiles used by a $$ project}\n\nEach $$ &project consists of:\n\n o A primary &module, plus\n o Zero or more additional &modules.\n\nThe &project, the main-&module and the main-&form of the main module \nalways share the same name.\n\nA &project is saved in a file with an extension of "{grpj}"\n({gr}apyd-{gp}ro{gj}ect). For example, if you have a &project named\n"Baffy" then all the information about that &project (including\ninformation about all &modules in the &project) would be stored in a file\nnamed "{gBaffy.rpj}". An {grpj} file isn\'t something you can run; it\'s\nsimply all the information that $$ has about a &project stuffed into a\nfile. In order to run a &project you have to "build" it, which is done\nfrom the {Lproject menu=layout.menu.project}.\n\nWhen a project is built, Python source files (which have an extension of\n"{g.py}") are generated for every &module in the project. If our\nhypothetical &project "{fBaffy}" has (over and above the main module which\nwould share the name "{fBaffy}") additional &modules named "{fSpam}" and\n"{fParrot}", then when built these python files would be generated:\n\nt {gBaffy.py}\nt {gSpam.py}\nt {gParrot.py}\n\nThen you run the file "{gBaffy.py}" and your &project is on the go.'
p5829
sg8
(lp5830
sg10
(lp5831
S'2005/05/26'
p5832
asg12
I0
sg13
(lp5833
sg15
(lp5834
S'Files used by a $$ project'
p5835
assS'wid.tkinter.text.opt.spacing3'
p5836
(dp5837
g4
(lp5838
sg6
S'>option.spacing3.generic "Text"'
p5839
sg8
(lp5840
sg10
(lp5841
sg12
I0
sg13
(lp5842
sg15
(lp5843
ssS'wid.tkinter.text.opt.spacing2'
p5844
(dp5845
g4
(lp5846
sg6
S'>option.spacing2.generic "Text"'
p5847
sg8
(lp5848
sg10
(lp5849
sg12
I0
sg13
(lp5850
sg15
(lp5851
ssS'option.spacing1.generic'
p5852
(dp5853
g4
(lp5854
S'&new mexico tech'
p5855
asg6
S'{H@0 - spacing1}\n\nThis option specifies how much extra vertical space is put above each line of\ntext. If a line wraps, this space is added only before the first line it\noccupies on the display.\n\n$nmt'
p5856
sg8
(lp5857
sg10
(lp5858
S'2005/04/04'
p5859
asg12
I0
sg13
(lp5860
sg15
(lp5861
ssS'wid.pmw.scrolledframe.overview'
p5862
(dp5863
g4
(lp5864
sg6
S'{HWhat is: A ScrolledFrame widget}\n\nA scrolled frame consists of a scrollable interior frame within a clipping\nframe. The programmer can create other widgets within the interior frame. If\nthe frame becomes larger than the surrounding clipping frame, the user can\nposition the frame using the horizontal and vertical scrollbars.\n\nThe scrollbars can be dynamic, which means that a scrollbar will only be\ndisplayed if it is necessary. That is, if the frame is smaller than the\nsurrounding clipping frame, the scrollbar will be hidden.'
p5865
sg8
(lp5866
sg10
(lp5867
S'2006/03/21'
p5868
asg12
I0
sg13
(lp5869
sg15
(lp5870
S'What is: A ScrolledFrame widget'
p5871
assS'wid.tkinter.menu.opt.pyclass'
p5872
(dp5873
g4
(lp5874
sg6
S'>option.pyclass.generic "Menu"'
p5875
sg8
(lp5876
sg10
(lp5877
sg12
I0
sg13
(lp5878
sg15
(lp5879
ssS'widget.rename.handlers.allconflict'
p5880
(dp5881
g4
(lp5882
S'=howto.rename.handler'
p5883
aS'&handler'
p5884
aS'&binding'
p5885
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form\nthe following event handler</s> reference<s> widget "@0":\n\n@2\n\nNormally I would offer to change the name</s> of <this/the> handler</s> to\nreflect the change of widget name but there already <is a/are> hander</s>,\nname</s> shown below, which would conflict with <such a/the> renamed\nhandler</s>, so there is nothing I can do.\n\n@4\n\nIf it seems appropriate you can always {Lrename=howto.rename.handler} the\n&handler</s> or revise the &binding</s> manually.'
p5886
sg8
(lp5887
sg10
(lp5888
S'2006/02/06'
p5889
aS'@0 Old widget name'
p5890
aS'@1 New widget name'
p5891
aS'@2 List of old handler names'
p5892
aS'@3 Count of handlers (plural indicator 0)'
p5893
aS'@4 List of conflicting handler names'
p5894
asg12
I0
sg13
(lp5895
I3
asg15
(lp5896
ssS'buffet.widget.scrolledtext'
p5897
(dp5898
g4
(lp5899
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledText",\'\',\'wid.pmw.scrolledtext.overview\''
p5900
sg8
(lp5901
sg10
(lp5902
sg12
I0
sg13
(lp5903
sg15
(lp5904
ssS'wid.tkinter.checkbutton.opt.bitmap'
p5905
(dp5906
g4
(lp5907
sg6
S'>option.bitmap.generic "Checkbutton"'
p5908
sg8
(lp5909
sg10
(lp5910
sg12
I0
sg13
(lp5911
sg15
(lp5912
ssS'wid.pmw.counter.opt.name'
p5913
(dp5914
g4
(lp5915
sg6
S">option.name.generic 'Counter'"
p5916
sg8
(lp5917
sg10
(lp5918
sg12
I0
sg13
(lp5919
sg15
(lp5920
ssS'wid.pmw.messagebar.opt.messagetypes'
p5921
(dp5922
g4
(lp5923
S'&default'
p5924
aS'=option.verbatim'
p5925
asg6
S"{HMessageBar - messagetypes}\n\nThis defines what message types are supported by the message bar and the\ncharacteristics of those message types. It is a dictionary where the key is a\nstring specifying a message type and the value is a tuple of four integers,\n(priority, showtime, bells, logmessage), where priority is the rank of the\nmessage type, showtime is the number of seconds to display messages of this\nmessage type, bells is the number of audible bells to ring and logmessage is\na boolean specifying whether this message should be logged for retrieval\nlater. Messages with a higher priority are displayed in preference to those\nwith lower priority. If a high priority message times out (because it has\nbeen displayed for showtime  seconds), then a lower priority message may be\ndisplayed. A showtime of 0 means that the message will never time out and is\nuseful for displaying messages describing the current state of the\napplication as opposed to messages describing events. Logging is not\ncurrently implemented. The &default is\n\nt {{\nt {f'systemerror'  : (5, 10, 2, 1),\nt 'usererror'    : (4, 5, 1, 0),\nt 'busy'         : (3, 0, 0, 0),\nt 'systemevent'  : (2, 5, 0, 0),\nt 'userevent'    : (2, 5, 0, 0),\nt 'help'         : (1, 5, 0, 0),\nt 'state'        : (0, 0, 0, 0),}\nt }\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}."
p5926
sg8
(lp5927
sg10
(lp5928
S'2006/03/20'
p5929
asg12
I0
sg13
(lp5930
sg15
(lp5931
ssS'buffet.widget.listbox'
p5932
(dp5933
g4
(lp5934
sg6
S'>buffet.widget.generic "Listbox"'
p5935
sg8
(lp5936
sg10
(lp5937
sg12
I0
sg13
(lp5938
sg15
(lp5939
ssS'wid.pmw.radioselect.opt.selectmode'
p5940
(dp5941
g4
(lp5942
S'&default'
p5943
asg6
S"{HRadioSelect - selectmode}\n\nSpecifies whether a single button or multiple buttons can\nbe selected at one time. If 'single', clicking on an unselected button\nselects it and deselects all other buttons. If 'multiple', clicking on an\nunselected button selects it and clicking on a selected button deselects it.\nThis option is ignored if buttontype is 'radiobutton' or 'checkbutton'. The\n&default is 'single'."
p5944
sg8
(lp5945
sg10
(lp5946
S'2006/03/21'
p5947
asg12
I0
sg13
(lp5948
sg15
(lp5949
ssS'code-edit.action.bottom'
p5950
(dp5951
g4
(lp5952
S'&editor actions'
p5953
asg6
S'{HCode editor - Last Line}\n\n Key:   $tActionBottom\n Menu: {fEdit/Last Line}\n\nMoves to the last line of code.\n\nCode &editor actions'
p5954
sg8
(lp5955
sg10
(lp5956
S'2006/01/26'
p5957
asg12
I0
sg13
(lp5958
sg15
(lp5959
S'Code editor - goto last line'
p5960
assS'wid.tkinter.text.opt.borderwidth'
p5961
(dp5962
g4
(lp5963
sg6
S'>option.borderwidth.generic "Text"'
p5964
sg8
(lp5965
sg10
(lp5966
sg12
I0
sg13
(lp5967
sg15
(lp5968
ssS'wid.pmw.timecounter.opt.hourentryfield'
p5969
(dp5970
g4
(lp5971
sg6
S'{HTimeCounter - hourentryfield}\n\nThe entry field where the hours are entered and displayed.'
p5972
sg8
(lp5973
sg10
(lp5974
S'2006/03/24'
p5975
asg12
I0
sg13
(lp5976
sg15
(lp5977
ssS'resizeknobs'
p5978
(dp5979
g4
(lp5980
S'&bind editor'
p5981
asg6
S"{bResize Knobs}   {P$imgpr-help-Resize.ppm}\n\nThese are the &bind editor's resize knobs, both of which can be dragged left\nor right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p5982
sg8
(lp5983
sg10
(lp5984
S'2005/03/04'
p5985
asg12
I0
sg13
(lp5986
sg15
(lp5987
ssS'wid.tkinter.radiobutton.opt.justify'
p5988
(dp5989
g4
(lp5990
sg6
S'>option.justify.generic "Radiobutton"'
p5991
sg8
(lp5992
sg10
(lp5993
sg12
I0
sg13
(lp5994
sg15
(lp5995
ssS'wid.pmw.buttonbox.opt.frame'
p5996
(dp5997
g4
(lp5998
sg6
S'>option.pmw.frame.generic "ButtonBox","Buttons","add() and insert() methods"'
p5999
sg8
(lp6000
sg10
(lp6001
sg12
I0
sg13
(lp6002
sg15
(lp6003
ssS'wid.tkinter.frame.opt.nametop'
p6004
(dp6005
g4
(lp6006
sg6
S">option.nametop.generic 'Frame'"
p6007
sg8
(lp6008
sg10
(lp6009
sg12
I0
sg13
(lp6010
sg15
(lp6011
ssS'load.missing.widgets'
p6012
(dp6013
g4
(lp6014
S'&maintained'
p6015
asg6
S'\n{HMissing library module noticed at load time}\n\nAs mentioned in the dialog, the module<0/s> {g@3} <0was/were> available the last time the @4\nwas saved but <0is/are> not available now. As shown in the following list, there <1is/are>\n@2 widget instance<1/s> which <1was/were> drawn from the missing module<0/s>.\n\n@0\n\nIn the list above\n\n{bDmodule} is the name of the previously available module which is now missing.\n\n{bPmodule} is the name of the module within this project in which the reference occurred. If\nthe error was detected while importing a form, this will be omitted.\n\n{bForm} is the name of the form within that module in which the reference occurred.\n\n{bWidget} is the type of widget involved.\n\n{bName} is the name by which the widget-instance was known inside the form.\n\nIf you choose {gDelete Widgets} then any widgets in the @4 which were from the missing\nmodule<0/s> will be deleted. All code which is &maintained by $$ will be in good shape after\nthe deletion but any of your code that referenced the deleted widgets will need to be\nrevised.\n\nIf you choose {gCancel} then loading of the @4 is cancelled.'
p6016
sg8
(lp6017
sg10
(lp6018
S'2006/03/28'
p6019
aS'@0 The list of references'
p6020
aS'@1 The number of donor modules missing'
p6021
aS'@2 The number of widget instances involved'
p6022
aS'@3 List of missing donor modules'
p6023
aS"@4 'project' or 'form'"
p6024
asg12
I0
sg13
(lp6025
I1
aI2
asg15
(lp6026
ssS'wid.pmw.labeledwidget.opt.pyclass'
p6027
(dp6028
g4
(lp6029
sg6
S'>option.pyclass.generic "LabeledWidget"'
p6030
sg8
(lp6031
sg10
(lp6032
sg12
I0
sg13
(lp6033
sg15
(lp6034
ssS'wid.pmw.notebook.opt.raisecommand'
p6035
(dp6036
g4
(lp6037
S'&command option'
p6038
aS'&event'
p6039
aS'&handler'
p6040
asg6
S'{HNoteBook - raisecommand}\n\nThis &command option specifies the &event &handler to call when a new page is\nselected. The function is called with a single argument, which is the name of\nthe selected page.'
p6041
sg8
(lp6042
sg10
(lp6043
S'2006/03/21'
p6044
asg12
I0
sg13
(lp6045
sg15
(lp6046
ssS'wid.tkinter.scale.opt.showvalue'
p6047
(dp6048
g4
(lp6049
sg6
S'>option.showvalue.generic "Scale"'
p6050
sg8
(lp6051
sg10
(lp6052
sg12
I0
sg13
(lp6053
sg15
(lp6054
ssS'option.scrollregion.generic'
p6055
(dp6056
g4
(lp6057
S'&new mexico tech'
p6058
asg6
S'{H@0 - scrollregion}\n\nA tuple of four integers (w, n, e, s) that defines over how large an area the\n@0 can be scrolled, where {bw} is the left side, {bn} the top, {be} the right\nside, and {bs} the bottom.\n\n$nmt'
p6059
sg8
(lp6060
sg10
(lp6061
S'20065/03/06'
p6062
asg12
I0
sg13
(lp6063
sg15
(lp6064
ssS'wid.tkinter.text.opt.setgrid'
p6065
(dp6066
g4
(lp6067
sg6
S'>option.setgrid.generic "Text"'
p6068
sg8
(lp6069
sg10
(lp6070
sg12
I0
sg13
(lp6071
sg15
(lp6072
ssS'wid.pmw.panedwidget.opt.separatorthickness'
p6073
(dp6074
g4
(lp6075
S'&default'
p6076
asg6
S'{HPanedWidget - separatorthickness}\n\nSpecifies the thickness of the lines separating the panes. The &default is 2.'
p6077
sg8
(lp6078
sg10
(lp6079
S'2006/03/21'
p6080
asg12
I0
sg13
(lp6081
sg15
(lp6082
ssS'wid.tkinter.text.opt.yscrollcommand'
p6083
(dp6084
g4
(lp6085
sg6
S'>option.yscrollcommand.generic "Text"'
p6086
sg8
(lp6087
sg10
(lp6088
sg12
I0
sg13
(lp6089
sg15
(lp6090
ssS'wid.pmw.menubar.opt.padx'
p6091
(dp6092
g4
(lp6093
sg6
S">option.pmw.padx.generic 'MenuBar', 'menu button', '0'"
p6094
sg8
(lp6095
sg10
(lp6096
sg12
I0
sg13
(lp6097
sg15
(lp6098
ssS'command-option.whatis'
p6099
(dp6100
g4
(lp6101
S'&option editor'
p6102
aS'&binding'
p6103
aS'&binding'
p6104
aS'&bind editor'
p6105
aS'&option editor'
p6106
aS'&binding'
p6107
aS'&event'
p6108
asg6
S'{HWhat is: a "command option"}\n\nWidgets have options and setting those options is handled by the &option\neditor.\n\nMost options involve setting a value (for example color, width, thickness\netc) while other options involve making a choice (the {fanchor} option for\nexample}.\n\n"Command" options are those options which reference a command - that is, a\npython function - to be executed on certain specified occasions. For example\nthe {fbutton} widget has an option named "command" which specifies a function\nto be called when the button is pressed.\n\nCommand options are closely related to &bindings but while &bindings are\nhandled by the &bind editor, command options are handled by the &option\neditor.\n\nFrom a functional point of view the only difference between &bindings and\ncommand options is that the function called due to a binding receives an\n&event argument while a function called due to a command option \nreceives options that vary depending on the nature of the command option.'
p6109
sg8
(lp6110
S'command option'
p6111
asg10
(lp6112
S'2006/02/08'
p6113
asg12
I0
sg13
(lp6114
sg15
(lp6115
S'What is: A command option'
p6116
assS'wid.tkinter.scale.opt.width'
p6117
(dp6118
g4
(lp6119
S'&new mexico tech'
p6120
asg6
S'{HScale - width}\n\nThe width of the trough part of the widget.\n\nThis is the x dimension for vertical scales and the y dimension for\nhorizontal scales.\n\n$nmt'
p6121
sg8
(lp6122
sg10
(lp6123
S'2005/04/27'
p6124
asg12
I0
sg13
(lp6125
sg15
(lp6126
ssS'wid.tkinter.menu.opt.takefocus'
p6127
(dp6128
g4
(lp6129
sg6
S'>option.takefocus.generic "Menu"'
p6130
sg8
(lp6131
sg10
(lp6132
sg12
I0
sg13
(lp6133
sg15
(lp6134
ssS'wid.pmw.entryfield.opt.entry'
p6135
(dp6136
g4
(lp6137
sg6
S'{HEntryField - entry}\n\nThe widget where the user enters text. Long text can be scrolled\nhorizontally by dragging with the middle mouse button.'
p6138
sg8
(lp6139
sg10
(lp6140
S'2006/03/19'
p6141
asg12
I0
sg13
(lp6142
sg15
(lp6143
ssS'option.to.generic'
p6144
(dp6145
g4
(lp6146
S'&new mexico tech'
p6147
asg6
S"{H@0 - to}\n\nA float or integer value that defines one end of the @0's range; the other\nend is defined by the {gfrom_} option. The {gto} value can be either greater\nthan or less than the {gfrom_} value. For vertical scales, the {gto} value\ndefines the bottom of the scale; for horizontal scales, the right end.\n\n$nmt"
p6148
sg8
(lp6149
sg10
(lp6150
S'2005/04/05'
p6151
asg12
I0
sg13
(lp6152
sg15
(lp6153
ssS'code-editor.colorization'
p6154
(dp6155
g4
(lp6156
S'&config file'
p6157
aS'=code-editor.recolorizing-long'
p6158
asg6
S"{HCode Editor - Colorization}\n\nYour code is automatically colorized as you type it. The colors used are set in\nthe &config file so you can change them if you wish.\n\nThe colorizer runs in the background. After you have loaded a large file it may\ntake a while for the entire file to be colorized but this isn't usually a\nconcern since as you jump around in the file the colorizer automatically follows\nand starts colorizing at your present location.\n\n{bColorizing and triple quotes}\n\nMost colorizing issues are local to a single line. A change in triple quotes,\nhowever, can easily affect text thousands of lines past where the change was\nmade. If colorizing was blindingly fast then we would simply recolorize the\nentire file every time there was a change in triple quotes. In fact,\nrecolorizing is not blindingly fast and hence the editor uses heuristics to\navoid unnecessary recolorization.\n\nThe short story is that, although uncommon, it is possible to get the\ncolorization out of whack with regard to triple quotes and if this happens, go\nto the top of the out of whack area and press the {gRecolorization}\n($tActionRecolorize) key at which point recolorization will start from the first\nline visible on the screen. If you want the long story, {Lclick\nhere=code-editor.recolorizing-long}."
p6159
sg8
(lp6160
sg10
(lp6161
S'2005/04/06'
p6162
asg12
I0
sg13
(lp6163
sg15
(lp6164
S"The code editor's colorizer"
p6165
assS'buffet.widget.notebook'
p6166
(dp6167
g4
(lp6168
sg6
S'>buffet.widget.generic "Pmw.NoteBook", \'\', \'pmw.wid.notebook.overview\''
p6169
sg8
(lp6170
sg10
(lp6171
sg12
I0
sg13
(lp6172
sg15
(lp6173
ssS'wid.pmw.optionmenu.opt.items'
p6174
(dp6175
g4
(lp6176
S'=option.verbatim'
p6177
asg6
S'{HOptionMenu - items}\n\nA sequence of strings containing the initial items to be displayed in the\nmenu component.\n\nThis should be either the name of a variable containing the sequence (which\nmust already exist when the code to create the OptionMenu instance is\nexecuted), or an actual sequence enclosed squard brackets or parenthesis as\nappropriate.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.'
p6178
sg8
(lp6179
sg10
(lp6180
S'2006/03/21'
p6181
asg12
I0
sg13
(lp6182
sg15
(lp6183
ssS'wid.pmw.scrolledtext.opt.labelpos'
p6184
(dp6185
g4
(lp6186
sg6
S">option.pmw.labelpos.generic 'ScrolledText'"
p6187
sg8
(lp6188
sg10
(lp6189
sg12
I0
sg13
(lp6190
sg15
(lp6191
ssS'buffet.widget.timecounter'
p6192
(dp6193
g4
(lp6194
sg6
S'>buffet.widget.generic2 "Pmw.TimeCounter",\'\',\'wid.pmw.timecounter.overview\''
p6195
sg8
(lp6196
sg10
(lp6197
sg12
I0
sg13
(lp6198
sg15
(lp6199
ssS'code-edit.action.search'
p6200
(dp6201
g4
(lp6202
S'=search.dialog'
p6203
aS'&editor actions'
p6204
asg6
S'{HCode editor - Search}\n\n Key:   $tActionSearch\n Menu: {fSearch/Search}\n\nPuts up a {ldialog=search.dialog} which initiates a new search operation.\n\nOptions are provided to:\n\n o Search from the first line.\n o Search case sensitive or case insensitive.\n o Search forward or backward.\n o Search for straight text or a sub-set of regular expressions.\n\nCode &editor actions.'
p6205
sg8
(lp6206
sg10
(lp6207
S'2005/04/07'
p6208
asg12
I0
sg13
(lp6209
sg15
(lp6210
S'Code editor - Search'
p6211
assS'wid.tkinter.entry.opt.name'
p6212
(dp6213
g4
(lp6214
sg6
S'>option.name.generic "Entry"'
p6215
sg8
(lp6216
sg10
(lp6217
sg12
I0
sg13
(lp6218
sg15
(lp6219
ssS'wid.pmw.mainmenubar.opt.balloon'
p6220
(dp6221
g4
(lp6222
sg6
S"{HMainMenuBar - balloon}\n\nSpecifies a Pmw.Balloon to display the help text for menu items. If None, no\nhelp is displayed. If the balloon has an associated Pmw.MessageBar, the help\ntext will also be displayed there.\n\nDue to a bug in some versions of Tk (8.0 and possible others), help text will\nnot be displayed by the balloon. However, help text will be displayed in the\nballoon's associated messagebar. The default is None."
p6223
sg8
(lp6224
sg10
(lp6225
S'2006/03/20'
p6226
asg12
I0
sg13
(lp6227
sg15
(lp6228
ssS'search.dialog'
p6229
(dp6230
g4
(lp6231
sg6
S'{HCode Editor - Search Dialog}\n\nUse this to begin a search for specific text in your file.\n\nType the target text in the Entry area near the top.\n\no {GFrom first line}\n   If selected, then we start searching from the first line of text. If\n  this is not selected then the search starts from the current cursor\n  position. Note that if the {gbackwards} choice is selected then this\n  choice becomes "from last line".\n\no {GCase sensitive}\n   Normally searches are case insensitive. Check this if you want the\n  search to be case sensitive.\n\no {GBackwards}\n   Normally searches run in the forward direction. Check this if you want\n  the search to run in the backward direction. If this choice is selected\n  then the "from first line" choice becomes the "from last line" choice.\n\no {GRegular expression}\n   Normally search looks for a simple match with the specifed search\n  string. Check this choice to search using a sub-set of regular\n  expressions. Features supported are:\n\n  t {G. ^ $ [}c1...{G] (}...{g) * + ?  }e1 {G|} e2'
p6232
sg8
(lp6233
sg10
(lp6234
sg12
I0
sg13
(lp6235
sg15
(lp6236
S'Code editor - Search Dialog'
p6237
assS'option.type.generic'
p6238
(dp6239
g4
(lp6240
sg6
S"{H@0 - type}\n\nYou have a choice of:\n\n o {gnormal}\n o {gtearoff}\n o {gmenubar}\n\nAnd frankly Scarlet I don't know what the various choices do and I didn't\nfind any documentation that knew either. Perhaps at some point I will have\nthe ambition to run some experiments and find out but right now I don't. If\n{byou} have the ambition, then by all means run the experiments and then let\nme know at $mailto"
p6241
sg8
(lp6242
sg10
(lp6243
S'2005/04/05'
p6244
asg12
I0
sg13
(lp6245
sg15
(lp6246
ssS'wid.tkinter.button.opt.highlightcolor'
p6247
(dp6248
g4
(lp6249
sg6
S'>option.highlightcolor.generic "Button"'
p6250
sg8
(lp6251
sg10
(lp6252
sg12
I0
sg13
(lp6253
sg15
(lp6254
ssS'wid.tkinter.text.opt.state'
p6255
(dp6256
g4
(lp6257
sg6
S'>option.state.generic "Text"'
p6258
sg8
(lp6259
sg10
(lp6260
sg12
I0
sg13
(lp6261
sg15
(lp6262
ssS'bindassist.duplicatecomponent'
p6263
(dp6264
g4
(lp6265
S'&binding'
p6266
aS'&event'
p6267
aS'&binding'
p6268
aS'&bind assist'
p6269
aS'&bind editor'
p6270
aS'&bind assist'
p6271
asg6
S"{HBind Assist - Duplicate event on close}\n\nYou just clicked on {gOK} but there is already a &binding between the {g@1} component\nof this widget and the &event string {g@0}.\n\nIf what you want is to make changes to this existing &binding then:\n\n n Close the help window.\n\n n Click on {gCancel} to exit from the &bind assist.\n\n n Find the binding you want to work on in the &bind editor and click on it's\n   {P$img/pr-msc-assist.ppm} &bind assist button.\n\nIf you absolutely positively must have two bindings to the same event then you are\ngoing to have to do it manually. Put a {gbind} statement in the code just after the\nautomatically generated code that creates all the widgets and bindings."
p6272
sg8
(lp6273
sg10
(lp6274
S'2006/03/23'
p6275
aS'For the "component" case'
p6276
aS'@0 The event string'
p6277
aS'@1 The component'
p6278
asg12
I0
sg13
(lp6279
sg15
(lp6280
ssS'layout-frame-select'
p6281
(dp6282
g4
(lp6283
S'&frame'
p6284
aS'&frame'
p6285
aS'&frame'
p6286
aS'&frame'
p6287
aS'&frame'
p6288
aS'&frame'
p6289
aS'&frame'
p6290
aS'&frame'
p6291
aS'&frame'
p6292
aS'&frame'
p6293
aS'&frame'
p6294
aS'&frame'
p6295
aS'&frame'
p6296
aS'&frame'
p6297
asg6
S"{HSelecting frames}\n\n&Frames are selected by clicking on a blank spot (that it, a spot that is not\noccupied by a widget or a frame line) within that &frame. The currently\nselected &frame is marked by a gray border just inside it's outline.\n\n&Frames can be nested within other &frames. If you click inside a series of\nnested &frames, there is some question as to which &frame you are trying to\nselect. It works like this:\n\no If the currently selected item is a widget or a &frame which does not\n  include the clicked-on spot, then the inner most &frame around the\n  clicked-on spot is selected.\n\no If the currently selected item is a &frame which includes the clicked-on\n  spot then $$ attempts to selected the next larger &frame. If the currently\n  selected &frame is the largest frame (that is, the form itself) then there\n  is no larger &frame and $$ cycles back to the beginning by selecting the\n  innermost &frame around the clicked-on spot.\n\nThe net result is that if you repeatedly click on a blank spot within a group\nof nested frames, then with each click you cycle through the frames, from\nsmallest to largest, as long as you keep clicking."
p6298
sg8
(lp6299
S'select the frame'
p6300
asg10
(lp6301
S'2005/05/19'
p6302
asg12
I0
sg13
(lp6303
sg15
(lp6304
S'How to: Select frames in the layout area'
p6305
assS'bindassist.duplicateevent'
p6306
(dp6307
g4
(lp6308
S'&binding'
p6309
aS'&event'
p6310
aS'&binding'
p6311
aS'&bind assist'
p6312
aS'&bind editor'
p6313
aS'&bind assist'
p6314
asg6
S"{HBind Assist - Duplicate event on close}\n\nYou just clicked on {gOK} but the current widget already has an existing\n&binding to the &event string {g@0}.\n\nIf what you want is to make changes to this existing &binding then:\n\n n Close the help window.\n\n n Click on {gCancel} to exit from the &bind assist.\n\n n Find the binding you want to work on in the &bind editor and click on it's\n   {P$img/pr-msc-assist.ppm} &bind assist button.\n\nIf you absolutely positively must have two bindings to the same event then\nyou are going to have to do it manually. Put a {gbind} statement in the code\njust after the automatically generated code that creates all the widgets."
p6315
sg8
(lp6316
sg10
(lp6317
S'2005/05/12'
p6318
asg12
I0
sg13
(lp6319
sg15
(lp6320
ssS'wid.tkinter.entry.opt.selectbackground'
p6321
(dp6322
g4
(lp6323
sg6
S'>option.selectbackground.generic "Entry", "text"'
p6324
sg8
(lp6325
sg10
(lp6326
sg12
I0
sg13
(lp6327
sg15
(lp6328
ssS'option.digits.generic'
p6329
(dp6330
g4
(lp6331
S'&control variable'
p6332
aS'&new mexico tech'
p6333
asg6
S'{H@0 - digits}\n\nThe way your program reads the current value shown in a scale widget is\nthrough a &control variable.\n\nThe control variable for a @0 can be an integer (IntVar), a float\n(DoubleVar), or a string (StringVar). If it is a string variable, the\n{bdigits} option controls how many digits to use when the numeric scale value\nis converted to a string.\n\n$nmt'
p6334
sg8
(lp6335
sg10
(lp6336
S'2005/03/02'
p6337
asg12
I0
sg13
(lp6338
sg15
(lp6339
ssS'wid.pmw.combobox.opt.buttonaspect'
p6340
(dp6341
g4
(lp6342
sg6
S">option.pmw.buttonaspect.generic 'ComboBox', 'arrow button'"
p6343
sg8
(lp6344
sg10
(lp6345
sg12
I0
sg13
(lp6346
sg15
(lp6347
ssS'bind.eventwizard.keytype'
p6348
(dp6349
g4
(lp6350
sg6
S'{HBind Event Wizard - any / physical / logical}\n\nYou are in the midst of describing a key related &event. The &event can be set to\nrespond to:\n\n o Any key, or\n o A particular key.\n\nIf you want the &event to respond to {bany key}, then select that choice and\nclick on {gNext} continue.\n\nIf you want the &event to respond to a particular key then there are two ways to\nspecify that one key. We\'re going to give you short and long explanations.\n\n{BThe Short Story}\n\nIf the key or key-combination you want your &event to respond to consists ONLY of\none or more of {GAlt, Control, Shift,} or {GCapsLock}, then select the "physical\nkey" radiobutton. Otherwise select the "logical key" radiobutton. Having made\nthe selection, click on {GNext} to continue to the step where you select the\nactual key.\n\n\n{BThe Long Story}\n\nIn either case, having picked physical or logical, the next step will have you\nchoose the actual key. The difference is in {bhow} you choose the key.\n\nn {GPhysical key}. This choice has you press a single key, and that single key\n  can be ANY of the keys that your operating system knows about including keys\n  that aren\'t normally considered to be "actual" keys, like {GAlt, Control,\n  Shift} and {GCapsLock}.\n\n  Having picked your key, then you choose any modifiers, possibly none, to apply\n  to that key. When using the Wizard this is the only way you can specify a key\n  combination that involves ONLY special keys. If you want your &event to respond\n  to the {GControl-Shift-CapsLock} combination then "physical key" is the method\n  for you.\n\n  Of course, since with this method you can pick any key and then apply any\n  modifier, you can generate any legal key combination with this method so in\n  one sense it\'s all that\'s needed. But it is a two step process rather than a\n  one step process.\n\nn {GLogical key}. This choice has you press any allowable key combination that\n  involves a "normal" key (ie a graphic or function key) along with any of the\n  allowable modifier keys ({GAlt, Control, Shift,} and {GCapsLock}.\n\n  The good news about this choice is that you get to select your key, including\n  possible modifiers, in one simple, painless step.\n\n  The bad news about this choice is that at least one "normal" character must be\n  involved. If you want to respond to, for example, {GControl-Shift} by itself,\n  you can\'t specify that with this method; use the "physical" method instead.\n\n  Therefore, "logical" is the method of choice unless the key combination you\n  have in mind consists solely of some combination of {GAlt, Control, Shift} and\n  {gCapsLock}.\n\n\n{BThe author whines about Tk}\n\nI was disapointed that {GTk} apparently offers no way of saying "bind this event\nto any {GControl} key. You can bind to {GControl_L} or you can bind to\n{GControl_R} but you can\'t (or at least I was unable to find a way to) bind to\neither. You can specify multiple entries in a single event string (the Wizard\ndoesn\'t support this but you can do it manually) so that an event string like:\n\nt {G"<Alt_L><Alt_R><Down>"}\n\nwould trip the event if the user presses the {GAlt_L} key, then presses the\n{GAlt_R} key then presses the {Gcursor down} key. In theory you could make them\nkey in {IWar and Peace}. But you can\'t bind to "any Control key".\n\nAnother annoyance is that you can\'t not pay attention to shift. There is no way\nto specify "the {GA} key and I don\'t care about the state of {GShift}". You can\nbind to "a", and you can bind to "A" but you can\'t bind to either. This leads to\nlogical absurdities like\n\nt {G"<Shift-KeyPress-a>"}\n\nwhich specifies an event which can never occur, unless you happen to own a\nkeyboard on which you have to press {gShift} to get {glower case "a"}.\n\nFor both these situation the best you can do is bind to any keypress and then,\nin your event handler, look at {Gevent.keysym} or {Gevent.keycode} to pick out\nthe ones you want.\n\nIf I am wrong on this, by all means get in touch at $mailto.'
p6351
sg8
(lp6352
sg10
(lp6353
S'2005/03/14'
p6354
asg12
I0
sg13
(lp6355
sg15
(lp6356
S'Bind Event Wizard - Any / Physical / Logical'
p6357
assS'option.sliderlength.generic'
p6358
(dp6359
g4
(lp6360
S'&dimension'
p6361
asg6
S'{H@0 - sliderlength}\n\nA &dimensioned variable which specifies the length of the slider.'
p6362
sg8
(lp6363
sg10
(lp6364
S'2005/04/04'
p6365
asg12
I0
sg13
(lp6366
sg15
(lp6367
ssS'wid.tkinter.radiobutton.opt.padx'
p6368
(dp6369
g4
(lp6370
sg6
S'>option.padx.generic "Radiobutton","Radiobutton and text"'
p6371
sg8
(lp6372
sg10
(lp6373
sg12
I0
sg13
(lp6374
sg15
(lp6375
ssS'wid.tkinter.radiobutton.opt.pady'
p6376
(dp6377
g4
(lp6378
sg6
S'>option.pady.generic "Radiobutton","Radiobuton and text"'
p6379
sg8
(lp6380
sg10
(lp6381
sg12
I0
sg13
(lp6382
sg15
(lp6383
ssS'layout-area'
p6384
(dp6385
g4
(lp6386
S'&layout editor'
p6387
aS'&code editor'
p6388
aS'&layout editor'
p6389
aS'&code editor'
p6390
aS'=layoutarea.formtab'
p6391
asg6
S'{HLayout Area}\n\nThe layout area is the large area on the right side of the $$ window. It is\ntimeshared between the &layout editor and the &code editor.\n\no {bLayout editor}\n   The &layout editor is where you create frames and place widgets.\n\no {bCode editor}\n   The &code editor is where you create and edit the Python code of a form.\n\nYou can snap back and forth between the layout editor and the code editor in any\nof three ways:\n\n o Pressing the {G$tActionFormSwapCodeLayout} key.\n o From the {GForms} menu clicking on the {gSwap code/layout} choice.\n o Clicking on the {Ltab=layoutarea.formtab} of the already selected form.'
p6392
sg8
(lp6393
S'layout area'
p6394
asg10
(lp6395
S'2006/01/26'
p6396
asg12
I0
sg13
(lp6397
sg15
(lp6398
S'The Layout Area'
p6399
assS'wid.tkinter.button.opt.borderwidth'
p6400
(dp6401
g4
(lp6402
sg6
S'>option.borderwidth.generic "Button"'
p6403
sg8
(lp6404
sg10
(lp6405
sg12
I0
sg13
(lp6406
sg15
(lp6407
ssS'option.pmw.padx.generic'
p6408
(dp6409
g4
(lp6410
sg6
S'{H@0 - padx}\n\nSpecifies a padding distance to leave between each @1 in the {gx} direction\nand also between the @1s and the outer edge of the @0. The default is {g@2}.'
p6411
sg8
(lp6412
sg10
(lp6413
S'2006/03/18'
p6414
aS'@1 - Name of the component the space is between eg button'
p6415
aS'@2 - Default'
p6416
asg12
I0
sg13
(lp6417
sg15
(lp6418
ssS'wid.tkinter.menu.opt.activeborderwidth'
p6419
(dp6420
g4
(lp6421
sg6
S'>option.activeborderwidth.generic "Menu"'
p6422
sg8
(lp6423
sg10
(lp6424
sg12
I0
sg13
(lp6425
sg15
(lp6426
ssS'wid.tkinter.button.opt.justify'
p6427
(dp6428
g4
(lp6429
sg6
S'>option.justify.generic "Button"'
p6430
sg8
(lp6431
sg10
(lp6432
sg12
I0
sg13
(lp6433
sg15
(lp6434
ssS'wid.tkinter.listbox.opt.cursor'
p6435
(dp6436
g4
(lp6437
sg6
S'>option.cursor.generic "Listbox"'
p6438
sg8
(lp6439
sg10
(lp6440
sg12
I0
sg13
(lp6441
sg15
(lp6442
ssS'wid.tkinter.scale.opt.cursor'
p6443
(dp6444
g4
(lp6445
sg6
S'>option.cursor.generic "Scale"'
p6446
sg8
(lp6447
sg10
(lp6448
sg12
I0
sg13
(lp6449
sg15
(lp6450
ssS'wid.tkinter.scale.opt.borderwidth'
p6451
(dp6452
g4
(lp6453
S'&dimension'
p6454
asg6
S'{HScale - borderwidth}\n\nA &dimensioned number giving the width of the 3-d border around the trough\nand slider.'
p6455
sg8
(lp6456
sg10
(lp6457
S'2005/04/27'
p6458
asg12
I0
sg13
(lp6459
sg15
(lp6460
ssS'wid.tkinter.entry.opt.pyclass'
p6461
(dp6462
g4
(lp6463
sg6
S'>option.pyclass.generic "Entry"'
p6464
sg8
(lp6465
sg10
(lp6466
sg12
I0
sg13
(lp6467
sg15
(lp6468
ssS'option.pmw.hscrollmode.generic'
p6469
(dp6470
g4
(lp6471
S'&default'
p6472
asg6
S"{H@0 - hscrollmode}\n\nThe horizontal scroll mode. If 'none', the horizontal scrollbar will never be\ndisplayed. If 'static', the scrollbar will always be displayed. If 'dynamic',\nthe scrollbar will be displayed only if necessary. The &default is 'dynamic'."
p6473
sg8
(lp6474
sg10
(lp6475
S'2006/03/22'
p6476
asg12
I0
sg13
(lp6477
sg15
(lp6478
ssS'wid.pmw.entryfield.opt.label'
p6479
(dp6480
g4
(lp6481
sg6
S">option.pmw.label.generic 'EntryField'"
p6482
sg8
(lp6483
sg10
(lp6484
sg12
I0
sg13
(lp6485
sg15
(lp6486
ssS'buffet.widget.messagebar'
p6487
(dp6488
g4
(lp6489
sg6
S'>buffet.widget.generic2 "Pmw.MessageBar", \'\', \'wid.pmw.messagebar.overview\''
p6490
sg8
(lp6491
sg10
(lp6492
sg12
I0
sg13
(lp6493
sg15
(lp6494
ssS'wid.tkinter.radiobutton.opt.state'
p6495
(dp6496
g4
(lp6497
sg6
S'>option.state.generic "Radiobutton"'
p6498
sg8
(lp6499
sg10
(lp6500
sg12
I0
sg13
(lp6501
sg15
(lp6502
ssS'wid.tkinter.scrollbar.opt.highlightcolor'
p6503
(dp6504
g4
(lp6505
sg6
S'>option.highlightcolor.generic "Scrollbar"'
p6506
sg8
(lp6507
sg10
(lp6508
sg12
I0
sg13
(lp6509
sg15
(lp6510
ssS'wid.pmw.timecounter.opt.autorepeat'
p6511
(dp6512
g4
(lp6513
S'&default'
p6514
asg6
S'{HTimeCounter - autorepeat}\n\nIf true, the counter will continue to count up or down while an arrow button\nis held pressed down. The &default is True.'
p6515
sg8
(lp6516
sg10
(lp6517
S'2006/03/23'
p6518
asg12
I0
sg13
(lp6519
sg15
(lp6520
ssS'wid.tkinter.radiobutton.opt.width'
p6521
(dp6522
g4
(lp6523
sg6
S'>option.width.generic "Radiobutton"'
p6524
sg8
(lp6525
sg10
(lp6526
sg12
I0
sg13
(lp6527
sg15
(lp6528
ssS'wid.tkinter.scrollbar.opt.activebackground'
p6529
(dp6530
g4
(lp6531
S'&color'
p6532
aS'&new mexico tech'
p6533
asg6
S'{HScrollbar - activebackground}\n\nThe &color of the slider and arrowheads when the mouse is over them.\n\n$nmt'
p6534
sg8
(lp6535
sg10
(lp6536
S'2005/04/27'
p6537
asg12
I0
sg13
(lp6538
sg15
(lp6539
ssS'wid.pmw.scrolledcanvas.opt.pyclass'
p6540
(dp6541
g4
(lp6542
sg6
S'>option.pyclass.generic "ScrolledCanvas"'
p6543
sg8
(lp6544
sg10
(lp6545
sg12
I0
sg13
(lp6546
sg15
(lp6547
ssS'binding.whatis'
p6548
(dp6549
g4
(lp6550
S'&event'
p6551
aS'&handler'
p6552
aS'&event'
p6553
aS'&handler'
p6554
aS'&maintained'
p6555
aS'&maintained'
p6556
aS'&bind editor'
p6557
aS'&command option'
p6558
aS'&option editor'
p6559
asg6
S'{HBindings}\n\nA binding is a connection between an &event and a &handler such that when the\n&event happens the &handler is called.\n\nMost bindings are &maintained by $$ but bindings can be created manually by the\nuser.\n\nMost $$ &maintained bindings are handled by the &bind editor but some widgets\nhave one or more &command options which are a kind of binding (eg the Button\nwidget has an option where you specify what function to call when the button is\npressed) and these are handled by the &option editor.'
p6560
sg8
(lp6561
S'binding'
p6562
asg10
(lp6563
S'2006/02/07'
p6564
asg12
I0
sg13
(lp6565
sg15
(lp6566
S'What is: A binding'
p6567
assS'bindassist.handlerinvalidname'
p6568
(dp6569
g4
(lp6570
S'&event'
p6571
aS'&handler'
p6572
aS'&binding'
p6573
aS'&event'
p6574
aS'&handler'
p6575
aS'&event'
p6576
aS'&handler'
p6577
aS'&recommend'
p6578
aS'&handler'
p6579
aS'&bind assist'
p6580
aS'&binding'
p6581
aS'&binding'
p6582
aS'&binding'
p6583
aS'&binding'
p6584
aS'&handler'
p6585
aS'&event'
p6586
asg6
S'{HBind Assist - Handler name invalid on close}\n\nYou just clicked on {gOK} but the &event &handler name is not a valid Python name.\n\nTo have a valid &binding, a non-blank &event string and a valid name of the\n&handler for the &event are required.\n\nA valid &handler name:\n\n o Starts with a letter or underscore (_).\n o If longer than one character, it continues with letters, digits or\n   underscore.\n\nThe $$ team &recommends using &handler names of the\nform "{gon_widgetname_whatever}".\n\n\no To exit the &Bind Assist without changing any &bindings, use the {gCancel}\n  button.\n\no If you were about to create a new &binding but changed your mind, use the\n  {gCancel} button\n\no If you want to delete the current &binding, use the {gDelete} button.\n\no To make this a valid &binding, enter or select the name of the &handler for this\n  &event in the combo box just above the buttons.'
p6587
sg8
(lp6588
sg10
(lp6589
S'2005/03/15'
p6590
asg12
I0
sg13
(lp6591
sg15
(lp6592
ssS'wid.pmw.scrolledlistbox.opt.pyclass'
p6593
(dp6594
g4
(lp6595
sg6
S'>option.pyclass.generic "ScrolledListBox"'
p6596
sg8
(lp6597
sg10
(lp6598
sg12
I0
sg13
(lp6599
sg15
(lp6600
ssS'wid.tkinter.scrollbar.opt.background'
p6601
(dp6602
g4
(lp6603
S'&new mexico tech'
p6604
asg6
S'{HScrollbar - background}\n\nThe color of the slider and arrowheads when the mouse is not over them.\n\n$nmt'
p6605
sg8
(lp6606
sg10
(lp6607
S'2005/04/27'
p6608
asg12
I0
sg13
(lp6609
sg15
(lp6610
ssS'wid.tkinter.label.opt.borderwidth'
p6611
(dp6612
g4
(lp6613
sg6
S'>option.borderwidth.generic "Label"'
p6614
sg8
(lp6615
sg10
(lp6616
sg12
I0
sg13
(lp6617
sg15
(lp6618
ssS'option.bitmap.generic'
p6619
(dp6620
g4
(lp6621
S'&bitmap'
p6622
asg6
S'{H@0 - bitmap}\n\nEnter a &bitmap-designation if you want a bitmap to be displayed on this @0.\n\nIf you supply both text and bitmap options, then the text option is ignored\nand the bitmap option is used.'
p6623
sg8
(lp6624
sg10
(lp6625
S'2005/02/26'
p6626
asg12
I0
sg13
(lp6627
sg15
(lp6628
ssS'wid.tkinter.scale.opt.troughcolor'
p6629
(dp6630
g4
(lp6631
sg6
S'>option.troughcolor.generic "Scale"'
p6632
sg8
(lp6633
sg10
(lp6634
sg12
I0
sg13
(lp6635
sg15
(lp6636
ssS'option.height.generic'
p6637
(dp6638
g4
(lp6639
sg6
S"{H@0 - height}\n\nThe height of the @0 in {blines} (not pixels), based on the the current font.\n\nIf zero, the @0's height is set to fit it's contents."
p6640
sg8
(lp6641
sg10
(lp6642
S'2005/03/02'
p6643
asg12
I0
sg13
(lp6644
sg15
(lp6645
ssS'option.validate.generic'
p6646
(dp6647
g4
(lp6648
S'=option.validatecommand.generic'
p6649
asg6
S'{H@0 - validate}\n\nSpecifies when validation should be done. Choices are:\n\n o {gfocus   } Validate whenever the widget gets or loses the focus.\n o {gfocusin } Validate only when the widget gets the focus.\n o {gfocusout} Validate when the widget loses the focus.\n o {gkey     } Validate on any modification of the text.\n o {gall     } All of the above.\n\nDefault is {gnone} (no validation).\n\nThe actual validation is done by the command specified in the\n{lvalidatecommand=option.validatecommand.generic} option.'
p6650
sg8
(lp6651
sg10
(lp6652
S'2005/04/05'
p6653
asg12
I0
sg13
(lp6654
sg15
(lp6655
ssS'wid.tkinter.button.opt.default'
p6656
(dp6657
g4
(lp6658
sg6
S'>option.default.generic "Button"'
p6659
sg8
(lp6660
sg10
(lp6661
sg12
I0
sg13
(lp6662
sg15
(lp6663
ssS'wid.pmw.panedwidget.opt.hull'
p6664
(dp6665
g4
(lp6666
sg6
S">option.pmw.hull.generic 'PanedWidget'"
p6667
sg8
(lp6668
sg10
(lp6669
sg12
I0
sg13
(lp6670
sg15
(lp6671
ssS'wid.pmw.menubar.opt.name'
p6672
(dp6673
g4
(lp6674
sg6
S">option.name.generic 'MenuBar'"
p6675
sg8
(lp6676
sg10
(lp6677
sg12
I0
sg13
(lp6678
sg15
(lp6679
ssS'whatis.widget'
p6680
(dp6681
g4
(lp6682
S'&form'
p6683
aS'&layout editor'
p6684
aS'&widget buffet'
p6685
aS'&widgetator'
p6686
aS'&option editor'
p6687
aS'&bind editor'
p6688
aS'&pack editor'
p6689
asg6
S'{HWhat is: A widget}\n\nAs far as $$ is concerned there are two kinds of widgets:\n\no {gFrame Widgets}\n   Divide you &form up into rectangular areas. Frame widgets are created and\n  maintained using the &layout editor. \n  \no {gRegular Widgets}\n   Are things like Buttons, ListBoxes and the like. They are created by\n  dragging them from the &Widget Buffet.\n  \nThe &Widgetator contains an &option editor, a &bind editor and a &pack\neditor which helps you view and set the options of both kinds of widgets.'
p6690
sg8
(lp6691
S'a widget'
p6692
aS'the widget'
p6693
asg10
(lp6694
S'2006/02/17'
p6695
asg12
I0
sg13
(lp6696
sg15
(lp6697
S'What is: A Widget'
p6698
assS'option.pmw.hotkeys.generic'
p6699
(dp6700
g4
(lp6701
S'&default'
p6702
asg6
S'{H@0 - hotkeys}\n\nIf true, keyboard accelerators will be assigned to each menu item. Keyboard\naccelerators can be used to access the menus without using the mouse. The\naccelerator character is always one of the alphanumeric characters in the\ntext label of the menu item and is indicated by an underline.\n\nTo select a menu, simultaneously press the <Alt> key and the accelerator\ncharacter indicated on a toplevel menu item. The arrows keys can then be used\nto select other menus and menu items. To invoke a menu item, press <Return>\nor press the accelerator character indicated on the menu item.\n\nEach accelerator character will be assigned automatically unless {itraverseSpec}\nis supplied to the {faddmenu(), addmenuitem()} or {faddcascademenu()} methods. The\nautomatically selected accelerator character for a menu item is the first\ncharacter in the label text that has not already been used as an accelerator\nin the menu containing the menu item.\n\nIf {itraverseSpec} is given, it must be either an integer or a character. If an\ninteger, it specifies the index of the character in the label text to use as\nthe accelerator character. If a character, it specifies the character to use\nas the accelerator character. The &default is True.'
p6703
sg8
(lp6704
sg10
(lp6705
S'2006/03/20'
p6706
asg12
I0
sg13
(lp6707
sg15
(lp6708
ssS'buffet.widget.generic'
p6709
(dp6710
g4
(lp6711
S'&widget buffet'
p6712
aS'&layout area'
p6713
aS'&form'
p6714
asg6
S'{HWidget Buffet - @0 Icon}\n\nThis is the @0 icon on the &widget buffet, which is itself part of the\n&layout area. Drag from this icon to place a@1 @0 widget on your &form.'
p6715
sg8
(lp6716
sg10
(lp6717
S'2005/04/06'
p6718
aS'@0 - Name of the widget'
p6719
aS"@1 - 'n' if the widget starts with a vowel, else ''"
p6720
asg12
I0
sg13
(lp6721
sg15
(lp6722
ssS'wid.pmw.scrolledcanvas.opt.hscrollmode'
p6723
(dp6724
g4
(lp6725
sg6
S">option.pmw.hscrollmode.generic 'ScrolledCanvas'"
p6726
sg8
(lp6727
sg10
(lp6728
sg12
I0
sg13
(lp6729
sg15
(lp6730
ssS'wid.pmw.timecounter.opt.min'
p6731
(dp6732
g4
(lp6733
sg6
S'{HTimeCOunter - min}\n\nSpecifies the minimum acceptable time in the form "HH:MM:SS".'
p6734
sg8
(lp6735
sg10
(lp6736
S'2006/03/24'
p6737
asg12
I0
sg13
(lp6738
sg15
(lp6739
ssS'wid.pmw.combobox.opt.entryfield'
p6740
(dp6741
g4
(lp6742
sg6
S'{HComboBox - entryfield}\n\nThe entry field where the current selection is displayed.'
p6743
sg8
(lp6744
sg10
(lp6745
S'2006/03/18'
p6746
asg12
I0
sg13
(lp6747
sg15
(lp6748
ssS'wid.tkinter.entry.opt.invalidcommand'
p6749
(dp6750
g4
(lp6751
sg6
S'>option.invalidcommand.generic "Entry"'
p6752
sg8
(lp6753
sg10
(lp6754
sg12
I0
sg13
(lp6755
sg15
(lp6756
ssS'wid.tkinter.listbox.opt.selectbackground'
p6757
(dp6758
g4
(lp6759
sg6
S'>option.selectbackground.generic "Listbox", "text"'
p6760
sg8
(lp6761
sg10
(lp6762
sg12
I0
sg13
(lp6763
sg15
(lp6764
ssS'wid.tkinter.text.opt.exportselection'
p6765
(dp6766
g4
(lp6767
sg6
S'>option.exportselection.generic "Text"'
p6768
sg8
(lp6769
sg10
(lp6770
sg12
I0
sg13
(lp6771
sg15
(lp6772
ssS'wid.mainform.name'
p6773
(dp6774
g4
(lp6775
S'&form'
p6776
aS'&module'
p6777
aS'&project'
p6778
aS'=form.main.info'
p6779
aS'&project'
p6780
aS'&project'
p6781
asg6
S"{HName of main form}\n\nThis is the name of the main &form of the main &module of the &project.\n\nThe main form {Lis special=form.main.info}. It's name is always the same\nas the name of the whole &project so you can't change it here.\n\nIf you want to change the name of the whole &project then from the main\nmenu click on {gProjects} then on {gRename Project}."
p6782
sg8
(lp6783
sg10
(lp6784
S'2005/04/08'
p6785
asg12
I0
sg13
(lp6786
sg15
(lp6787
ssS'wid.pmw.entryfield.opt.extravalidators'
p6788
(dp6789
g4
(lp6790
sg6
S'{HEntryField - extravalidators}\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.\n\nThis is a dictionary of extra validators. The keys are the names of validators\nwhich may be used in a future call to the {gvalidate} option. Each value in the\ndictionary is a tuple of ({ivalidate_function, stringtovalue_function}).\n\nThe {ivalidate_function} is used to implement the validation and the\n{istringtovalue_function} is used to convert the entry input into a value which\ncan be compared with the minimum and maximum limits. These functions are as\ndescribed for the {gvalidate} option.\n\nIf either of these is not given as a function, it is assumed to be the name of one\nof the other extra validators or one of the standard validators. The alias search\nis performed when the {gvalidate} option is configured, not when the\n{gextravalidators} option is configured or when the {gvalidate} function is\ncalled.\n\nIf the name of one of the extra validators is the same as one of the standard\nvalidators, the extra validator takes precedence.'
p6791
sg8
(lp6792
sg10
(lp6793
S'2006/03/19'
p6794
asg12
I0
sg13
(lp6795
sg15
(lp6796
ssS'wid.pmw.optionmenu.opt.labelmargin'
p6797
(dp6798
g4
(lp6799
sg6
S">option.pmw.labelmargin.generic 'OptionMenu'"
p6800
sg8
(lp6801
sg10
(lp6802
sg12
I0
sg13
(lp6803
sg15
(lp6804
ssS'wid.tkinter.label.opt.activeforeground'
p6805
(dp6806
g4
(lp6807
S'&color'
p6808
asg6
S'>option.activeforeground.generic "Label"\n#!!! Does this really apply? The manual doesn\'t mention\n#\'active\' for labels'
p6809
sg8
(lp6810
sg10
(lp6811
sg12
I0
sg13
(lp6812
sg15
(lp6813
ssS'layout.module-indicator'
p6814
(dp6815
g4
(lp6816
S'&project'
p6817
aS'&module'
p6818
aS'&module'
p6819
asg6
S'{hThe Module Indicator}: {P$imgpr-help-ModuleIndicator.ppm}\n\n\nA &project can consist of many &modules. The module indicator, in the upper right\ncorner of the $$ window, shows the name of the current &module.\n\n o {b$tActionModuleAlternate} conviently switches between the current and previous\n   module.\n\n o {b$tActionModuleNext} steps through the modules in alpahbetic order.\n\n o To work on a specific module call up the {bModule} menu then use the {bModule\n   Select} choice.'
p6820
sg8
(lp6821
sg10
(lp6822
S'2006/01/24'
p6823
asg12
I0
sg13
(lp6824
sg15
(lp6825
S'What is: The Module Indicator'
p6826
assS'wid.tkinter.button.opt.command'
p6827
(dp6828
g4
(lp6829
S'&command option'
p6830
aS'&event'
p6831
aS'&handler'
p6832
aS'&handler'
p6833
aS'&command option'
p6834
aS'&handler'
p6835
aS'&command option'
p6836
aS'&handler'
p6837
aS'&handler'
p6838
aS'&handler'
p6839
aS'&code editor'
p6840
asg6
S'{HButton - command}\n\nThis &command option specifies the name of the &event &handler to be called\nwhen the button is clicked.\n If no &handler is currently associated with this &command option then clicking\non the {P$imgpr-help-Assist.ppm} "assist" icon will allow you to easily create a &handler and\nassociate it with this &command option.\n\nIf this option already specifies a &handler then double-clicking on the name\nof the &handler in the option-editor will immediately take you to that &handler\nin the &code editor.'
p6841
sg8
(lp6842
sg10
(lp6843
S'2005/04/07'
p6844
asg12
I0
sg13
(lp6845
sg15
(lp6846
ssS'wid.pmw.combobox.opt.autoclear'
p6847
(dp6848
g4
(lp6849
S'&default'
p6850
asg6
S'{HComboBox - autoclear}\n\nIf both {gautoclear} and {ghistory} are True, clear the entry field whenever\n{gReturn} is pressed, after adding the value to the history list. The &default is\n{gFalse}.'
p6851
sg8
(lp6852
sg10
(lp6853
S'2006/03/18'
p6854
asg12
I0
sg13
(lp6855
sg15
(lp6856
ssS'wid.tkinter.label.opt.text'
p6857
(dp6858
g4
(lp6859
sg6
S'>option.text.generic "Label"'
p6860
sg8
(lp6861
sg10
(lp6862
sg12
I0
sg13
(lp6863
sg15
(lp6864
ssS'wid.pmw.entryfield.opt.modifiedcommand'
p6865
(dp6866
g4
(lp6867
S'&command option'
p6868
aS'&event'
p6869
asg6
S'{HEntryField - modifiedcommand}\n\nThis &command option specifies the &event &handler to be called whenever the text\nof the entry has been changed due to user action or by a call to {fsetentry()}.'
p6870
sg8
(lp6871
sg10
(lp6872
S'2006/03/19'
p6873
asg12
I0
sg13
(lp6874
sg15
(lp6875
ssS'pack.orientation-violation'
p6876
(dp6877
g4
(lp6878
S'=layout-frame-create'
p6879
asg6
S"{HAmbiguous widget placement}\n\nWhen using $$ all the widgets in a given frame should be laid out\nhorizontally or vertically. The message indicates that in the specified\nframes it wasn't clear if you were arranging the widgets horizontally or\nvertically.\n\nYou don't have to be all that precise about it - pretty much any attempt on\nyour part to make the widgets line up one above the other or one next to the\nother is acceptable - but if they are all over the frame then $$ isn't sure\nhow you want them packed.\n\nIf you really do want widgets scattered about a frame, this suggests that you\nneed to add additional sub-frames ( {Lwhich is really easy to\ndo=layout-frame-create}). Add sub-frames as seems necessary so that the\nwidgets in any one frame are all horizontal or all vertical."
p6880
sg8
(lp6881
sg10
(lp6882
S'2005/05/09'
p6883
asg12
I0
sg13
(lp6884
sg15
(lp6885
ssS'wid.tkinter.radiobutton.opt.bitmap'
p6886
(dp6887
g4
(lp6888
sg6
S'>option.bitmap.generic "Radiobutton"'
p6889
sg8
(lp6890
sg10
(lp6891
sg12
I0
sg13
(lp6892
sg15
(lp6893
ssS'packedit.invalidvalue'
p6894
(dp6895
g4
(lp6896
sg6
S"{HOption Edit - Invalid Value}\n\nHi, I'm the pack option editor for widget @2 and I notice that you just put\nin a request to @0. Howerver right now the value in option @1 is invalid.\nPlease correct the invalid value, then you can @0.\n\nTo get help about the @1 option in particular option, close this help message\nthen click the $hb over the label, inside the black rectangle, that says\n{g@1}."
p6897
sg8
(lp6898
sg10
(lp6899
S'<2005/05/01'
p6900
aS'@0 The action requested'
p6901
aS'@1 The name of the invalid option'
p6902
aS'@2 The name of the widget'
p6903
asg12
I0
sg13
(lp6904
sg15
(lp6905
ssS'wid.tkinter.menu.opt.foreground'
p6906
(dp6907
g4
(lp6908
S'&new mexico tech'
p6909
asg6
S'{HMenu - foreground}\n\nThe foreground color for choices not under the mouse.\n\n$nmt'
p6910
sg8
(lp6911
sg10
(lp6912
S'2005/04/19'
p6913
asg12
I0
sg13
(lp6914
sg15
(lp6915
ssS'assist.proc.new'
p6916
(dp6917
g4
(lp6918
S'&command option'
p6919
aS'&command option'
p6920
aS'&event'
p6921
aS'&handler'
p6922
aS'&command option'
p6923
aS'&event'
p6924
aS'&handler'
p6925
aS'&maintained'
p6926
aS'&command option'
p6927
aS'&command option'
p6928
aS'&command option'
p6929
aS'&maintained'
p6930
aS'&command option'
p6931
aS'&maintained'
p6932
aS'&command option'
p6933
aS'&handler'
p6934
asg6
S'{HAssist - Command}\n\nThis assist helps you set a &command option. This &command option is\ncurrently clear so presumably you now want to associate it with an &event\n&handler.\n\n{bThe usual case}\n\nThe usual case is to associate the &command option with an &event &handler\nwhich is &maintained by $$. There is already a suggested name for the event\nhandler in the entry area just above the buttons. To complete the usual case:\n\n o Make sure the "$$ maintained handler" checkbutton remains checked.\n o Select the name of the handler in the entry area.\n o Click on {gOK}\n\nWe glossed over the part about selecting the name of the handler. Here are\nthe gory details.\n\n o If you are happy with the suggested handler name AND you want to create a\n   new handler just for this &command options use then just click {gOK}\n\n o If you are not happy with the suggested handler name but you do want to\n   create a new handler just for this &command options use then revise the\n   name in the entry area to be whatever you want (other than the name of an\n   existing handler) then click on {gOK}.\n\n o If you want to link this &command option to an existing $$ &maintained\n   handler then select the name of the handler form the drop down list to the\n   right of the entry area.\n\n{bThe unusual case}\n\nThe Usual Case assumes that you want to associate this &command option with a\n$$ &maintained handler. While this is normally the preferred thing to do,\nthere are times when it isn\'t appropriate. For example when linking a\n{gScrollbar} widget to a {gText} widget both the Scrollbar and the Text have\n&command options that need to be link to handlers of the other widget. No $$\nmaintained &handlers are involved in this case.\n\nTo accomplish this, un-check the "$$ maintained handler" box, then enter the\nname of the handler in the entry area. In this case $$ never generates an\nevent handler automatically. It is your responsibility to ensure that the\nhandler named exists when the widget is created.'
p6935
sg8
(lp6936
sg10
(lp6937
sg12
I0
sg13
(lp6938
sg15
(lp6939
S'The option editor Command assist dialog (for currently unset command options)'
p6940
assS'option.image.generic'
p6941
(dp6942
g4
(lp6943
S'&image'
p6944
asg6
S'{H@0 - image}\n\nAn &image to be displayed on this @0 (instead of text). If you supply both\ntext and image options, then the text option is ignored and the image option\nis used.\n\nIf, in addition to providing the {gimage} option, you also supply a\n{gselectimage} option, then:\n\n o the {gimage} image will be displayed when this @0 is not set, and\n o the {gselectimage} image will be displayed with this @0 is set.'
p6945
sg8
(lp6946
sg10
(lp6947
S'2005/03/02'
p6948
asg12
I0
sg13
(lp6949
sg15
(lp6950
ssS'wid.tkinter.frame.opt.highlightthickness'
p6951
(dp6952
g4
(lp6953
sg6
S'>option.highlightthickness.generic "Frame"'
p6954
sg8
(lp6955
sg10
(lp6956
sg12
I0
sg13
(lp6957
sg15
(lp6958
ssS'wid.pmw.combobox.opt.unique'
p6959
(dp6960
g4
(lp6961
sg6
S'{HComboBox - Unique}\n\nIf both {gunique} and {ghistory} are True, the current value of the entry field\nis not added to the ListBox if it is already in the list.'
p6962
sg8
(lp6963
sg10
(lp6964
S'2006/03/18'
p6965
asg12
I0
sg13
(lp6966
sg15
(lp6967
ssS'wid.tkinter.scale.opt.relief'
p6968
(dp6969
g4
(lp6970
sg6
S'>option.relief.generic "Scale"'
p6971
sg8
(lp6972
sg10
(lp6973
sg12
I0
sg13
(lp6974
sg15
(lp6975
ssS'option.pmw.buttonaspect.generic'
p6976
(dp6977
g4
(lp6978
sg6
S'{H@0 - buttonaspect}\n\nThe width of the @1 as a proportion of the height. The height of the @1 is\nset to the height of the entry widget. The default is {g1.0}.\n\nValues less than 1.0 will produce thin @1s, values greater than 1.0 will\nproduce fat @1s.'
p6979
sg8
(lp6980
sg10
(lp6981
S'2006/03/18'
p6982
aS'@1 The thing whose aspect we are setting eg arrow button'
p6983
asg12
I0
sg13
(lp6984
sg15
(lp6985
ssS'wid.pmw.optionmenu.opt.name'
p6986
(dp6987
g4
(lp6988
sg6
S">option.name.generic 'OptionMenu'"
p6989
sg8
(lp6990
sg10
(lp6991
sg12
I0
sg13
(lp6992
sg15
(lp6993
ssS'option.orient.generic'
p6994
(dp6995
g4
(lp6996
S'&new mexico tech'
p6997
asg6
S'{H@0 - orient}\n\nSet orient to {bhorizontal} if you want the @0 to run parallel to the x-axis,\nor to {bvertical} to run parallel to the y-axis.\n\n$nmt'
p6998
sg8
(lp6999
sg10
(lp7000
S'2005/03/06'
p7001
asg12
I0
sg13
(lp7002
sg15
(lp7003
ssS'wid.tkinter.radiobutton.opt.selectcolor'
p7004
(dp7005
g4
(lp7006
sg6
S'>option.selectcolor.generic "Radiobutton"'
p7007
sg8
(lp7008
sg10
(lp7009
sg12
I0
sg13
(lp7010
sg15
(lp7011
ssS'wid.tkinter.frame.opt.width'
p7012
(dp7013
g4
(lp7014
S'&dimension'
p7015
aS'&new mexico tech'
p7016
asg6
S'{HFrame - width}\n\nThe horizontal &dimension of the new frame. This value be ignored unless you\nalso call {Gpack_propogate(0)} or {Ggrid_propagate(0)} on the frame.\n\n$nmt'
p7017
sg8
(lp7018
sg10
(lp7019
S'2005/04/28'
p7020
asg12
I0
sg13
(lp7021
sg15
(lp7022
ssS'wid.tkinter.frame.opt.highlightcolor'
p7023
(dp7024
g4
(lp7025
sg6
S'>option.highlightcolor.generic "Frame"'
p7026
sg8
(lp7027
sg10
(lp7028
sg12
I0
sg13
(lp7029
sg15
(lp7030
ssS'wid.pmw.panedwidget.opt.handlesize'
p7031
(dp7032
g4
(lp7033
S'&default'
p7034
asg6
S'{HPanedWidget - handlesize}\n\nSpecifies the size in pixels of the square handle which appears on the lines\nseparating the panes. The &default is 8.'
p7035
sg8
(lp7036
sg10
(lp7037
S'2006/03/21'
p7038
asg12
I0
sg13
(lp7039
sg15
(lp7040
ssS'howto.create.event.handler'
p7041
(dp7042
g4
(lp7043
S'&event'
p7044
aS'&handler'
p7045
aS'&binding'
p7046
aS'&command option'
p7047
aS'&binding'
p7048
aS'&bind editor'
p7049
aS'&widgetator'
p7050
aS'&binding'
p7051
aS'&handler'
p7052
aS'&handler'
p7053
aS'&handler'
p7054
aS'&binding'
p7055
aS'&binding'
p7056
aS'&bind editor'
p7057
aS'&command option'
p7058
aS'&command option'
p7059
aS'&option editor'
p7060
aS'&widgetator'
p7061
aS'&command option'
p7062
aS'&handler'
p7063
aS'&handler'
p7064
aS'&command option'
p7065
aS'&command option'
p7066
aS'&option editor'
p7067
asg6
S'{HHow to: Create a new event handler}\n\n&Event &handlers spring into existence automatically when you create a &binding or &command\noption that refers to them.\n\no To create a new &binding first select the widget to receive the binding then call up the\n  &bind editor of the &widgetator and click on the {gCreate new binding} button. Once the\n  &binding information is complete and you click on {gOk} the new &handler will\n  automatically be created.\n\n  Note that in the code editor &handlers are kept in alphabetical order making them easy to\n  find.\n\n  To go directly to the &handler of a particular &binding just double-click over that\n  &binding in the &bind editor.\n\no To set a &command option first select the widget that contains the &command option then\n  call up the &option editor of the &widgetator and click on the {P$img/pr-msc-assist.ppm}\n  "assist" button for the &command option in question. Once you have selected the name for\n  the corresponding handler and clicked {gOk} the new &handler is automatically created.\n\n  To go directly to the &handler of a particular &command option just double-click over that\n  &command option in the &option editor'
p7068
sg8
(lp7069
sg10
(lp7070
S'2006/02/17'
p7071
asg12
I0
sg13
(lp7072
sg15
(lp7073
S'How to: Create a new event handler'
p7074
assS'wid.tkinter.text.opt.cursor'
p7075
(dp7076
g4
(lp7077
sg6
S'>option.cursor.generic "Text"'
p7078
sg8
(lp7079
sg10
(lp7080
sg12
I0
sg13
(lp7081
sg15
(lp7082
ssS'option.activeforeground.generic'
p7083
(dp7084
g4
(lp7085
S'&color'
p7086
asg6
S'{H@0 - activeforeground}\n\nThe foreground &color when mouse cursor is over this @0.'
p7087
sg8
(lp7088
sg10
(lp7089
S'2005/02/26'
p7090
asg12
I0
sg13
(lp7091
sg15
(lp7092
ssS'form.main.arcane'
p7093
(dp7094
g4
(lp7095
sg6
S'{HArcane details of the Dreaded Main Form of the main module}\n\nAre you in the right secton? Nobody really wants to know this stuff, do\nthey? Well, whatever, we press on.\n\nIf the the universe were unfolding as it should then to start a\nproject you would point Tkinter at a class which was derived from\n{fTkinter.Toplevel} and say "fire up an application based on this here\nToplevel" or words to that effect. This would make all kinds of sense,\nsince an application is in fact a top level window. It would have made our\nlife easier too since then the rule would be that the main form of the\nmain module has to be a {fTopLevel} which would have seemed reasonable to\nmost people.\n\nAlas, it doesn\'t work that way. Instead, what you have to say is "Hey\nthere Tkinter, fire be up a project for me, eh?" and having done so it\nhands to you a {fToplevel} that it created. Which is to say you don\'t have\na lot of control over the {fToplevel} created; it\'s just generated for you\nas a fait accompli.\n\nThe question the $$ team faced was: what to do about it. Normally a form\nis a class and a {fToplevel} form is derived from the {fToplevel} class.\nWhile we could have let the user create the main form of the main module\nas a {fToplevel} we couldn\'t have done much with it. You can\'t pass it to\nTkinter and you can\'t somehow glom it on top of the {fToplevel} supplied\nby Tkinter. We could have gone through a song and dance to generate main\nform code just as code and not as part of a class, but that sounded like\nit had a lot of potential problems not the least of which is that it is\ntotally different from how every other $$ form works.\n\nThe eventual conclusion was to force the main form to be a {fFrame} which\nwe could then pack into the {fToplevel} provided by Tkinter. Not all that\npretty but it works and the main form is much like a normal form but with a\nfew relatively minor restrictions.\n\nThe only other oddity is that a {fPmw.MainMenuBar} normally has to be\nassociated with a {fToplevel} but it is allowed in the case of the main\nframe in which case it is generated as attaching to the {fToplevel}\nprovided by Tkinter.\n\nThe $$ team makes no claim that this is the best possible solution. It\'s\nsimply the best one we were able to come up with and it seemed reasonable\nat the time.'
p7096
sg8
(lp7097
sg10
(lp7098
S'2006/03/26'
p7099
asg12
I0
sg13
(lp7100
sg15
(lp7101
ssS'howto.tidy.widgets'
p7102
(dp7103
g4
(lp7104
S'&select the frame'
p7105
aS'=layout-frame-create'
p7106
asg6
S'{HHow to: Tidy widgets within a frame}\n\nWhen working with $$ all the widgets within a given frame must* be arranged\neither horizontally or vertically. You don\'t have to work very hard at this -\nany reasonable attempt on your part to place the widgets in a line will work\nfine. If you want the widgets to be {Iexactly} horizontal or vertical then\nthe "Tidy widgets" operation is for you.\n\n&Select the frame whose widgets you want to tidy, right click the mouse\nwithin that frame then choose the "Tidy widgets" choice. The widgets in that\nwindow will be moved so they form an exact vertical or horizontal line.\n\nThis alignment is, of course, purely cosmetic. When your project is built and\nrun the actual widgets are arranged by the pack geometry manager and by that\ntime it matters not if they were nicely or haphazardly aligned on the layout area.\nTiding them simply makes them look nice visually at layout time.\n\nt * Although $$ requires widgets in a frame to be either horizontal or\n  vertical, it it is so ridiculously easy to {Ladd additional\n  frames=layout-frame-create} that this represents no actual burden.'
p7107
sg8
(lp7108
sg10
(lp7109
S'2006/02/09'
p7110
asg12
I0
sg13
(lp7111
sg15
(lp7112
S'How to: Tidy (line up) widgets within a frame.'
p7113
assS'wid.tkinter.frame.opt.background'
p7114
(dp7115
g4
(lp7116
sg6
S'>option.background.generic "Frame"'
p7117
sg8
(lp7118
sg10
(lp7119
sg12
I0
sg13
(lp7120
sg15
(lp7121
ssS'wid.pmw.panedwidget.opt.name'
p7122
(dp7123
g4
(lp7124
sg6
S">option.name.generic 'PanedWidget'"
p7125
sg8
(lp7126
sg10
(lp7127
sg12
I0
sg13
(lp7128
sg15
(lp7129
ssS'datatypeassist.baddict'
p7130
(dp7131
g4
(lp7132
sg6
S'{HPmw.Counter invalid "datatype" dictionary specification}\n\nIf you set this to type "dictionary" then you have to supply either:\n\n o the name of a dictionary (which must be a valid python name), or\n o an actual dictionary specifier enclosed in curley brackets.\n\nWhat you entered meets neither of these criteria.\n\nEither correct the dictionary specification or click on {gCancel}.'
p7133
sg8
(lp7134
sg10
(lp7135
S'2006/02/27'
p7136
asg12
I0
sg13
(lp7137
sg15
(lp7138
ssS'option.yscrollincrement.generic'
p7139
(dp7140
g4
(lp7141
S'&dimension'
p7142
aS'&new mexico tech'
p7143
asg6
S'{H@0 - yscrollincrement}\n\nNormally, canvases can be scrolled vertically to any position. You get this\nbehavior by setting {gyscrollincrement} to zero.\n\nIf you set this option to some positive non-zero &dimension, the canvas can\nbe positioned only on multiples of that distance, and the value will be used\nfor scrolling by scrolling units, such as when the user clicks on the arrows\nat the ends of a scrollbar.\n\n$nmt'
p7144
sg8
(lp7145
sg10
(lp7146
S'2005/04/07'
p7147
asg12
I0
sg13
(lp7148
sg15
(lp7149
ssS'wid.pmw.optionmenu.opt.initialitem'
p7150
(dp7151
g4
(lp7152
sg6
S'{HOptionMenu - initialitem}\n\nSpecifies the initial selected value. This option is treated in the same way\nas the index argument of the {fsetitems()} method.'
p7153
sg8
(lp7154
sg10
(lp7155
S'2006/03/21'
p7156
asg12
I0
sg13
(lp7157
sg15
(lp7158
ssS'wid.tkinter.label.opt.highlightbackground'
p7159
(dp7160
g4
(lp7161
sg6
S'>option.highlightbackground.generic "Label"'
p7162
sg8
(lp7163
sg10
(lp7164
sg12
I0
sg13
(lp7165
sg15
(lp7166
ssS'option.pyclass.generic'
p7167
(dp7168
g4
(lp7169
sg6
S'{H@0 - pyclass}\n\nThe {gpyclass} option has two uses, one with respect to Tkinter widgets and one with respect\nto Pmw widgets.\n\n{bTkinter}\n\nConsider the Button widget. When you add a button to a $$ form, code to create that button is\ngenerated something like this:\n\nt {fself.__Button1 = Button(yadayada)}\n\nHowever, say you have created some wonderful improvement on the lowly Button widget which you\ncall SuperButton. It has all the functionality of a regular Button, plus extras, and you want\nto use it in a $$ project. This is what the {gpyclass} option is for. Normally, in the case of\na Button the {gpyclass} option is set to "Button". If you change it to be "SuperButton" then\nthe creation code will be:\n\nt {fself.__Button1 = SuperButton(yadayada)}\n\nNote that the class that you specify in {gpyclass} should have all the functionality of the\nclass it is replacing or things will go badly in a hurry. There is nothing preventing you from\nsetting {gpyclass} of a Button to be "Canvas" but this isn\'t likely to be useful.\n\nAlso note that although SuperButton may accept initilization options over and above those\nallowed by Button, there is no way to make those known to $$. The best you can do is set any\nsuch options in your own code following the $$-generated code.\n\n{bPmw}\n\nMost Pmw widgets contain other widgets as components. For example the Counter widget contains\nand EntryField which itself contains an Entry. By way of the {gpyclass} option you can change\nthe widget from which the components are created. This is a standard Pmw feature which is\naccessed by changing the {fpyclass} option OF A COMPONENT. Be aware that if you change the\n{fpyclass} option of the Pmw widget itself then you are turning it into something else which\nmay or may not be what you want.'
p7170
sg8
(lp7171
sg10
(lp7172
S'2006/11/06'
p7173
asg12
I0
sg13
(lp7174
sg15
(lp7175
ssS'wid.tkinter.canvas.opt.offset'
p7176
(dp7177
g4
(lp7178
sg6
S'>option.offset.generic "Canvas"'
p7179
sg8
(lp7180
sg10
(lp7181
sg12
I0
sg13
(lp7182
sg15
(lp7183
ssS'fonts-rapyd'
p7184
(dp7185
g4
(lp7186
S'&config file'
p7187
aS'&config file'
p7188
aS'&config file'
p7189
asg6
S'{HHow to adjust the text fonts that $$ uses, particularly the size}\n\nSince screen size and personal preference vary widely the usual issue with fonts is the size.\n\nThere are three kinds of text that $$ is concerned with:\n\n n Text inside the code editor\n n Text used for help pages\n n Everything else (menus, dialogs, error messages, etc.)\n\nAll of these are set via specifications in the &config file.\n\n{BCode editor text}\n\nThe standard &config file contains two different schemes for the code editor and each scheme has\nit\'s own font specification. To change the code editor font, first note which code editor scheme you\nare using. Look for a line in section {gGeneral} of the config file that says something like:\n\nt {fDefaultEditorScheme = Idle}\n\nwhich in this case would indicate that you are using the "Idle" editor scheme. Look for the line\nsaying:\n\nt {f[EditorScheme Idle]}\n\nA few lines after that will be the font line, like this:\n\nt {FFont: (\'Terminal\',\'12\')}\n\nIf you just want to make the font larger or smaller then alter the {g12} value, otherwise feel free\nto change the whole font to whatever you want.\n\n{bHelp page text}\n\nHelp always used {bHelvetica} for narative text and {bCourier} for code and fixed point text but you\nget to choose the sizes. In section {bGeneral} of the &config file look for a line like:\n\nt {fHelpTextSize = 8, 10}\n\nThis line is saying that all help text is to be 8 points in size and that heading text is to be 10\npoints. In the usual Tkinter manner, negative numbers mean pixels and positive numbers mean\npoints.\n\n{bEverything else}\n\nAll other $$ text is set in section {bGeneral} by the line that says\n\nt {fFont = (\'helvetica\',\'7\',\'bold\')}\n\nIf the only issue is size then adjust the number, otherwise feel free to set the font to whatever\nyou want.'
p7190
sg8
(lp7191
sg10
(lp7192
S'2006/05/11'
p7193
asg12
I0
sg13
(lp7194
sg15
(lp7195
S'How to adjust the text fonts that $$ uses, particularly the size'
p7196
assS'option.name.generic'
p7197
(dp7198
g4
(lp7199
S'&name rules'
p7200
aS'&event'
p7201
aS'&handler'
p7202
aS'=option.name.rebind'
p7203
asg6
S"{H@0 - name}\n\nThe name by which this @0-instance is to be known within the current form.\n\nWhen new @0-instances are created, they are given arbitrary non-conflicting\nnames like {g@03} because they have to be called {isomething}. Your code will\nbe more easily understood if you give widget instances meaningful names.\n\nWidget names have to follow the Python &name rules and the name of a widget\nmust be unique within it's form.\n\nThere is an issue of widget-names in relation to &event &handler names. Click\n{lhere=option.name.rebind} if you care."
p7204
sg8
(lp7205
sg10
(lp7206
S'2005/04/08'
p7207
asg12
I0
sg13
(lp7208
sg15
(lp7209
ssS'wid.tkinter.text.opt.takefocus'
p7210
(dp7211
g4
(lp7212
sg6
S'>option.takefocus.generic "Text"'
p7213
sg8
(lp7214
sg10
(lp7215
sg12
I0
sg13
(lp7216
sg15
(lp7217
ssS'wid.tkinter.listbox.opt.width'
p7218
(dp7219
g4
(lp7220
sg6
S'>option.width.generic "Listbox"'
p7221
sg8
(lp7222
sg10
(lp7223
sg12
I0
sg13
(lp7224
sg15
(lp7225
ssS'wid.tkinter.text.opt.selectborderwidth'
p7226
(dp7227
g4
(lp7228
sg6
S'>option.selectborderwidth.generic "Text","text"'
p7229
sg8
(lp7230
sg10
(lp7231
sg12
I0
sg13
(lp7232
sg15
(lp7233
ssS'wid.pmw.timecounter.opt.minuteentryfield'
p7234
(dp7235
g4
(lp7236
sg6
S'{HTimeCounter - minuteentryfield}\n\nThe entry field where the minutes are entered and displayed.'
p7237
sg8
(lp7238
sg10
(lp7239
S'2006/03/24'
p7240
asg12
I0
sg13
(lp7241
sg15
(lp7242
ssS'wid.pmw.counter.opt.uparrow'
p7243
(dp7244
g4
(lp7245
sg6
S'{HCounter - uparrow}\n\nThe arrow button used for incrementing the counter. Depending of the value\nof {gorient}, it will appear on the right of or above the entry field.'
p7246
sg8
(lp7247
sg10
(lp7248
S'2006/03/18'
p7249
asg12
I0
sg13
(lp7250
sg15
(lp7251
ssS'howto.rename.form'
p7252
(dp7253
g4
(lp7254
S'&frame'
p7255
aS'&form'
p7256
aS'&form'
p7257
aS'&form'
p7258
aS'&form'
p7259
aS'&layout editor'
p7260
aS'=layout-frame-select'
p7261
aS'&frame'
p7262
aS'&layout area'
p7263
aS'&option editor'
p7264
aS'&form'
p7265
aS'&form'
p7266
aS'&module'
p7267
aS'=form.main.info'
p7268
aS'&module'
p7269
aS'&form'
p7270
aS'&module'
p7271
aS'=layout.menu.project'
p7272
asg6
S"{HHow to rename a form}\n\nThe form name is carried by the outermost &frame of the &form. To rename a\n&form:\n\n n Click on the &form's tab as necessary to select the &form and bring\n   forward the &layout editor.\n\n n {LSelect=layout-frame-select} the outermost &frame in the &layout area.\n\n n In the &option editor change the {gname} option to be your desired new\n   name; the &form will be renamed accordingly.\n\nThe directions above apply to all forms except the main &form of the main\n&module; it is {Lspecial=form.main.info}. The project itself, the main\n&module of the project and the main &form of the main &module all carry the\nsame name and thus the only way to rename one is to rename the project.\n\n{LHow to rename the entire project=layout.menu.project}."
p7273
sg8
(lp7274
sg10
(lp7275
S'2006/02/07'
p7276
asg12
I0
sg13
(lp7277
sg15
(lp7278
S'How to: Rename a form'
p7279
assS'option.direction.generic'
p7280
(dp7281
g4
(lp7282
sg6
S'{H@0 - direction}\n\nNormally, the menu will appear below the menubutton. Set direction to one of:\n\n o {gabove}\n o {gbelow}\n o {gflush}\n o {gleft}\n o {gright}\n\nto adjust where the menu will appear.'
p7283
sg8
(lp7284
sg10
(lp7285
S'2005/03/02'
p7286
asg12
I0
sg13
(lp7287
sg15
(lp7288
ssS'option.pmw.orient.generic'
p7289
(dp7290
g4
(lp7291
sg6
S"{H@0 - orient}\n\nSpecifies the orientation of the @0. This may be '{ghorizontal}' or\n'{gvertical}'. The default is '{ghorizontal}'."
p7292
sg8
(lp7293
sg10
(lp7294
S'2006/03/18'
p7295
asg12
I0
sg13
(lp7296
sg15
(lp7297
ssS'whatis.code.editor.stack'
p7298
(dp7299
g4
(lp7300
S'&code editor'
p7301
aS'=code-edit.info-label'
p7302
aS'&code editor'
p7303
asg6
S"{HWhat is: The code editor's stack of remembered line numbers}\n\nThe &code editor keeps a stack of 'remembered' line numbers. If you are in\none section of code but need to temporarily take a look at another section\nthen this line stack is just the ticket.\n\nThere are four stack related actions:\n\n o {gPush} ($tActionPushLineNumber} adds the number of the current line to\n   the stack.\n\n o {gPop} ($tActionPopToLineNumber) Pops the most recent entry from the stack\n   and takes you to that line.\n\n o {gSwap} ($tActionSwapWithTop} Replaces the top stack entry with the number\n   of the current line and takes you to the line that was formerly on the top\n   of the stack.\n\n o {gForget} Clears the stack of remembered lines. Handy if you have pushed\n   lots of line numbers but are now done with them.\n\nUse {gpush} before you go off to the other section of code and then {gpop} to\nget back. If you know you are going to want to snap back and forth between\nthe two sections of code several times then once you arrive at the other\nsection of code use {gswap}; each time you press {gswap} it will take you to\nthe other section of code. When you are done snapping back and forth press\n{gpop} to clean up the stack.\n\nEach &code editor has it's own line stack.\n\nThe {Linformation area=code-edit.info-label} of the &code editor shows how\nmany remembered line numbers are on the stack.\n\nAll line stacks are empty immediately after a project has been loaded."
p7304
sg8
(lp7305
S'remembered line'
p7306
asg10
(lp7307
S'2006/02/18'
p7308
asg12
I0
sg13
(lp7309
sg15
(lp7310
S"What is: The code editor's stack of remembered line numbers"
p7311
assS'wid.tkinter.entry.opt.insertwidth'
p7312
(dp7313
g4
(lp7314
sg6
S'>option.insertwidth.generic "Entry"'
p7315
sg8
(lp7316
sg10
(lp7317
sg12
I0
sg13
(lp7318
sg15
(lp7319
ssS'wid.pmw.scrolledlistbox.opt.selectioncommand'
p7320
(dp7321
g4
(lp7322
sg6
S">option.pmw.selectioncommand.generic 'ScrolledListBox'"
p7323
sg8
(lp7324
sg10
(lp7325
sg12
I0
sg13
(lp7326
sg15
(lp7327
ssS'buffet.widget.group'
p7328
(dp7329
g4
(lp7330
sg6
S'>buffet.widget.generic2 "Pmw.Group", \'\', \'wid.pmw.group.overview\''
p7331
sg8
(lp7332
sg10
(lp7333
sg12
I0
sg13
(lp7334
sg15
(lp7335
ssS'option.invalidcommand.generic'
p7336
(dp7337
g4
(lp7338
S'=command-option.whatis'
p7339
aS'=wid.tkinter.entry.opt.validate'
p7340
aS'=wid.tkinter.entry.opt.validate'
p7341
asg6
S"{H@0 - invalidcommand}\n\nThe {Lcommand=command-option.whatis} to run if\n{Lvalidation=wid.tkinter.entry.opt.validate} is enabled and the\n{Lvalidatecommand=wid.tkinter.entry.opt.validate} returns false.\n\nThis option isn't all that useful since anything that can be done by the\n{Ginvalidcommand} function could also be done by the function that does the\nvalidating."
p7342
sg8
(lp7343
sg10
(lp7344
S'2005/03/03'
p7345
asg12
I0
sg13
(lp7346
sg15
(lp7347
ssS'wid.tkinter.scale.opt.repeatinterval'
p7348
(dp7349
g4
(lp7350
sg6
S'>option.repeatinterval.generic "Scale"'
p7351
sg8
(lp7352
sg10
(lp7353
sg12
I0
sg13
(lp7354
sg15
(lp7355
ssS'wid.pmw.optionmenu.opt.labelpos'
p7356
(dp7357
g4
(lp7358
sg6
S">option.pmw.labelpos.generic 'OptionMenu'"
p7359
sg8
(lp7360
sg10
(lp7361
sg12
I0
sg13
(lp7362
sg15
(lp7363
ssS'wid.tkinter.radiobutton.opt.textvariable'
p7364
(dp7365
g4
(lp7366
sg6
S'>option.textvariable.generic "Radiobutton"'
p7367
sg8
(lp7368
sg10
(lp7369
sg12
I0
sg13
(lp7370
sg15
(lp7371
ssS'wid.pmw.entryfield.opt.errorbackground'
p7372
(dp7373
g4
(lp7374
S'&default'
p7375
asg6
S"{HEntryField - errorbackground}\n\nSpecifies the color to use when displaying invalid or partially valid text.\nThe &default is '{gpink}'."
p7376
sg8
(lp7377
sg10
(lp7378
S'2006/03/19'
p7379
asg12
I0
sg13
(lp7380
sg15
(lp7381
ssS'option.wraplength.generic'
p7382
(dp7383
g4
(lp7384
S'&dimension'
p7385
aS'&image'
p7386
aS'&bitmap'
p7387
asg6
S'{H@0 - wraplength}\n\nNormally, lines are not wrapped. If this option is set to a &dimension\ngreater than zero, the text of the @0 will be wrapped to fit within the\nspecified size.\n\nIf an &image or &bitmap is specified for this @0, no text is displayed and\nthis option has no effect.'
p7388
sg8
(lp7389
sg10
(lp7390
S'2005/03/07'
p7391
asg12
I0
sg13
(lp7392
sg15
(lp7393
ssS'help.index'
p7394
(dp7395
g4
(lp7396
sg6
S'{HHow the help index searcher works}\n\n{bThe short answer}\n\nKey in one or more words related to the topic of interest then press {gEnter} or\nclick on {gOk}.\n\n\n{bThe long answer}\n\no Searches are case insensitive.\n\no If you key in a single word, then all index entries which contain that word will\n  be presented.\n\no If you key in two or more words (for purposes of index searching, a "word" is a\n  clump of any characters except space, comma and quotes) then for an index entry\n  to be presented it must contain ALL the words. The order of the words or where\n  they are in the index entry doesn\'t matter.\n\no To search for a specific phrase which contains spaces, put it inside single or\n  double quotes. For example, searching for\n\n  t handler names\n\n  will return all index entries that contain both the word "handler" and the word\n  "names", while searching for\n\n  t "handler names"\n\n  will return only index entries with the exact phrase "handler names" in them\n  somewhere.\n\no To search for a series of alternatives separate them with commas. Thus searching\n  for:\n\n  t form, module, project\n\n  will return an index entry if it contains the word "form" or if it contains the\n  word "module" or if it contains the word "project".\n\no You can combine these rules. Searching for:\n\n  t "handler names", project\n\n  will return an index entry if it contains the exact phrase "handler names" or if\n  it contains the word "project".'
p7397
sg8
(lp7398
sg10
(lp7399
S'2006/03/17'
p7400
asg12
I0
sg13
(lp7401
sg15
(lp7402
S'How the help index searcher works'
p7403
assS'form.invalidname'
p7404
(dp7405
g4
(lp7406
sg6
S'>name-rules'
p7407
sg8
(lp7408
sg10
(lp7409
sg12
I0
sg13
(lp7410
sg15
(lp7411
ssS'wid.pmw.labeledwidget.opt.labelpos'
p7412
(dp7413
g4
(lp7414
sg6
S">option.pmw.labelpos.generic 'LabeledWidget'"
p7415
sg8
(lp7416
sg10
(lp7417
sg12
I0
sg13
(lp7418
sg15
(lp7419
ssS'wid.pmw.entryfield.overview'
p7420
(dp7421
g4
(lp7422
sg6
S"{HWhat is: An EntryField widget}\n\nAn EntryField contains an entry widget with optional validation of various\nkinds. Built-in validation may be used, such as integer, real, time or date,\nor an external validation function may be supplied. If valid text is entered,\nit will be displayed with the normal background. If invalid text is entered,\nit is not displayed and the previously displayed text is restored. If\npartially valid text is entered, it will be displayed with a background color\nto indicate it is in error. An example of partially valid real text is '-.',\nwhich may be the first two charactes of the valid string '-.5'. Some\nvalidators, such as date, have a relaxed interpretation of partial validity,\nwhich allows the user flexibility in how they enter the text.\n\nValidation is performed early, at each keystroke or other event which\nmodifies the text. However, if partially valid text is permitted, the\nvalidity of the entered text can be checked just before it is to be used,\nwhich is a form of late validation.\n\nMinimum and maximum values may be specified. Some validators also accept\nother specifications, such as date and time formats and separators."
p7423
sg8
(lp7424
sg10
(lp7425
S'2006/03/19'
p7426
asg12
I0
sg13
(lp7427
sg15
(lp7428
S'What is: An EntryField widget'
p7429
assS'layout-editor'
p7430
(dp7431
g4
(lp7432
S'&form'
p7433
aS'&widget buffet'
p7434
aS'=layout-frame-create'
p7435
aS'=layout-frame-resize'
p7436
aS'=layout-frame-delete'
p7437
aS'=layout-frame-select'
p7438
aS'=frame-properties-dialog'
p7439
aS'=layout-widget-add'
p7440
aS'=layout-widget-move'
p7441
aS'=layout-widget-delete'
p7442
aS'=duplicator'
p7443
aS'&code editor'
p7444
aS'&code editor'
p7445
aS'=howto.swap.code.layout'
p7446
aS'&form'
p7447
aS'&form'
p7448
aS'&form'
p7449
aS'&form'
p7450
aS'&form'
p7451
aS'&duplicator'
p7452
aS'&parking lot'
p7453
aS'&trash bin'
p7454
aS'&widget buffet'
p7455
asg6
S'{HLayout Editor}\n\nThe layout editor is where you do the visual layout of your &form by:\n\n o Using lines to divide the form up into a series of frames.\n o Dragging and dropping widgets (from the &widget buffet) onto the form.\n\nt {LCreating Frames=layout-frame-create} . . . {LResizing Existing Frames=layout-frame-resize}\n  . . . {LDeleting Frames=layout-frame-delete} . . .{LSelecting Frames=layout-frame-select} .\n  . . {LChanging frame type=frame-properties-dialog}\n\nt {LAdding Widgets=layout-widget-add} . . . {LMoving Widgets=layout-widget-move} . . .\n  {LDeleting Widgets=layout-widget-delete} . . . {LDuplicating Widgets=duplicator}\n\nThe layout editor time-shares space on the screen with the &code editor. You can snap back and\nforth between the layout editor and the &code editor in any of {Lthree\nways=howto.swap.code.layout}.\n\nThe layout editor presents a schematic representation of your &form; it shows the relative\nspatial relationships between frames and widgets. It {bis not and is not supposed to be} a\n"what you see is what you get" exact representation of what your &form will look like when\nyour application runs. It is simply a convenient graphical way for you to manipulate frames\nand widgets. Similarly the size of the layout area bears no relationship to the size of your\neventual &form. When you change the size of the $$ window all the items in the layout area\nscale as needed but this says nothing about the size of your eventual &form. The size of the\n&form is determined by widget option settings and by your code.\n\nDown near the the bottom of the layout are are:\n\n o (on the left) the &Duplicator\n o (in the middle) the &Parking Lot\n o (on the right) the &Trash Bin\n\nAnd down at the very bottom is the &widget buffet.'
p7456
sg8
(lp7457
S'layout editor'
p7458
asg10
(lp7459
S'2005/03/05'
p7460
asg12
I0
sg13
(lp7461
sg15
(lp7462
S'The Layout Editor'
p7463
assS'wid.tkinter.label.opt.highlightthickness'
p7464
(dp7465
g4
(lp7466
sg6
S'>option.highlightthickness.generic "Label"'
p7467
sg8
(lp7468
sg10
(lp7469
sg12
I0
sg13
(lp7470
sg15
(lp7471
ssS'wid.tkinter.entry.opt.xscrollcommand'
p7472
(dp7473
g4
(lp7474
sg6
S'>option.xscrollcommand.generic "Entry"'
p7475
sg8
(lp7476
sg10
(lp7477
sg12
I0
sg13
(lp7478
sg15
(lp7479
ssS'wid.pmw.group.opt.pyclass'
p7480
(dp7481
g4
(lp7482
sg6
S'>option.pyclass.generic "Group"'
p7483
sg8
(lp7484
sg10
(lp7485
sg12
I0
sg13
(lp7486
sg15
(lp7487
ssS'option.activebackground.generic'
p7488
(dp7489
g4
(lp7490
S'&color'
p7491
asg6
S'{H@0 - activebackground}\n\nThe background &color when mouse cursor is over this @0.'
p7492
sg8
(lp7493
sg10
(lp7494
S'2005/02/26'
p7495
asg12
I0
sg13
(lp7496
sg15
(lp7497
ssS'option.selectimage.generic'
p7498
(dp7499
g4
(lp7500
S'&image'
p7501
asg6
S'{H@0 - selectimage}\n\nThis option has no effect unless you also supply the {gimage} option. When\nboth options are supplied then:\n\n o the {gimage} image will be displayed when this @0 is not set, and\n o the {gselectimage} image will be displayed with this @0 is set.\n\nInformation on &images.'
p7502
sg8
(lp7503
sg10
(lp7504
S'2005/04/03'
p7505
asg12
I0
sg13
(lp7506
sg15
(lp7507
ssS'wid.pmw.combobox.opt.labelpos'
p7508
(dp7509
g4
(lp7510
sg6
S">option.pmw.labelpos.generic 'ComboBox'"
p7511
sg8
(lp7512
sg10
(lp7513
sg12
I0
sg13
(lp7514
sg15
(lp7515
ssS'wid.tkinter.text.opt.wrap'
p7516
(dp7517
g4
(lp7518
sg6
S'>option.wrap.generic "Text"'
p7519
sg8
(lp7520
sg10
(lp7521
sg12
I0
sg13
(lp7522
sg15
(lp7523
ssS'wid.tkinter.radiobutton.opt.background'
p7524
(dp7525
g4
(lp7526
sg6
S'>option.background.generic "Radiobutton"'
p7527
sg8
(lp7528
sg10
(lp7529
sg12
I0
sg13
(lp7530
sg15
(lp7531
ssS'wid.tkinter.entry.opt.font'
p7532
(dp7533
g4
(lp7534
sg6
S'>option.font.generic "Entry"'
p7535
sg8
(lp7536
sg10
(lp7537
sg12
I0
sg13
(lp7538
sg15
(lp7539
ssS'layout-frame-resize'
p7540
(dp7541
g4
(lp7542
S'&layout editor'
p7543
aS'&form'
p7544
asg6
S"{HHow to: Resize an existing frame in the Layout editor}\n\nYou resize existing frames in the &layout editor by clicking on one of the lines that make up\nthe frame and dragging it as needed. To move a line:\n\n o Place the cursor over any portion of the line to be moved.\n o Press and hold down the left mouse button; the line will change from solid to dotted\n   indicating it is ready to be moved.\n o Move the mouse as needed to reposition the line.\n o Release the left mouse button to place the line.\n\nNote that there are various constraints when resizing frames by dragging a line:\n\n o You can only move a line so close to another line (or the edge of the form) before it stops\n   moving. This is to prevent the creation of frames so small that you couldn't reasonably\n   work with them.\n\n o Unlike new lines (which can wander all over the &form when you are placing them) existing\n   line represent the boundry between two frames and thus, to make any logical sense, must\n   stay within the larger frame which contains the line being moved."
p7545
sg8
(lp7546
sg10
(lp7547
S'2005/03/06'
p7548
asg12
I0
sg13
(lp7549
sg15
(lp7550
S'How to: Resize an existing frame in the layout editor'
p7551
assS'wid.tkinter.scale.opt.digits'
p7552
(dp7553
g4
(lp7554
sg6
S'>option.digits.generic "Scale"'
p7555
sg8
(lp7556
sg10
(lp7557
sg12
I0
sg13
(lp7558
sg15
(lp7559
ssS'wid.pmw.combobox.opt.label'
p7560
(dp7561
g4
(lp7562
sg6
S">option.pmw.label.generic 'ComboBox'"
p7563
sg8
(lp7564
sg10
(lp7565
sg12
I0
sg13
(lp7566
sg15
(lp7567
ssS'wid.tkinter.canvas.opt.background'
p7568
(dp7569
g4
(lp7570
sg6
S'>option.background.generic "Canvas"'
p7571
sg8
(lp7572
sg10
(lp7573
sg12
I0
sg13
(lp7574
sg15
(lp7575
ssS'widgetator.tab.bindings'
p7576
(dp7577
g4
(lp7578
S'&widgetator'
p7579
aS'&bind editor'
p7580
aS'&handler'
p7581
aS'&event'
p7582
asg6
S'{HWidgetator - Bindings tab}\n\nThis tab is part of the &widgetator. It makes visible the &bind editor which\nlets you see and edit the bindings for the selected widget. Bindings allow\nyou to activate user-written &handler methods in response to &events which\nhappen to a widget.'
p7583
sg8
(lp7584
sg10
(lp7585
S'2005/03/04'
p7586
asg12
I0
sg13
(lp7587
sg15
(lp7588
ssS'wid.tkinter.label.opt.textvariable'
p7589
(dp7590
g4
(lp7591
sg6
S'>option.textvariable.generic "Label"'
p7592
sg8
(lp7593
sg10
(lp7594
sg12
I0
sg13
(lp7595
sg15
(lp7596
ssS'wid.tkinter.checkbutton.opt.text'
p7597
(dp7598
g4
(lp7599
sg6
S'>option.text.generic "Checkbutton"'
p7600
sg8
(lp7601
sg10
(lp7602
sg12
I0
sg13
(lp7603
sg15
(lp7604
ssS'wid.pmw.messagebar.opt.silent'
p7605
(dp7606
g4
(lp7607
S'&default'
p7608
asg6
S'{HMessageBar - silent}\n\nIf true, no audible bells will sound, regardless of the value for bells\ndefined in the messagetypes option. The &default is False.'
p7609
sg8
(lp7610
sg10
(lp7611
S'2005/03/20'
p7612
asg12
I0
sg13
(lp7613
sg15
(lp7614
ssS'wid.pmw.optionmenu.opt.pyclass'
p7615
(dp7616
g4
(lp7617
sg6
S'>option.pyclass.generic "OptionMenu"'
p7618
sg8
(lp7619
sg10
(lp7620
sg12
I0
sg13
(lp7621
sg15
(lp7622
ssS'delete.handlerstoo'
p7623
(dp7624
g4
(lp7625
S'&event'
p7626
aS'&handler'
p7627
aS'&maintained'
p7628
aS'&maintained'
p7629
aS'&handler'
p7630
aS'&handler'
p7631
aS'&handler'
p7632
aS'&handler'
p7633
aS'&handler'
p7634
aS'&handler'
p7635
aS'=howto.delete.event.handler'
p7636
asg6
S'{HOption to delete orphan event handlers}\n\nYou just deleted widget "@0".\n\n<This/These> &event &handler</s>:\n\n@1\n\n<was/were> referneced by widget @0 but not by any other $$ &maintained widgets.\nNow that widget @0 is gone no $$ &maintained binding refers to <this/these>\n&handler</s> and you have the option to delete <it/them>.\n\no If you refer to <this/these> event &handler</s> in your code (I didn\'t check for\n  that) or if you plan to create new bind entries or command-options which will\n  refer to <this/these> event &handler</s> then clearly you want to choose {GKeep\n  handler</s>} to retain the event &handler</s>.\n\no If none of your code calls <this/these> event &handler</s> and you have no\n  proposed use for <it/them> then you might as well choose {G Delete handler</s>}\n  to delete the handler</s> rather than leaving unused code hanging around your\n  form.\n\nIf you choose to retain the &handler</s> you can always {Ldelete\n<it/them>=howto.delete.event.handler} at a later time.'
p7637
sg8
(lp7638
sg10
(lp7639
S'2006/02/14'
p7640
aS'@0 The name of the deleted widget'
p7641
aS'@1 List of now orphaned handlers'
p7642
aS'@2 The number of orphaned handlers'
p7643
asg12
I0
sg13
(lp7644
I2
asg15
(lp7645
ssS'wid.tkinter.button.opt.takefocus'
p7646
(dp7647
g4
(lp7648
sg6
S'>option.takefocus.generic "Button"'
p7649
sg8
(lp7650
sg10
(lp7651
sg12
I0
sg13
(lp7652
sg15
(lp7653
ssS'buffet.widget.optionmenu'
p7654
(dp7655
g4
(lp7656
sg6
S'>buffet.widget.generic2 "Pmw.OptionMenu", \'\', \'wid.pmw.optionmenu.overview\''
p7657
sg8
(lp7658
sg10
(lp7659
sg12
I0
sg13
(lp7660
sg15
(lp7661
ssS'wid.tkinter.label.opt.wraplength'
p7662
(dp7663
g4
(lp7664
sg6
S'>option.wraplength.generic "Label"'
p7665
sg8
(lp7666
sg10
(lp7667
sg12
I0
sg13
(lp7668
sg15
(lp7669
ssS'wid.tkinter.checkbutton.opt.highlightcolor'
p7670
(dp7671
g4
(lp7672
sg6
S'>option.highlightcolor.generic "Checkbutton"'
p7673
sg8
(lp7674
sg10
(lp7675
sg12
I0
sg13
(lp7676
sg15
(lp7677
ssS'assist.pmwdatatype'
p7678
(dp7679
g4
(lp7680
sg6
S'>wid.pmw.counter.opt.datatype'
p7681
sg8
(lp7682
sg10
(lp7683
sg12
I0
sg13
(lp7684
sg15
(lp7685
ssS'wid.tkinter.radiobutton.opt.cursor'
p7686
(dp7687
g4
(lp7688
sg6
S'>option.cursor.generic "Radiobutton"'
p7689
sg8
(lp7690
sg10
(lp7691
sg12
I0
sg13
(lp7692
sg15
(lp7693
ssS'wid.pmw.notebook.opt.hull'
p7694
(dp7695
g4
(lp7696
sg6
S">option.pmw.hull.generic 'NoteBook'"
p7697
sg8
(lp7698
sg10
(lp7699
sg12
I0
sg13
(lp7700
sg15
(lp7701
ssS'wid.tkinter.entry.opt.highlightthickness'
p7702
(dp7703
g4
(lp7704
sg6
S'>option.highlightthickness.generic "Entry"'
p7705
sg8
(lp7706
sg10
(lp7707
sg12
I0
sg13
(lp7708
sg15
(lp7709
ssS'wid.pmw.radioselect.opt.labelpos'
p7710
(dp7711
g4
(lp7712
sg6
S">option.pmw.labelpos.generic 'RadioSelect'"
p7713
sg8
(lp7714
sg10
(lp7715
sg12
I0
sg13
(lp7716
sg15
(lp7717
ssS'wid.pmw.group.opt.name'
p7718
(dp7719
g4
(lp7720
sg6
S">option.name.generic 'Group'"
p7721
sg8
(lp7722
sg10
(lp7723
sg12
I0
sg13
(lp7724
sg15
(lp7725
ssS'handlerdelete'
p7726
(dp7727
g4
(lp7728
S'&event'
p7729
aS'&handler'
p7730
aS'&maintained'
p7731
aS'&handler'
p7732
aS'&handler'
p7733
aS'&handler'
p7734
asg6
S'{HEvent handler delete confirmation}\n\nYou asked to delete &event &handler {g@0} and you are being asked for\nconfirmation.\n\nWhile there <is/are> @1 $$ &maintained reference</s> to this &handler it\nis possible that there may be references to this handler which you placed\nin your code by hand; any such references are {bnot} included in the count\nabove and you should take these into consideration before deleting the\nhandler.\n\no Click {gDelete now} to delete the &handler.\n\no Click {gCancel} to leave the &handler alone.'
p7735
sg8
(lp7736
sg10
(lp7737
S'Event handler delete confirmation'
p7738
aS'[0] The name of the event handler'
p7739
aS'[1] Number of references to the handler'
p7740
asg12
I0
sg13
(lp7741
I1
asg15
(lp7742
ssS'option.exportselection.generic'
p7743
(dp7744
g4
(lp7745
S'&new mexico tech'
p7746
asg6
S"{H@0 - exportselection}\n\nNormally, this option is set to {gtrue} and text selected within the @0\nwidget is exported to be the selection in the window manager. Set this\noption to {gfalse} if you don't want that behavior.\n\n$nmt"
p7747
sg8
(lp7748
sg10
(lp7749
S'2005/03/02'
p7750
asg12
I0
sg13
(lp7751
sg15
(lp7752
ssS'wid.pmw.messagebar.overview'
p7753
(dp7754
g4
(lp7755
sg6
S"{HWhat is: A MessageBar widget}\n\nA message bar contains a single-line message display area. Messages of\nseveral different types may displayed. Messages are cleared after a period\ndefined for each message type. Each message type has a priority so that if\nthe application attempts to display more than one message at a time, the\nmessage with the highest priority will be displayed. Messages may be\naccompanied by a number of audible bells.\n\nThis megawidget can be used for both interactive help messages (when the\nmouse enters certain widgets) and also for other general messages.\n\nTo perform the help function it can cooperate with the Pmw.Balloon megawidget\nso that the programmer (or user) can choose either balloon help, message bar\nhelp, both or neither.\n\nThis megawidget supports a configurable number of message types. The default\ntypes include 'state', 'help', 'usererror' and 'systemerror'. The difference\nbetween these are the length of time they are displayed, the number of bells\nthat are rung and the priority of the message. For example, the 'help'\nmessage type is lower in priority than the 'usererror', so that error\nmessages will always be displayed in preference to help messages regardless\nof the order the messages are created. The 'state' message type is lowest in\npriority but has no timeout, so it should contain messages describing the\ncurrent state of the application, such as Waiting for database connection or\n'Waiting for file to be unlocked'. Generally this should be set to the empty\nstring when the application is running normally. By default the help messages\n(with message type 'help') time out after 5 seconds, so that if the cursor\nhappens to be left over a widget, the application state will be redisplayed\nafter a short time."
p7756
sg8
(lp7757
sg10
(lp7758
S'2006/03/20'
p7759
asg12
I0
sg13
(lp7760
sg15
(lp7761
S'What is: A MessageBar widget'
p7762
assS'wid.pmw.counter.opt.frame'
p7763
(dp7764
g4
(lp7765
sg6
S'{HCounter - frame}\n\nIf the {glabel} component has been created (that is, the {glabelpos} option is not\n{gNone}), the {gframe} component is created to act as the container of the entry\nfield and arrow buttons. If there is no {glabel} component, then no {gframe}\ncomponent is created and the {ghull} component acts as the container. In either\ncase the border around the container of the entry field and arrow buttons\nwill be raised (but not around the label).'
p7766
sg8
(lp7767
sg10
(lp7768
S'2006/03/20'
p7769
asg12
I0
sg13
(lp7770
sg15
(lp7771
ssS'option.activeborderwidth.generic'
p7772
(dp7773
g4
(lp7774
sg6
S'{H@0 - activeborderwidth}\n\nThe width of the border which is drawn around a choice when the mouse\ncursor is over it.\n\nDefaults to 1 pixel,'
p7775
sg8
(lp7776
sg10
(lp7777
S'2005/02/26'
p7778
asg12
I0
sg13
(lp7779
sg15
(lp7780
ssS'wid.tkinter.checkbutton.opt.pyclass'
p7781
(dp7782
g4
(lp7783
sg6
S'>option.pyclass.generic "Checkbutton"'
p7784
sg8
(lp7785
sg10
(lp7786
sg12
I0
sg13
(lp7787
sg15
(lp7788
ssS'wid.pmw.scrolledcanvas.opt.usehullsize'
p7789
(dp7790
g4
(lp7791
sg6
S">option.pmw.usehullsize.generic 'ScrolledCanvas', 'canvas'"
p7792
sg8
(lp7793
sg10
(lp7794
sg12
I0
sg13
(lp7795
sg15
(lp7796
ssS'wid.pmw.scrolledfield.opt.pyclass'
p7797
(dp7798
g4
(lp7799
sg6
S'>option.pyclass.generic "ScrolledField"'
p7800
sg8
(lp7801
sg10
(lp7802
sg12
I0
sg13
(lp7803
sg15
(lp7804
ssS'wid.pmw.radioselect.opt.labelmargin'
p7805
(dp7806
g4
(lp7807
sg6
S">option.pmw.labelmargin.generic 'RadioSelect'"
p7808
sg8
(lp7809
sg10
(lp7810
sg12
I0
sg13
(lp7811
sg15
(lp7812
ssS'wid.pmw.group.opt.hull'
p7813
(dp7814
g4
(lp7815
sg6
S">option.pmw.hull.generic 'Group'"
p7816
sg8
(lp7817
sg10
(lp7818
sg12
I0
sg13
(lp7819
sg15
(lp7820
ssS'wid.tkinter.listbox.opt.highlightcolor'
p7821
(dp7822
g4
(lp7823
sg6
S'>option.highlightcolor.generic "Listbox"'
p7824
sg8
(lp7825
sg10
(lp7826
sg12
I0
sg13
(lp7827
sg15
(lp7828
ssS'wid.tkinter.canvas.opt.relief'
p7829
(dp7830
g4
(lp7831
sg6
S'>option.relief.generic "Canvas"'
p7832
sg8
(lp7833
sg10
(lp7834
sg12
I0
sg13
(lp7835
sg15
(lp7836
ssS'option-editor'
p7837
(dp7838
g4
(lp7839
S'&widgetator'
p7840
aS'&layout area'
p7841
aS'&layout area'
p7842
asg6
S"{HThe Option Editor}\n\nThe option editor is where you view and change all the various widget\noptions. It is located at the far left of the $$ window and is one of three\ntabs provided by the &widgetator. The option editor presents all the option\nsettings for the current widget. Generally you select the current widget by\nclicking on it in the &layout area, although there is also a widget selector\nat the top of the widgetator. Clicking the $hb over virtually anything in the\noption editor will get you help about that item. Pressing the $hk will get\nyou help about the currently selected option.\n\nWhen a widget is first dropped on the &layout area it has default setting for\nall it's options and you can see what these default values are by looking at\nthe option editor. Of course the whole point of the option editor is to let\nyou set the option values as you please.\n\nFrom top to bottom the option editor consists of:\n\n o The selector\n o Two resize knobs\n o The options\n\n{bThe Selector}    {p$imgpr-help-Selector.ppm}\n\nIs simply a dropdown list that will show you the names of all the widgets of\nthe current form. Clicking on a widget names selects it as the current\nwidget.\n\n{bThe Resize Knobs}   {p$imgpr-help-Resize.ppm}\n\nJust above the option edit area are two small resize knobs, both of which can\nbe dragged left or right. Dragging the first resize knob adjusts the width of\nthe area which shows the option names. Dragging the second resize knob\nadjusts the width of the edit area in which you set the value of the options.\n{bNote}: To make the edit area wider you can drag the resize knob to the\nright of the option editor. Although the resize knob loses visibility when\nthe mouse leaves the option editor the position of the mouse is still being\nfollowed and the edit area will resize appropriately.\n\n{bThe Options}  {p$imgpr-help-OptionEditor.ppm}\n\nEach widget has many options. Left to right in the option area you see:\n\n o {bThe name of the option.}\n\n o {bThe option edit area.} For most options this is an area where you can\n   key in the value of the option, for example the name of a color or a\n   dimension size.\n o {bA starburst 'assist' button.} {p$imgpr-help-Assist.ppm} Most options\n   have an 'assist'. Pressing this button brings up an assist dialog which\n   assists in setting this option. For those options where all you can do is\n   key in a simple number, no assist is provided. For those options where you\n   get to choose from a list, the assist pops up a radio-button dialog. For\n   all other options the assist pops up an option specific dialog.\n\nTo get information about a particular option, middle-click the mouse while\nover the option."
p7843
sg8
(lp7844
S'option editor'
p7845
asg10
(lp7846
S'2005/02/22'
p7847
asg12
I0
sg13
(lp7848
sg15
(lp7849
S'The Option editor'
p7850
assS'wid.pmw.buttonbox.opt.orient'
p7851
(dp7852
g4
(lp7853
sg6
S'>option.pmw.orient.generic "ButtonBox"'
p7854
sg8
(lp7855
sg10
(lp7856
sg12
I0
sg13
(lp7857
sg15
(lp7858
ssS'wid.tkinter.checkbutton.opt.pady'
p7859
(dp7860
g4
(lp7861
sg6
S'>option.pady.generic "Checkbutton", "widget"'
p7862
sg8
(lp7863
sg10
(lp7864
sg12
I0
sg13
(lp7865
sg15
(lp7866
ssS'wid.tkinter.checkbutton.opt.padx'
p7867
(dp7868
g4
(lp7869
sg6
S'>option.padx.generic "Checkbutton", "widget"'
p7870
sg8
(lp7871
sg10
(lp7872
sg12
I0
sg13
(lp7873
sg15
(lp7874
ssS'option.pmw.pady.generic'
p7875
(dp7876
g4
(lp7877
sg6
S'{H@0 - pady}\n\nSpecifies a padding distance to leave between each @1 in the\n{gy} direction and also between the @1s and the outer edge of the @0. \nThe default is {g3}.'
p7878
sg8
(lp7879
sg10
(lp7880
S'2006/03/18'
p7881
aS'@1 - Name of the component the space is between eg button'
p7882
asg12
I0
sg13
(lp7883
sg15
(lp7884
ssS'wid.tkinter.listbox.opt.takefocus'
p7885
(dp7886
g4
(lp7887
sg6
S'>option.takefocus.generic "Listbox"'
p7888
sg8
(lp7889
sg10
(lp7890
sg12
I0
sg13
(lp7891
sg15
(lp7892
ssS'widgetator.selector'
p7893
(dp7894
g4
(lp7895
S'&widgetator'
p7896
aS'&layout area'
p7897
aS'&layout area'
p7898
aS'&code editor'
p7899
aS'&layout area'
p7900
asg6
S'{HWidgetator - Selector}  \n\n{P$imgpr-help-Selector.ppm}\n\nThis {bSelector} is part of the &Widgetator. It is for selecting which widget\nyou want to work on. You can either click on the arrow to choose a widget\nfrom a dropdown list, or you can type the name of the widget to select into\nthe edit area then press {fenter}. The specified widget will be selected and\nit will be highlighted in the &layout area so you can see where the selected\nwidget is on the form.\n\nOf course you can also select a widget by clicking on it in the &layout area\nbut sometimes this selector comes in handy if you are in the &code editor and\nwant to switch widgets.\n\nNote that the selector only lists the widgets of the current form. To access\nthe attributes of a widget on a different form, first select that from in the\n&layout area.'
p7901
sg8
(lp7902
S'selector'
p7903
asg10
(lp7904
S'2005/03/04'
p7905
asg12
I0
sg13
(lp7906
sg15
(lp7907
S'The selector of the Widgetator is for selecting widgets'
p7908
assS'wid.tkinter.scale.opt.sliderlength'
p7909
(dp7910
g4
(lp7911
sg6
S'>option.sliderlength.generic "Scale"'
p7912
sg8
(lp7913
sg10
(lp7914
sg12
I0
sg13
(lp7915
sg15
(lp7916
ssS'option.pmw.vscrollmode.generic'
p7917
(dp7918
g4
(lp7919
S'&default'
p7920
asg6
S"{H@0 - vscrollmode}\n\nThe vertical scroll mode. If 'none', the vertical scrollbar will never be\ndisplayed. If 'static', the scrollbar will always be displayed. If 'dynamic',\nthe scrollbar will be displayed only if necessary. The &default is 'dynamic'."
p7921
sg8
(lp7922
sg10
(lp7923
S'2006/03/22'
p7924
asg12
I0
sg13
(lp7925
sg15
(lp7926
ssS'wid.pmw.labeledwidget.opt.name'
p7927
(dp7928
g4
(lp7929
sg6
S">option.name.generic 'LabeledWidget'"
p7930
sg8
(lp7931
sg10
(lp7932
sg12
I0
sg13
(lp7933
sg15
(lp7934
ssS'wid.tkinter.menubutton.opt.activeforeground'
p7935
(dp7936
g4
(lp7937
sg6
S'>option.activeforeground.generic "Menubutton"'
p7938
sg8
(lp7939
sg10
(lp7940
sg12
I0
sg13
(lp7941
sg15
(lp7942
ssS'wid.tkinter.radiobutton.opt.selectimage'
p7943
(dp7944
g4
(lp7945
sg6
S'>option.selectimage.generic "Radiobutton"'
p7946
sg8
(lp7947
sg10
(lp7948
sg12
I0
sg13
(lp7949
sg15
(lp7950
ssS'wid.pmw.combobox.overview'
p7951
(dp7952
g4
(lp7953
sg6
S'{HWhat is: A ComboBox widget}\n\nA combobox contains an entry field and an associated scrolled listbox. When\nan item in the listbox is selected, it is displayed in the entry field.\nOptionally, the user may also edit the entry field directly.\n\nFor a simple combobox, the scrolled listbox is displayed beneath the entry\nfield. For a dropdown combobox (the default), the scrolled listbox is\ndisplayed in a window which pops up beneath the entry field when the user\nclicks on an arrow button on the right of the entry field. Either style\nallows an optional label.'
p7954
sg8
(lp7955
sg10
(lp7956
S'2006/03/19'
p7957
asg12
I0
sg13
(lp7958
sg15
(lp7959
S'What is: A ComboBox widget'
p7960
assS'option.tearoff.generic'
p7961
(dp7962
g4
(lp7963
S'&new mexico tech'
p7964
asg6
S'{H@0 - tearoff}\n\nNormally, a menu can be torn off; the first position (position 0) in the list\nof choices is occupied by the tear-off element, and the additional choices\nare added starting at position 1. If you set tearoff to {gFalse}, the menu\nwill not have a tear-off feature, and choices will be added starting at\nposition 0.\n\n$nmt'
p7965
sg8
(lp7966
sg10
(lp7967
S'2005/04/04'
p7968
asg12
I0
sg13
(lp7969
sg15
(lp7970
ssS'layout-frame-insert'
p7971
(dp7972
g4
(lp7973
S'=layout-frame-create'
p7974
aS'=layout-frame-select'
p7975
aS'=layout-frame-resize'
p7976
asg6
S'{HInserting frames in the layout editor}\n\nUsually you add new frames by {ldrawing lines=layout-frame-create} but there are situations\nwhere that method is not sufficient. Consider the following simple layout:\n\n{P$imgpr-help-Insert1.ppm}\n\nIf what you want is to add a new frame on the right, like this\n\n{P$imgpr-help-Insert2.ppm}\n\nthen you need something more powerful than simply adding another line to an existing layout.\n{bFrame insert} to the rescue. To insert a frame:\n\nn {lSelect=layout-frame-select} the frame inside which you wish to add the new frame. You can\n  add frames inside any frame, not just the main frame.\n\nn Right click within the frame you just selected.\n\nn From the popup menu, click one of the "{gInsert Frame <side>}" choices to insert a new frame\n  at the left, right, top or bottom of the current frame.\n\n{bNote} that there must be enough clear space for the new frame. If the {bInsert Frame} choice\nyou want is disabled (grey) then there is already a line, running the the same direction as\nthe frame you want, near that edge of the current frame. {lMove=layout-frame-resize} that line\naway from the edge of the frame and try again.'
p7977
sg8
(lp7978
sg10
(lp7979
S'2006/12/16'
p7980
asg12
I0
sg13
(lp7981
sg15
(lp7982
S'Inserting frames in the layout editor'
p7983
aS'How to: Insert a new frame along the side of an existing frame'
p7984
assS'wid.tkinter.scrollbar.opt.pyclass'
p7985
(dp7986
g4
(lp7987
sg6
S'>option.pyclass.generic "Scrollbar"'
p7988
sg8
(lp7989
sg10
(lp7990
sg12
I0
sg13
(lp7991
sg15
(lp7992
ssS'option.selectbackground.generic'
p7993
(dp7994
g4
(lp7995
S'&color'
p7996
aS'&new mexico tech'
p7997
asg6
S'{H@0 - selectbackground}\n\nThe background &color to use when displaying selected @1.\n\n$nmt'
p7998
sg8
(lp7999
sg10
(lp8000
S'2005/03/06'
p8001
asg12
I0
sg13
(lp8002
sg15
(lp8003
ssS'wid.tkinter.canvas.opt.yscrollcommand'
p8004
(dp8005
g4
(lp8006
sg6
S'>option.yscrollcommand.generic "Canvas"'
p8007
sg8
(lp8008
sg10
(lp8009
sg12
I0
sg13
(lp8010
sg15
(lp8011
ssS'wid.pmw.scrolledframe.opt.scrollmargin'
p8012
(dp8013
g4
(lp8014
S'&default'
p8015
asg6
S'{HScrolledFrame - scrollmargin}\n\nThe distance between the scrollbars and the clipping frame. The &default is 2.'
p8016
sg8
(lp8017
sg10
(lp8018
S'2006/03/23'
p8019
asg12
I0
sg13
(lp8020
sg15
(lp8021
ssS'wid.pmw.combobox.opt.labelmargin'
p8022
(dp8023
g4
(lp8024
sg6
S">option.pmw.labelmargin.generic 'ComboBox'"
p8025
sg8
(lp8026
sg10
(lp8027
sg12
I0
sg13
(lp8028
sg15
(lp8029
ssS'code-edit.action.copytofile'
p8030
(dp8031
g4
(lp8032
S'&editor actions'
p8033
asg6
S'{HCode editor - Copy to file}\n\n Key:   $tActionCopyToFile\n Menu: {fEdit/Copy to file}\n\nYou are prompted for a file name and the currently selected text is copied to\nthat file.\n\nCode &editor actions'
p8034
sg8
(lp8035
sg10
(lp8036
S'2005/04/07'
p8037
asg12
I0
sg13
(lp8038
sg15
(lp8039
S'Code editor - copy to file'
p8040
assS'form.delete.mainform'
p8041
(dp8042
g4
(lp8043
S'&form'
p8044
aS'&module'
p8045
aS'=form.main.info'
p8046
aS'&form'
p8047
aS'&form'
p8048
aS'&module'
p8049
asg6
S"{HYou can't delete the main form of the main module}\n\nThe main &form of the main &module is {Lspecial=form.main.info} in that it is\nrequired for the project and $$ makes no provision for deleting it.\n\nAll &forms other than the main &form of the main &module can be deleted."
p8050
sg8
(lp8051
sg10
(lp8052
S'2006/03/26'
p8053
asg12
I0
sg13
(lp8054
sg15
(lp8055
S"You can't delete the main form of the main module"
p8056
assS'bindassist.handlerempty'
p8057
(dp8058
g4
(lp8059
S'&event'
p8060
aS'&handler'
p8061
aS'&binding'
p8062
aS'&event'
p8063
aS'&handler'
p8064
aS'&event'
p8065
aS'&bind assist'
p8066
aS'&binding'
p8067
aS'&binding'
p8068
aS'&binding'
p8069
aS'&binding'
p8070
aS'&handler'
p8071
aS'&event'
p8072
aS'&recommend'
p8073
aS'&handler'
p8074
asg6
S'{HBind Assist - Handler name empty on close}\n\nYou just clicked on {gOK} but the &event &handler name is empty.\n\nTo have a valid &binding, a non-blank &event string and the name of the &handler for\nthe &event are required.\n\n o To exit the &Bind Assist without changing any &bindings, use the {gCancel} button.\n\n o If you were about to create a new &binding but changed your mind, use the {gCancel}\n   button\n\n o If you want to delete the current &binding, use the {gDelete} button.\n\n o To make this a valid &binding, enter or select the name of the &handler for this\n   &event in the combo box just above the buttons. We &recommend you use the form\n   {gon_widget_whatever} for the name of the &handler.'
p8075
sg8
(lp8076
sg10
(lp8077
S'2005/03/15'
p8078
asg12
I0
sg13
(lp8079
sg15
(lp8080
ssS'widget.rename.handlers'
p8081
(dp8082
g4
(lp8083
S'=bindassist.name-suggestion'
p8084
aS'=howto.rename.handler'
p8085
asg6
S'{BChanging event handler names when a widget is renamed}\n\nYou just renamed the current widget from "@0" to "@1". In the current form\nthe following handler</s> reference<s> widget "@0":\n\n@2\n\nIf you choose {gNo} then the name</s> of the above hander</s> will not be\nchanged.\n\nIf you choose {gYes} then the name</s> of the handler</s> will be changed to:\n\n@4\n\nand all bindings that make reference to the above handler</s> will be revised\naccordingly.\n\nNote that only event handlers with names of the\n{Lrecommended=bindassist.name-suggestion} form {gon_widget_whatever} are\nconsidered for automatic renaming. Non-standard event handler names are\nalways left as-is. If you wish to change them then you have to do the\n{Lrename=howto.rename.handler} manually.'
p8086
sg8
(lp8087
sg10
(lp8088
S'2005/05/16'
p8089
aS'@0 Old widget name'
p8090
aS'@1 New widget name'
p8091
aS'@2 List of old handler names'
p8092
aS'@3 Count of handlers involved (Pluralize)'
p8093
aS'@4 List of new handler names'
p8094
asg12
I0
sg13
(lp8095
I3
asg15
(lp8096
ssS'gpl.license'
p8097
(dp8098
g4
(lp8099
S'=gpl'
p8100
aS'=layout.menu.about'
p8101
asg6
S'This is the section of the {bGNU General Public License} which deals with redistribution\nissues.\n\n o Click {lhere=gpl} for the full text of the license.\n o Click {Lhere=layout.menu.about} for the $$ "about" box.\n\n TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\nn {n0}This License applies to any program or other work which contains a notice placed by\n  the copyright holder saying it may be distributed under the terms of this General Public\n  License.  The "Program", below, refers to any such program or work, and a "work based on\n  the Program" means either the Program or any derivative work under copyright law: that is\n  to say, a work containing the Program or a portion of it, either verbatim or with\n  modifications and/or translated into another language.  (Hereinafter, translation is\n  included without limitation in the term "modification".)  Each licensee is addressed as\n  "you".\n\n  Activities other than copying, distribution and modification are not covered by this\n  License; they are outside its scope.  The act of running the Program is not restricted,\n  and the output from the Program is covered only if its contents constitute a work based on\n  the Program (independent of having been made by running the Program). Whether that is true\n  depends on what the Program does.\n\nn You may copy and distribute verbatim copies of the Program\'s source code as you receive\n  it, in any medium, provided that you conspicuously and appropriately publish on each copy\n  an appropriate copyright notice and disclaimer of warranty; keep intact all the notices\n  that refer to this License and to the absence of any warranty; and give any other\n  recipients of the Program a copy of this License along with the Program.\n\n  You may charge a fee for the physical act of transferring a copy, and you may at your\n  option offer warranty protection in exchange for a fee.\n\nn You may modify your copy or copies of the Program or any portion of it, thus forming a\n  work based on the Program, and copy and distribute such modifications or work under the\n  terms of Section 1 above, provided that you also meet all of these conditions:\n\n  n {na}You must cause the modified files to carry prominent notices stating that you\n    changed the files and the date of any change.\n\n  n You must cause any work that you distribute or publish, that in whole or in part\n    contains or is derived from the Program or any part thereof, to be licensed as a whole\n    at no charge to all third parties under the terms of this License.\n\n  n If the modified program normally reads commands interactively when run, you must cause\n    it, when started running for such interactive use in the most ordinary way, to print or\n    display an announcement including an appropriate copyright notice and a notice that\n    there is no warranty (or else, saying that you provide a warranty) and that users may\n    redistribute the program under these conditions, and telling the user how to view a copy\n    of this License. (Exception: if the Program itself is interactive but does not normally\n    print such an announcement, your work based on the Program is not required to print an\n    announcement.)\n\n  These requirements apply to the modified work as a whole.  If identifiable sections of\n  that work are not derived from the Program, and can be reasonably considered independent\n  and separate works in themselves, then this License, and its terms, do not apply to those\n  sections when you distribute them as separate works.  But when you distribute the same\n  sections as part of a whole which is a work based on the Program, the distribution of the\n  whole must be on the terms of this License, whose permissions for other licensees extend\n  to the entire whole, and thus to each and every part regardless of who wrote it.\n\n  Thus, it is not the intent of this section to claim rights or contest your rights to work\n  written entirely by you; rather, the intent is to exercise the right to control the\n  distribution of derivative or collective works based on the Program.\n\n  In addition, mere aggregation of another work not based on the Program with the Program\n  (or with a work based on the Program) on a volume of a storage or distribution medium does\n  not bring the other work under the scope of this License.\n\nn You may copy and distribute the Program (or a work based on it, under Section 2) in object\n  code or executable form under the terms of Sections 1 and 2 above provided that you also\n  do one of the following:\n\n  n {na} Accompany it with the complete corresponding machine-readable source code, which\n    must be distributed under the terms of Sections 1 and 2 above on a medium customarily\n    used for software interchange; or,\n\n  n Accompany it with a written offer, valid for at least three years, to give any third\n    party, for a charge no more than your cost of physically performing source distribution,\n    a complete machine-readable copy of the corresponding source code, to be distributed\n    under the terms of Sections 1 and 2 above on a medium customarily used for software\n    interchange; or,\n\n  n Accompany it with the information you received as to the offer to distribute\n    corresponding source code.  (This alternative is allowed only for noncommercial\n    distribution and only if you received the program in object code or executable form with\n    such an offer, in accord with Subsection b above.)\n\n  The source code for a work means the preferred form of the work for making modifications\n  to it.  For an executable work, complete source code means all the source code for all\n  modules it contains, plus any associated interface definition files, plus the scripts used\n  to control compilation and installation of the executable.  However, as a special\n  exception, the source code distributed need not include anything that is normally\n  distributed (in either source or binary form) with the major components (compiler, kernel,\n  and so on) of the operating system on which the executable runs, unless that component\n  itself accompanies the executable.\n\n  If distribution of executable or object code is made by offering access to copy from a\n  designated place, then offering equivalent access to copy the source code from the same\n  place counts as distribution of the source code, even though third parties are not\n  compelled to copy the source along with the object code.\n\nn You may not copy, modify, sublicense, or distribute the Program except as expressly\n  provided under this License.  Any attempt otherwise to copy, modify, sublicense or\n  distribute the Program is void, and will automatically terminate your rights under this\n  License. However, parties who have received copies, or rights, from you under this License\n  will not have their licenses terminated so long as such parties remain in full compliance.\n\nn You are not required to accept this License, since you have not signed it. However,\n  nothing else grants you permission to modify or distribute the Program or its derivative\n  works.  These actions are prohibited by law if you do not accept this License.  Therefore,\n  by modifying or distributing the Program (or any work based on the Program), you indicate\n  your acceptance of this License to do so, and all its terms and conditions for copying,\n  distributing or modifying the Program or works based on it.\n\nn Each time you redistribute the Program (or any work based on the Program), the recipient\n  automatically receives a license from the original licensor to copy, distribute or modify\n  the Program subject to these terms and conditions. You may not impose any further\n  restrictions on the recipients\' exercise of the rights granted herein. You are not\n  responsible for enforcing compliance by third parties to this License.\n\nn If, as a consequence of a court judgment or allegation of patent infringement or for any\n  other reason (not limited to patent issues), conditions are imposed on you (whether by\n  court order, agreement or otherwise) that contradict the conditions of this License, they\n  do not excuse you from the conditions of this License.  If you cannot distribute so as to\n  satisfy simultaneously your obligations under this License and any other pertinent\n  obligations, then as a consequence you may not distribute the Program at all. For example,\n  if a patent license would not permit royalty-free redistribution of the Program by all\n  those who receive copies directly or indirectly through you, then the only way you could\n  satisfy both it and this License would be to refrain entirely from distribution of the\n  Program.\n\n  If any portion of this section is held invalid or unenforceable under any particular\n  circumstance, the balance of the section is intended to apply and the section as a whole\n  is intended to apply in other circumstances.\n\n  It is not the purpose of this section to induce you to infringe any patents or other\n  property right claims or to contest validity of any such claims; this section has the sole\n  purpose of protecting the integrity of the free software distribution system, which is\n  implemented by public license practices.  Many people have made generous contributions to\n  the wide range of software distributed through that system in reliance on consistent\n  application of that system; it is up to the author/donor to decide if he or she is willing\n  to distribute software through any other system and a licensee cannot impose that choice.\n\n  This section is intended to make thoroughly clear what is believed to be a consequence of\n  the rest of this License.\n\nn If the distribution and/or use of the Program is restricted in certain countries either by\n  patents or by copyrighted interfaces, the original copyright holder who places the Program\n  under this License may add an explicit geographical distribution limitation excluding\n  those countries, so that distribution is permitted only in or among countries not thus\n  excluded.  In such case, this License incorporates the limitation as if written in the\n  body of this License.\n\nn The Free Software Foundation may publish revised and/or new versions of the General Public\n  License from time to time.  Such new versions will be similar in spirit to the present\n  version, but may differ in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the Program specifies a version\n  number of this License which applies to it and "any later version", you have the option of\n  following the terms and conditions either of that version or of any later version\n  published by the Free Software Foundation. If the Program does not specify a version\n  number of this License, you may choose any version ever published by the Free Software\n  Foundation.\n\nn If you wish to incorporate parts of the Program into other free programs whose\n  distribution conditions are different, write to the author to ask for permission.  For\n  software which is copyrighted by the Free Software Foundation, write to the Free Software\n  Foundation; we sometimes make exceptions for this. Our decision will be guided by the two\n  goals of preserving the free status of all derivatives of our free software and of\n  promoting the sharing and reuse of software generally.'
p8102
sg8
(lp8103
sg10
(lp8104
S'<2006/03/12'
p8105
asg12
I0
sg13
(lp8106
sg15
(lp8107
ssS'wid.tkinter.menubutton.opt.borderwidth'
p8108
(dp8109
g4
(lp8110
sg6
S'>option.borderwidth.generic "Menubutton"'
p8111
sg8
(lp8112
sg10
(lp8113
sg12
I0
sg13
(lp8114
sg15
(lp8115
ssS'load.changed.importtype'
p8116
(dp8117
g4
(lp8118
S'&config file'
p8119
aS'&maintained'
p8120
asg6
S'{HChange of import-type at project load time}\n\nAs shown in the table below there <is/are> @1 module</s> which <has/have> a different\n"import type" setting than when the @2 was last saved.\n\n@0\n\nIn the table above "At-Save" is the import-type setting for the module at the time when this\n@2 was last saved while "Now" is the current import-type setting as specified by the &config\nfile.\n\n{bWhat this means}\n\nConsider the Tkinter module. If it\'s import type is set to "from" then the line to import it\nis "{gfrom Tkinter import *}" and you can then refer to methods and variables of the\n{fTkinter} module without qualification for example "{fButton}" and "{fGROOVE}".\n\nIf it\'s import type is set to "import" then the line to import it is "{gimport Tkinter}" and\nyou must quality all references to methods and variables for example "{fTkinter.Button}" and\n"{fTkinter.GROOVE}".\n\nWhen you continue with the load, any $$ &maintained references to names from the module</s>\nwhose import-typed changed will automatically be updated but any references you have created\nwill need to be revised to add or remove the qualification.'
p8121
sg8
(lp8122
sg10
(lp8123
S'2006/03/20'
p8124
aS'@0 Table of modules and then/now settings'
p8125
aS'@1 Number of modules in table'
p8126
aS"@2 'project' or 'form'"
p8127
asg12
I0
sg13
(lp8128
I1
asg15
(lp8129
ssS'wid.pmw.scrolledfield.opt.labelmargin'
p8130
(dp8131
g4
(lp8132
sg6
S">option.pmw.labelmargin.generic 'ScrolledField'"
p8133
sg8
(lp8134
sg10
(lp8135
sg12
I0
sg13
(lp8136
sg15
(lp8137
ssS'wid.pmw.menubar.overview'
p8138
(dp8139
g4
(lp8140
sg6
S'{HWhat is: A MenuBar widget}\n\nA menu bar is a container megawidget which manages a number of menu buttons\nand dropdown menus. There are methods to add menu buttons and menus to the\nmenu bar and for adding menu items to the menus. Menu buttons may be added to\nthe left or right of the megawidget. Each menu button and menu item may have\nhelp text to be displayed by a Pmw.Balloon. Each menu and cascaded menu\n(sub-menu) is referenced by name which is supplied on creation.'
p8141
sg8
(lp8142
sg10
(lp8143
S'2006/03/20'
p8144
asg12
I0
sg13
(lp8145
sg15
(lp8146
S'What is: A MenuBar widget'
p8147
assS'wid.pmw.scrolledcanvas.opt.canvas'
p8148
(dp8149
g4
(lp8150
sg6
S'{HScrolledCanvas - canvas}\n\nThe canvas widget which is scrolled by the scrollbars. If the {gborderframe}\noption is true, this is created with a borderwidth of 0 to overcome a known\nproblem with canvas widgets: if a widget inside a canvas extends across one\nof the edges of the canvas, then the widget obscures the border of the\ncanvas. Therefore, if the canvas has no border, then this overlapping does\nnot occur.'
p8151
sg8
(lp8152
sg10
(lp8153
S'2006/03/22'
p8154
asg12
I0
sg13
(lp8155
sg15
(lp8156
ssS'widgetator.tab.options'
p8157
(dp8158
g4
(lp8159
S'&widgetator'
p8160
aS'&option editor'
p8161
asg6
S'{HWidgetator - Options tab}\n\nThis tab is part of the &widgetator. It brings forward the &option editor\nwhich lets you see and edit all the options of the selected widget. The\noptions specified here are the ones that will be in effect when the widget is\ncreated.'
p8162
sg8
(lp8163
sg10
(lp8164
S'2005/03/04'
p8165
asg12
I0
sg13
(lp8166
sg15
(lp8167
ssS'wid.pmw.scrolledtext.opt.usehullsize'
p8168
(dp8169
g4
(lp8170
sg6
S">option.pmw.usehullsize.generic 'ScrolledText'"
p8171
sg8
(lp8172
sg10
(lp8173
sg12
I0
sg13
(lp8174
sg15
(lp8175
ssS'layout-frame-delete'
p8176
(dp8177
g4
(lp8178
S'&layout editor'
p8179
aS'&select the frame'
p8180
aS'&parking lot'
p8181
aS'&form'
p8182
aS'&form'
p8183
aS'&form'
p8184
aS'&form'
p8185
asg6
S"{HHow to delete a frame from the Layout editor}\n\nNote that you can delete only inner-most frames. In other words, if a frame\ncontains sub-frames then you have to delete the sub-frames first before you\ncan delete the frame.\n\nTo delete a frame from the &layout editor:\n\n o &Select the frame to be deleted.\n o Click and release the right mouse button within the frame (but not over a\n   widget within the frame).\n o From the popup menu choose {gDelete Frame}.\n o Confirm the deletion.\n\nOnce the frame is deleted, the area which the frame occupied is amalgamated\ninto an adjacent frame as appropriate.\n\nIf there were any widgets in the frame they are deleted as well (the popup\nwill tell you how many widgets are in the frame). If you want to delete a\nframe but keep the widgets, then prior to deleting the frame move the widgets\nto another frame or the &parking lot.\n\nNote that the outermost frame of a &form is the &form itself. If you want to\ndelete the entire &form (which deletes all the &form's widgets and all it's\ncode) then use the {gForms/Delete-the-current-form} menu choice."
p8186
sg8
(lp8187
sg10
(lp8188
S'2005/03/06'
p8189
asg12
I0
sg13
(lp8190
sg15
(lp8191
S'How to: Delete a frame from the layout editor'
p8192
assS'option.wrap.generic'
p8193
(dp8194
g4
(lp8195
sg6
S'{H@0 - wrap}\n\nThis option controls the display of lines that are too wide to fit in the\nwidget.\n\n o {gchar} - Lines which are too wide are wrapped after the last character\n   that will fit.\n\n o {gword} - Lines which are too wide are wrapped after the last word that\n   will fit.\n\n o {gnone} - Lines are never wrapped. You should provide a horizontal\n   scrollbar to allow access to wide lines.'
p8196
sg8
(lp8197
sg10
(lp8198
S'2005/04/06'
p8199
asg12
I0
sg13
(lp8200
sg15
(lp8201
ssS'wid.tkinter.entry.opt.show'
p8202
(dp8203
g4
(lp8204
sg6
S'>option.show.generic "Entry"'
p8205
sg8
(lp8206
sg10
(lp8207
sg12
I0
sg13
(lp8208
sg15
(lp8209
ssS'wid.pmw.scrolledlistbox.opt.usehullsize'
p8210
(dp8211
g4
(lp8212
sg6
S">option.pmw.usehullsize.generic 'ScrolledListBox'"
p8213
sg8
(lp8214
sg10
(lp8215
sg12
I0
sg13
(lp8216
sg15
(lp8217
ssS'module.new.dialog.formconflict'
p8218
(dp8219
g4
(lp8220
sg6
S'{HForm name conflict at project rename time}\n\nThe project, the main module of the project, and the main form of the main\nmodule all share the same name and when you rename the project, all three\nneed to be renamed. You just asked to change the name of the project to "@0".\nHowever, there is already a form of that name in the main module of the\nproject and thus there would be a name conflict when it came time to rename\nthe main form of the main module.\n\nEither\n\n o Choose a different name for the project, one that doesn\'t conflict with\n   the name of any existing module nor with any existing form in the main\n   module,\n\n   or\n\n o In the main module, change the form named "@0" be of a different name,\n   then do the project rename again.'
p8221
sg8
(lp8222
sg10
(lp8223
S'2006/03/27'
p8224
asg12
I0
sg13
(lp8225
sg15
(lp8226
ssS'module.new.dialog'
p8227
(dp8228
g4
(lp8229
S'&module'
p8230
aS'&project'
p8231
aS'&module'
p8232
aS'&module'
p8233
aS'&project'
p8234
aS'&name rules'
p8235
asg6
S'{HCreate new module dialog}\n\nThis dialog is about adding a new, empty &module to your &project. You will\nneed to supply a name for the new &module which is different from the name\nof any other &module in the current &project and is valid according to\nthe Python &name rules.'
p8236
sg8
(lp8237
sg10
(lp8238
S'2005/05/25'
p8239
asg12
I0
sg13
(lp8240
sg15
(lp8241
ssS'bindassist.handlerchange'
p8242
(dp8243
g4
(lp8244
S'&binding'
p8245
aS'&command option'
p8246
aS'&handler'
p8247
aS'&handler'
p8248
aS'&binding'
p8249
aS'&command option'
p8250
aS'&handler'
p8251
aS'&binding'
p8252
aS'&binding'
p8253
aS'&handler'
p8254
aS'&handler'
p8255
aS'&handler'
p8256
aS'&binding'
p8257
aS'&handler'
p8258
aS'&handler'
p8259
aS'&handler'
p8260
aS'&handler'
p8261
aS'&binding'
p8262
aS'&binding'
p8263
aS'&handler'
p8264
aS'&handler'
p8265
aS'&handler'
p8266
aS'&binding'
p8267
aS'&handler'
p8268
aS'&binding'
p8269
aS'&handler'
p8270
aS'&binding'
p8271
aS'&handler'
p8272
aS'&binding'
p8273
aS'&handler'
p8274
aS'&handler'
p8275
aS'&handler'
p8276
aS'&handler'
p8277
aS'&binding'
p8278
aS'&binding'
p8279
aS'&handler'
p8280
aS'&handler'
p8281
aS'&binding'
p8282
aS'&handler'
p8283
aS'&handler'
p8284
aS'&binding'
p8285
aS'&handler'
p8286
asg6
S'{HChanging the event-handler name}\n\nIf you are working on an existing &binding or &command option and you change\nthe name of the &handler then various things happen, depending on the\nsituation.\n\n{BThe short story}\n\nThe short story is: go ahead and change &handler names as you see fit. Things\nshould happen properly and if there are any choices to be made a dialog\nshould pop up giving you the choice.\n\n{BThe long story}\n\nThe long story is given below and if you are curious or if things aren\'t\nworking as you expected then perhaps it is explained here. The details below\nassume that you have called up an {bexisting} &binding or &command option and\nhave changed the name of the &handler to be associated with it. By "binding"\nwe mean "binding or command-option", they work the same way.\n\no If this &binding was the only &binding which referred to the &handler and\n  no &handler of the new name already exists, then the name of the &handler\n  is changed in both the &binding and the code. Note that &handlers are kept\n  in alphabetical order in the code, so the &handlers position in the code\n  can change when it is renamed.\n\no If the name of the &handler is changed to mention a &handler that already\n  exists, then there are various possibilities. If the current &binding is\n  the only one which refers to the old handler then after the change is made\n  no &bindings wil refer to the old &handler and you are given the option of\n  deleting the old &handler. Of course it is quite possible that you have\n  made calls to the $handler from your code ($$ doesn\'t check for that) in\n  which case you will not want to delete the &handler.\n\no If one or more other &bindings refer to the &handler to which this &binding\n  referred then there are two possibilities and a dialog pops up asking you\n  which one you want.\n\n n You might simply be renaming the &handler and you now want all the\n   &bindings (including the current one) which referred to the old name to\n   now refer to the new name. There will be a {gChange Name} button in the\n   dialog for this choice. The name of the &handler in the code will be\n   changed and all the &bindings will be updated to reflect this new name.\n   Note that &handlers are kept in alphabetical order in the code, so the\n   &handlers position in the code can change when it is renamed.\n\n   If your code has explicit calls to the handler then you will have to\n   update that code yourself to refer to the new &handler name; $$ doesn\'t\n   check for this.\n\n n You might want to create a &handler of the new name for use solely by this\n   &binding while leaving the original hander and any other &bindings which\n   refer to the original &handler alone. There will be a {GNew Handler}\n   button in the dialog for this choice. A new, empty, &handler is created,\n   this &binding referrs to the new &handler, the old &handler stays in place\n   and all the other &bindings continue to refer to the old &handler.'
p8287
sg8
(lp8288
sg10
(lp8289
S'2005/05/15'
p8290
asg12
I0
sg13
(lp8291
sg15
(lp8292
S'Changing the name of an existing event handler'
p8293
assS'wid.tkinter.menubutton.opt.highlightthickness'
p8294
(dp8295
g4
(lp8296
sg6
S'>option.highlightthickness.generic "Menubutton"'
p8297
sg8
(lp8298
sg10
(lp8299
sg12
I0
sg13
(lp8300
sg15
(lp8301
ssS'wid.pmw.radioselect.opt.name'
p8302
(dp8303
g4
(lp8304
sg6
S">option.name.generic 'RadioSelect'"
p8305
sg8
(lp8306
sg10
(lp8307
sg12
I0
sg13
(lp8308
sg15
(lp8309
ssS'wid.tkinter.menubutton.opt.font'
p8310
(dp8311
g4
(lp8312
sg6
S'>option.font.generic "Menubutton"'
p8313
sg8
(lp8314
sg10
(lp8315
sg12
I0
sg13
(lp8316
sg15
(lp8317
ssS'wid.pmw.buttonbox.opt.hull'
p8318
(dp8319
g4
(lp8320
sg6
S'>option.pmw.hull.generic "ButtonBox"'
p8321
sg8
(lp8322
sg10
(lp8323
sg12
I0
sg13
(lp8324
sg15
(lp8325
ssS'code-edit.action.paste'
p8326
(dp8327
g4
(lp8328
S'&editor actions'
p8329
asg6
S'{HCode editor - Paste}\n\n Key:   $tActionPaste\n Menu: {fEdit/Paste}\n\nAny text in the clipboard is copied into the code at the current cursor\nlocation. The clipboard is not cleared.\n\nCode &editor actions'
p8330
sg8
(lp8331
sg10
(lp8332
S'2005/04/07'
p8333
asg12
I0
sg13
(lp8334
sg15
(lp8335
S'Code editor - Paste'
p8336
assS'wid.tkinter.scrollbar.opt.width'
p8337
(dp8338
g4
(lp8339
S'&new mexico tech'
p8340
asg6
S'{HScrollbar - width}\n\nThe width of the trough part of the widget.\n\nThis is the x dimension for vertical scrollbars and the y dimension for\nhorizontal scrollbars.\n\n$nmt'
p8341
sg8
(lp8342
sg10
(lp8343
S'2005/04/27'
p8344
asg12
I0
sg13
(lp8345
sg15
(lp8346
ssS'widget-buffet'
p8347
(dp8348
g4
(lp8349
S'&layout area'
p8350
aS'=buffet.slidearrow'
p8351
asg6
S'{HWidget Buffet}\n\n{P$imgpr-help-WidgetBuffet2.ppm}\n\nThis is the clump of buttons at the bottom of the &layout area. To add new\nwidgets to your form, drag them from the Widget Buffet and drop them at the\ndesired location on your form.\n\n{BTabbed}\n\nSince there are more widgets available than will fit in a single row, the\nWidget Buffet is tabbed. Select the various tabs to see all the widgets\navailable.\n\n{BHints}\n\nPlace the mouse cursor over a Widget Buffet button and hold it still for a\nsecond to see a pop-up hint telling you the name of that particular widget.\n\n{BSliding}\n\nDepending on the size of your screen there may be more widgets in a single\ntab than can be displayed at once. In this case the one or both of the\n{Larrows=buffet.slidearrow} on either side of the Widget Buffet will be\nactive (black instead of gray). Clicking a black arrow will slide the stack\nof icons in the direction of the arrow, revealing some or all of the\npresently hidden icons.\n\n{BHelp}\n\nTo get more information about a particular widget in the buffet, position the\nmouse cursor over it and click the $hb. $help'
p8352
sg8
(lp8353
S'widget buffet'
p8354
asg10
(lp8355
S'2005/02/24'
p8356
asg12
I0
sg13
(lp8357
sg15
(lp8358
S'The Widget Buffet is the source of widgets for forms'
p8359
assS'wid.tkinter.label.opt.font'
p8360
(dp8361
g4
(lp8362
S'&font'
p8363
asg6
S'>option.font.generic "Label"'
p8364
sg8
(lp8365
sg10
(lp8366
sg12
I0
sg13
(lp8367
sg15
(lp8368
ssS'wid.tkinter.menubutton.opt.highlightcolor'
p8369
(dp8370
g4
(lp8371
sg6
S'>option.highlightcolor.generic "Menubutton"'
p8372
sg8
(lp8373
sg10
(lp8374
sg12
I0
sg13
(lp8375
sg15
(lp8376
ssS'option.pmw.hull.generic'
p8377
(dp8378
g4
(lp8379
sg6
S'{H@0 - hull}\n\nThe hull acts as the body for the entire @0. Other components are created as\nchildren of the hull to further specialize the widget.'
p8380
sg8
(lp8381
sg10
(lp8382
S'2006/03/18'
p8383
asg12
I0
sg13
(lp8384
sg15
(lp8385
ssS'wid.tkinter.canvas.opt.takefocus'
p8386
(dp8387
g4
(lp8388
sg6
S'>option.takefocus.generic "Canvas"'
p8389
sg8
(lp8390
sg10
(lp8391
sg12
I0
sg13
(lp8392
sg15
(lp8393
ssS'bindassist.button'
p8394
(dp8395
g4
(lp8396
S'&bind editor'
p8397
aS'=bindassist.general'
p8398
aS'&binding'
p8399
asg6
S'{HBind Editor - "Assist" Button}\n\nThis button is part of the &Bind Editor. Clicking on it will bounce you into\nthe {LBind Assist=bindassist.general} dialog where you can modify or delete the\n&binding shown to the left of this button.'
p8400
sg8
(lp8401
sg10
(lp8402
S'2005/03/17'
p8403
asg12
I0
sg13
(lp8404
sg15
(lp8405
S'The "Assist" Button of the Bind Editor'
p8406
assS'wid.pmw.counter.opt.padx'
p8407
(dp8408
g4
(lp8409
S'&default'
p8410
asg6
S'{HCounter - padx}\n\nSpecifies a padding distance to leave around the arrow\nbuttons in the x direction. The &default is 0.'
p8411
sg8
(lp8412
sg10
(lp8413
S'2006/02/20'
p8414
asg12
I0
sg13
(lp8415
sg15
(lp8416
ssS'wid.pmw.scrolledframe.opt.horizscrollbar'
p8417
(dp8418
g4
(lp8419
sg6
S'{HScrolledFrame - horizscrollbar}\n\nThe horizontal scrollbar component. Its component group is Scrollbar.'
p8420
sg8
(lp8421
sg10
(lp8422
S'2006/03/23'
p8423
asg12
I0
sg13
(lp8424
sg15
(lp8425
ssS'wid.tkinter.listbox.opt.background'
p8426
(dp8427
g4
(lp8428
sg6
S'>option.background.generic "Listbox"'
p8429
sg8
(lp8430
sg10
(lp8431
S'2005/02/26'
p8432
asg12
I0
sg13
(lp8433
sg15
(lp8434
ssS'wid.tkinter.entry.opt.takefocus'
p8435
(dp8436
g4
(lp8437
sg6
S'>option.takefocus.generic "Entry"'
p8438
sg8
(lp8439
sg10
(lp8440
sg12
I0
sg13
(lp8441
sg15
(lp8442
ssS'wid.pmw.combobox.opt.popup'
p8443
(dp8444
g4
(lp8445
sg6
S'{HComboBox - popup}\n\nIn a dropdown ComboBox, the dropdown window.'
p8446
sg8
(lp8447
sg10
(lp8448
S'2006/03/17'
p8449
asg12
I0
sg13
(lp8450
sg15
(lp8451
ssS'wid.tkinter.canvas.opt.scrollregion'
p8452
(dp8453
g4
(lp8454
sg6
S'>option.scrollregion.generic "Canvas"'
p8455
sg8
(lp8456
sg10
(lp8457
sg12
I0
sg13
(lp8458
sg15
(lp8459
ssS'wid.tkinter.menubutton.opt.background'
p8460
(dp8461
g4
(lp8462
sg6
S'>option.background.generic "Menubutton"'
p8463
sg8
(lp8464
sg10
(lp8465
sg12
I0
sg13
(lp8466
sg15
(lp8467
ssS'bindassist.eventnoangle'
p8468
(dp8469
g4
(lp8470
S'&event'
p8471
aS'&bind wizard'
p8472
asg6
S'{HEvent string not in angle brackets}\n\nTk &event strings have to be inside angle brackets {b<like this>}. The event string you\njust entered is missing one or both of the angle brackets.\n\nMay we suggest the &bind wizard as a most excellent means of always getting a properly\nformed event string?'
p8473
sg8
(lp8474
sg10
(lp8475
S'2006/02/20'
p8476
asg12
I0
sg13
(lp8477
sg15
(lp8478
ssS'buffet.widget.menubar'
p8479
(dp8480
g4
(lp8481
sg6
S'>buffet.widget.generic2 "Pmw.MenuBar", \'\', \'wid.pmw.menubar.overview\''
p8482
sg8
(lp8483
sg10
(lp8484
sg12
I0
sg13
(lp8485
sg15
(lp8486
ssS'wid.tkinter.checkbutton.opt.image'
p8487
(dp8488
g4
(lp8489
sg6
S'>option.image.generic "Checkbutton"'
p8490
sg8
(lp8491
sg10
(lp8492
sg12
I0
sg13
(lp8493
sg15
(lp8494
ssS'wid.pmw.scrolledfield.opt.labelpos'
p8495
(dp8496
g4
(lp8497
sg6
S">option.pmw.labelpos.generic 'ScrolledField'"
p8498
sg8
(lp8499
sg10
(lp8500
sg12
I0
sg13
(lp8501
sg15
(lp8502
ssS'project.rename.dialog'
p8503
(dp8504
g4
(lp8505
S'&module'
p8506
aS'&module'
p8507
aS'&project'
p8508
aS'=project.files'
p8509
aS'&module'
p8510
aS'&project'
p8511
aS'&form'
p8512
aS'&project'
p8513
aS'&project'
p8514
aS'&project'
p8515
aS'&project'
p8516
aS'&module'
p8517
aS'&project'
p8518
aS'&project'
p8519
asg6
S'{HMain-module/project rename dialog}\n\nYou asked to rename the project or to rename of the current &module, which\nhappens to be the primary &module of the &project.\n\nThe project, the main-module of the project and the main-form of the main\nmodule all share the same name. Thus changing the name here will rename all\nthree. This isn\'t a bad thing; it\'s simple something you should be aware of.\nFor information about the files of a $$ project {Lclick here.=project.files}\n\nEnter the new name (which must be different from any existing &module of the\n&project and different from any &form in the main module) and press OK.\n\nThe next time you save the &project it will be saved under the new name.\n\nNote that after a name change, any existing &project files will still exist\nand if you want it to go away you have to delete it yourself from the\noperating system. For example if you have a &project named "{fBaffy}" then\nall the information about that &project will be stored in a file named\n"{gBaffy.rpj}". If you change the name of the main &module (and hence of the\n&project) to "{gStringettes}" then the next time you save the &project it\nwill be saved into a file named "{gStringettes.rpj}" but the file\n"{gBaffy.rpj}" will still exist.'
p8520
sg8
(lp8521
sg10
(lp8522
S'2005/05/27'
p8523
asg12
I0
sg13
(lp8524
sg15
(lp8525
ssS'wid.tkinter.entry.opt.background'
p8526
(dp8527
g4
(lp8528
sg6
S'>option.background.generic "Entry"'
p8529
sg8
(lp8530
sg10
(lp8531
sg12
I0
sg13
(lp8532
sg15
(lp8533
ssS'wid.tkinter.text.opt.insertontime'
p8534
(dp8535
g4
(lp8536
sg6
S'>option.insertontime.generic "Text"'
p8537
sg8
(lp8538
sg10
(lp8539
sg12
I0
sg13
(lp8540
sg15
(lp8541
ssS'wid.tkinter.canvas.opt.xscrollincrement'
p8542
(dp8543
g4
(lp8544
sg6
S'>option.xscrollincrement.generic "Canvas"'
p8545
sg8
(lp8546
sg10
(lp8547
sg12
I0
sg13
(lp8548
sg15
(lp8549
ssS'wid.pmw.scrolledtext.opt.vertscrollbar'
p8550
(dp8551
g4
(lp8552
sg6
S'{HScrolledText - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p8553
sg8
(lp8554
sg10
(lp8555
S'2006/03/23'
p8556
asg12
I0
sg13
(lp8557
sg15
(lp8558
ssS'bind.eventwizard.metamodifiers'
p8559
(dp8560
g4
(lp8561
S'&event'
p8562
asg6
S'{HBind Event Wizard - Meta Modifiers}\n\nMost &events can be modified so they happen {bonly} if one or more special\n"meta" keys are down when the basic &event takes place.\n\nIf you want the &event you are specifying to happen only if, for example, one of\nthe {gAlt} keys is pressed at the time, then select the "Alt" checkbutton.\n\nIf you want your &event to happen regardless of the state of these meta keys,\nthen leave all the checkbuttons in this section of the wizard unchecked.\n\nWhen you are done chosing the meta keys, click on {gNext} to continue.\n\nTo change a previous choice, click on the {GBackUp} button.'
p8563
sg8
(lp8564
sg10
(lp8565
S'2005/03/13'
p8566
asg12
I0
sg13
(lp8567
sg15
(lp8568
S'Bind Event Wizard - Meta Modifiers'
p8569
assS'tutorial'
p8570
(dp8571
g4
(lp8572
S'&project'
p8573
aS'=new-project-details'
p8574
aS'&widgetator'
p8575
aS'&option editor'
p8576
aS'&bind editor'
p8577
aS'&pack editor'
p8578
aS'&layout area'
p8579
aS'&layout editor'
p8580
aS'&code editor'
p8581
aS'&layout editor'
p8582
aS'&frame'
p8583
aS'&code editor'
p8584
aS'=tutorial.2'
p8585
asg6
S'{HTurorial}\n\nHello new user!\n\nThis tutorial is designed introduce you to $$ by stepping you through the process of creating\na simple "Hello World" project. This tutorial presumes that you are already familiar with\nPython and Tkinter.\n\nSince you are reading this message (I can see your eyeballs moving) I am assuming you were\nsuccessful at starting $$ and finding the help system. Speaking of help, you can get help\nabout almost everything you see within the $$ window by putting the cursor over it and\nclicking the $hb.\n\nOh, another little detail about help. Right now you are looking at the "tutorial" help page.\nReal Soon now were going to have you do some stuff and while you are doing that stuff there\nwill be lots of opportunities to click on "help" buttons or use the $hb to call up help. Once\nyou have finished with any such help messages, you can use the {gBack} button within the help\nwindow to get back to this help page.\n\nFirst lets create a new, empty &project named {gHello}. To do that from the main menu\n\n{P$imgpr-help-MainMenu.ppm}\n\nclick on {gProject} and then on {gNew Project}. {LClick here=new-project-details} for details\nabout exactly what happens when you create a new project. Once you have created the new\nproject, lets take a quick tour around the $$ window.\n\no On the left is the &widgetator which is where you use the &option editor, the &bind editor\n  and the &pack editor to mess around with the characteristics of widgets.\n\no On the right is the &layout area which is timeshared between the &layout editor (what you\n  are seeing right now) and the &code editor (which we\'ll get to in a minute). You use the\n  &layout editor to arrange &frames and widgets within your form while the &code editor is for\n  working on the Python code that makes your application go.\n\n         t ===> {LNext Tutorial Page=tutorial.2}'
p8586
sg8
(lp8587
sg10
(lp8588
S'2006/03/16'
p8589
asg12
I0
sg13
(lp8590
sg15
(lp8591
S'A hello-world tutorial'
p8592
assS'wid.tkinter.menubutton.opt.pyclass'
p8593
(dp8594
g4
(lp8595
sg6
S'>option.pyclass.generic "Menubutton"'
p8596
sg8
(lp8597
sg10
(lp8598
sg12
I0
sg13
(lp8599
sg15
(lp8600
ssS'project.new.dialog'
p8601
(dp8602
g4
(lp8603
S'&project'
p8604
aS'&project'
p8605
aS'=project.files'
p8606
aS'&project'
p8607
aS'&project'
p8608
aS'&module'
p8609
aS'&project'
p8610
aS'&module'
p8611
aS'&project'
p8612
asg6
S'{HThe New Project dialog}\n\nThe New Project dialog pops up when you ask to create a new &project. We need\ntwo pieces of information from you:\n\n n The name for the new &project, and\n\n n The directory into which the {Lproject\'s files=project.files} should be\n   saved.\n\no The name you enter for the &project should be just the plain name, no\n  extension.\n\no A default directory is shown on a button in the dialog. If you want your\n  &project to be saved in a different directory, click on the button and then\n  select the desired directory.\n\no Every $$ project has a "main module"; this is the Python &module which is\n  executed when it comes time to run the project. The &project and the main\n  &module of the &project always share the same name.'
p8613
sg8
(lp8614
sg10
(lp8615
S'2005/05/26'
p8616
asg12
I0
sg13
(lp8617
sg15
(lp8618
S'The New Project dialog'
p8619
assS'wid.tkinter.menubutton.opt.takefocus'
p8620
(dp8621
g4
(lp8622
sg6
S'>option.takefocus.generic "Menubutton"'
p8623
sg8
(lp8624
sg10
(lp8625
sg12
I0
sg13
(lp8626
sg15
(lp8627
ssS'form.invalidbaseclassname'
p8628
(dp8629
g4
(lp8630
S'&name rules'
p8631
asg6
S'{HInvalid "derive-from" class name} #<2006/03/12\n\nThe name of the class you specified does not conform to the Python name\nrules. Please correct the name or select one of the\n\n o {gTkinter.Toplevel}\n o {gTkinter.Frame}\n o {gPmw.ScrolledFrame}\n\nchoices.'
p8632
sg8
(lp8633
sg10
(lp8634
sg12
I0
sg13
(lp8635
sg15
(lp8636
ssS'project.rename.dialog.fileexists'
p8637
(dp8638
g4
(lp8639
S'&module'
p8640
aS'&module'
p8641
aS'&project'
p8642
aS'&project'
p8643
aS'&module'
p8644
aS'&project'
p8645
aS'&project'
p8646
aS'&project'
p8647
aS'&project'
p8648
aS'&module'
p8649
aS'&project'
p8650
aS'=project.files'
p8651
asg6
S'{HProject already exists warning}\n\nYou just asked to rename the main &module from "{b@2}" to "{b@0}". Since the\nname of the main &module is also the name of the entire &project that means the\n&project itself is being renamed. However, I note that there is already a file\nnamed "{b@1}" in existence.\n\nIf you go ahead and rename the &module and the &project to "@0" then the first\ntime the &project is saved the existing file "@1" will be overwritten with the\ndata for the renamed &project. If you are OK with this then so am I; just\nthought I should warn you that what looks to be an existing &project will be\nwiped out if you go ahead.\n\nIf you are {bnot} OK with this, then click {gCancel} and either enter a\ndifferent name for the &module and &project or cancel the rename altogether.\n\n{LClick here=project.files} for information about the file of a $$ project.'
p8652
sg8
(lp8653
sg10
(lp8654
S'2005/05/27'
p8655
aS'@0 The requested name of the module'
p8656
aS'@1 The path for the project file'
p8657
aS'@2 The current name of the module'
p8658
asg12
I0
sg13
(lp8659
sg15
(lp8660
ssS'howto.find.handler.references'
p8661
(dp8662
g4
(lp8663
S'&form'
p8664
aS'&binding'
p8665
aS'&command option'
p8666
aS'&event'
p8667
aS'&handler'
p8668
aS'&event'
p8669
aS'&handler'
p8670
aS'&maintained'
p8671
aS'&binding'
p8672
aS'&command option'
p8673
aS'&event'
p8674
aS'&handler'
p8675
aS'&event'
p8676
aS'&command option'
p8677
aS'&bind editor'
p8678
aS'&command option'
p8679
aS'&command option'
p8680
aS'&option editor'
p8681
aS'&maintained'
p8682
aS'&bind editor'
p8683
aS'&option editor'
p8684
aS'&handler'
p8685
asg6
S"{HHow to: Find the references to an event handler}\n\nAny number of widgets in a &form can, through &bindings and &command\noptions, reference a single &event &handler.\n\nTo find all the references to a given handler:\n\n o Find the event handler in the code editor.\n\n o Right click over the header (any of the text on a different colored\n   background) of the &event &handler.\n\n o Choose the {gSee references} item of the popup menu.\n\nThe resulting dialog shows a list of all $$ &maintained &bindings and\n&command options which reference the &event &handler. Each reference\nshows, on the left, the name of the widget and, on the right, the &event\nstring or &command option within that widget which makes the reference.\n\no You can tell event strings because they are enclosed in angle brackets\n  {f<like this>}. Event string type references are mainted by the widget's\n  &bind editor.\n\no &Command options do not have angle brackets. &Command option style\n  references are maintainted by the widget's &option editor.\n\nThe references show in this dialog are {ionly} those references which are\n&maintained by $$ via the &bind editor and the &option editor. Any\nreferences to this &handler which you have placed in your code by hand are\n{inot} reflected here."
p8686
sg8
(lp8687
sg10
(lp8688
S'2006/02/15'
p8689
asg12
I0
sg13
(lp8690
sg15
(lp8691
S'How to: Find the references to an event handler'
p8692
assS'option.show.generic'
p8693
(dp8694
g4
(lp8695
S'&new mexico tech'
p8696
asg6
S'{H@0 - show}\n\nNormally, the characters that the user types appear in the entry. To make a\n"password" entry that echoes each character as an asterisk, set show to {G*}.\n\n$nmt'
p8697
sg8
(lp8698
sg10
(lp8699
S'2005/04/04'
p8700
asg12
I0
sg13
(lp8701
sg15
(lp8702
ssS'wid.pmw.scrolledlistbox.opt.labelpos'
p8703
(dp8704
g4
(lp8705
sg6
S">option.pmw.labelpos.generic 'ScrolledListBox'"
p8706
sg8
(lp8707
sg10
(lp8708
sg12
I0
sg13
(lp8709
sg15
(lp8710
ssS'dialog-handlerrename'
p8711
(dp8712
g4
(lp8713
S'&maintained'
p8714
aS'&event'
p8715
aS'&handler'
p8716
aS'&handler'
p8717
aS'&handler'
p8718
aS'&maintained'
p8719
aS'&handler'
p8720
asg6
S'{hThe event handler rename dialog}\n\nThis dialog shows you:\n\no The number of $$ &maintained references to this &event &handler.\n\no The current name of the &handler.\n\nKey in the new name for the &handler and click on OK. All $$ &maintained\nreferences to this &handler will be adjusted as necessary.'
p8721
sg8
(lp8722
sg10
(lp8723
S'2006/02/05'
p8724
asg12
I0
sg13
(lp8725
sg15
(lp8726
S'The event handler rename dialog'
p8727
assS'option.takefocus.generic'
p8728
(dp8729
g4
(lp8730
S'&focus'
p8731
asg6
S'{H@0 - takefocus}\n\nDetermines if and when the &focus visits this @0. There are three possible\nsettings.\n\n{GYes } - This @0 should receive the input focus as long as it is viewable\n(it and all of its ancestors are mapped).\n\n{GNo  } - This @0 should never receive the focus.\n\n{GAuto} - The decision about the focus will be made automatically by Tkinter.\nThe @0 will receive the focus unless:\n\n  o it is disabled, or\n  o it has no key bindings, or\n  o it is not viewable.'
p8732
sg8
(lp8733
sg10
(lp8734
S'<2005/04/08'
p8735
asg12
I0
sg13
(lp8736
sg15
(lp8737
ssS'option.default'
p8738
(dp8739
g4
(lp8740
S'&option editor'
p8741
aS'&pack editor'
p8742
asg6
S"{HHow to: Restore the default value of an option or pack setting}\n\nSo you set the background color to flaming red, you've decided you don't like\nthat, you want to put it back to the default color but you've forgotten what\nthe default color {bis}. What to do?\n\nIn the &option editor and the &pack editor, all the options which have an\nentry area following the name - like the background option shown here...\n\n{P$imgpr-help-Background.ppm}\n\nwill revert to their default value if you delete all characters from the\nentry and then press {gReturn} or move to a different option.\n\nFor those options where you choose from a list rather than entering a value\nthe default choice is indicated by an asterisk as the last character."
p8743
sg8
(lp8744
S'default'
p8745
asg10
(lp8746
S'2006/03/19'
p8747
asg12
I0
sg13
(lp8748
sg15
(lp8749
S'How to: Restore the default value of an option or pack setting'
p8750
assS'wid.pmw.notebook.opt.createcommand'
p8751
(dp8752
g4
(lp8753
S'&command option'
p8754
aS'&event'
p8755
aS'&handler'
p8756
asg6
S'{HNoteBook - createcommand}\n\nA &command option which specifies the &event &handler to call when a page is\nselected for the first time. The function is called with a single argument,\nwhich is the name of the selected page, and is called before the {fraisecommand}\nfunction. This allows the creation of the page contents to be deferred until\nthe page is first displayed.'
p8757
sg8
(lp8758
sg10
(lp8759
S'2006/03/21'
p8760
asg12
I0
sg13
(lp8761
sg15
(lp8762
ssS'edit-schema.no-bind'
p8763
(dp8764
g4
(lp8765
S'=howto.select.editor.schema'
p8766
asg6
S'{HEdit schema - no binding}\n\nThe editing function you asked about has no specific key assigned to it\nbecause the editing scheme "$editschema", as defined in the configuration\nfile $configfile, didn\'t assign a key to that function.\n\nIf you want to assign a key to that function then open $configfile with your\nfavorite text editor, find the section which starts with\n\nt {f[EditorScheme $editschema]}\n\nAbout 20 lines below that should be the section where editor actions are\nbound to specific keys; modify as necessary.\n\nInformation on changing the default schema is located\n{Lhere=howto.select.editor.schema}.'
p8767
sg8
(lp8768
sg10
(lp8769
sg12
I0
sg13
(lp8770
sg15
(lp8771
ssS'wid.tkinter.checkbutton.opt.anchor'
p8772
(dp8773
g4
(lp8774
sg6
S'>option.anchor.generic "Checkbutton"'
p8775
sg8
(lp8776
sg10
(lp8777
sg12
I0
sg13
(lp8778
sg15
(lp8779
ssS'wid.pmw.scrolledlistbox.overview'
p8780
(dp8781
g4
(lp8782
sg6
S'{HWhat is: A ScrolledListBox widget}\n\nA scrolled listbox consists of a standard listbox widget with optional\nscrollbars which can be used to scroll the listbox. The scrollbars can be\ndynamic, which means that a scrollbar will only be displayed if it is\nnecessary. That is, if the listbox does not contain enough entries, the\nvertical scrollbar will be automatically hidden and if the entries are not\nwide enough, the horizontal scrollbar will be automatically hidden.'
p8783
sg8
(lp8784
sg10
(lp8785
S'2006/03/21'
p8786
asg12
I0
sg13
(lp8787
sg15
(lp8788
S'What is: A ScrolledListBox widget'
p8789
assS'wid.tkinter.canvas.opt.highlightthickness'
p8790
(dp8791
g4
(lp8792
sg6
S'>option.highlightthickness.generic "Canvas"'
p8793
sg8
(lp8794
sg10
(lp8795
sg12
I0
sg13
(lp8796
sg15
(lp8797
ssS'layout-frame-create'
p8798
(dp8799
g4
(lp8800
S'&form'
p8801
aS'&layout editor'
p8802
aS'&layout editor'
p8803
aS'=howto.scrolledframe'
p8804
aS'=layout-frame-delete'
p8805
aS'&form'
p8806
aS'&form'
p8807
aS'&form'
p8808
aS'=layout-frame-insert'
p8809
asg6
S"{HCreating frames in the layout editor}\n\nYou create frames in the &form on the &layout editor by drawing lines. To draw a line:\n\n o Click and hold the left mouse button about where you want the line.\n\n o While holding the left mouse button down, drag a short distance in the same direction as\n   you want the line to be. That is, for a vertical line move the mouse down a bit; for a\n   horizontal move the mouse right a bit. A line will spring into existence dividing the area\n   into two frames.\n\n o While continuing to hold the left button down, drag to position the line where you want it.\n\n o When the line is in it's final location, release the left mouse button.\n\n o If, as you are dragging the line around, you decide you don't to create a new frame after\n   all, drag the cursor until it is outside the &layout editor and then release the button.\n\n o Newly created frames are of type {fTkinter.Frame} but it's easy to change a frame to be a\n   {lPmw.ScrolledFrame=howto.scrolledframe}.\n\nIf you have created a frame but now want it to go away, it can {Lbe\ndeleted=layout-frame-delete}.\n\n\nNote that lines created as described above are always 'spanlines', that is, they span as much\ndistance as they can, stopping only when they meet a perpindicular line or the edge of the\n&form. This reflects the behavior of the Tkinter {gpack} geometry manager which is ultimately\ngoing to be what makes the layout of the form happen. The {gpack} manager is versitile and\nuseful, but it has it's own particular take on how you lay out &forms.\n\nIf you have come from some other platform and are expecting to start droping widgets at\nabsolute locations or sprinkle rectangles at random on the &form, that's not the way it works\nhere. $$ is a visual front end on top of the {gpack} geometry manager and it wouldn't be a bad\nidea to have at least some knowledge of how {Gpack} works, although at the moment that topic\nis beyond the scope of this help document.\n\n{HInserting frames}\n\nWhile the above method of creating new frames by drawing a line is quick and easy, there are\nsome things that it can not do. In particular if you want to shove an existing frame over and\ncreate a new frame along one of it's sides, then {Linsert frame=layout-frame-insert} is what\nyou need; click on the link for details."
p8810
sg8
(lp8811
sg10
(lp8812
S'2005/03/05'
p8813
asg12
I0
sg13
(lp8814
sg15
(lp8815
S'Creating frames in the layout editor'
p8816
aS'How to: Add a new frame to a form'
p8817
assS'option.yscrollcommand.generic'
p8818
(dp8819
g4
(lp8820
sg6
S'{H@0 - yscrollcommand}\n\nIf the @0 is scrollable, this attribute should be the {g.set()} method of\nthe vertical scrollbar.'
p8821
sg8
(lp8822
sg10
(lp8823
S'2005/04/07'
p8824
asg12
I0
sg13
(lp8825
sg15
(lp8826
ssS'tutorial.3'
p8827
(dp8828
g4
(lp8829
S'&option editor'
p8830
aS'&widgetator'
p8831
aS'&widgetator'
p8832
aS'&bind editor'
p8833
aS'=tutorial.2'
p8834
aS'=tutorial.4'
p8835
asg6
S'{HTutorial - page 3}\n\nOver on the left in the &option editor there will be a list of all the\noptions of the Label widget. To find out what a particular options is about\nclick the $hb over the option. Right now, find the {gText} option (you may\nhave to scroll the options to get to it)\n\n{P$imgpr-help-TextOption.ppm}\n\nand click within the entry area to the right of the word "text" then key in\nthe text "Hello World" then press the {gEnter} key. A quick peek at the code\nwill show that it has been updated to set the text of the label widget.\n\nNow drag a {gButton} widget from the widget buffet and place it on the form\njust under the {gLabel} widget. In the option editor for the Button, set it\'s\n{gText} option to "Quit". Note that the editors shown in the &widgetator are\nthose of the currently selected widget. The easiest way to select a\nparticular widget is simply to click on it.\n\nNext we want to create a binding and an event handler for the button. Make\nsure the just-created button widget is selected (it should have a border\naround it indicating selection) then click on the {gBindings} tab at the top\nof the &widgetator to select the &bind editor. It should now look something\nlike this:\n\n{P$imgpr-help-tut-BindEditor.ppm}\n\nClick on the {gCreate New Binding} button.\n\n{LPrevious Tutorial Page=tutorial.2}  <===>  {LNext Tutorial Page=tutorial.4}'
p8836
sg8
(lp8837
sg10
(lp8838
S'2006/03/17'
p8839
asg12
I0
sg13
(lp8840
sg15
(lp8841
ssS'wid.tkinter.radiobutton.opt.activebackground'
p8842
(dp8843
g4
(lp8844
sg6
S'>option.activebackground.generic "Radiobutton"'
p8845
sg8
(lp8846
sg10
(lp8847
sg12
I0
sg13
(lp8848
sg15
(lp8849
ssS'option.showvalue.generic'
p8850
(dp8851
g4
(lp8852
S'&new mexico tech'
p8853
asg6
S'{H@0 - showvalue}\n\nNormally, the current value of the scale is displayed in text form by the\nslider (above it for horizontal scales, to the left for vertical scales). Set\nthis option to {gfalse} to suppress that label.\n\n$nmt'
p8854
sg8
(lp8855
sg10
(lp8856
S'2005/04/04'
p8857
asg12
I0
sg13
(lp8858
sg15
(lp8859
ssS'wid.pmw.timecounter.opt.value'
p8860
(dp8861
g4
(lp8862
sg6
S'{HTimecounter - value}\n\nSpecifies the initial contents of the time counter, in the form "HH:MM:SS".\nIf omitted, the current time is used as the initial contents.'
p8863
sg8
(lp8864
sg10
(lp8865
S'2006/03/24'
p8866
asg12
I0
sg13
(lp8867
sg15
(lp8868
ssS'wid.pmw.scrolledframe.opt.horizfraction'
p8869
(dp8870
g4
(lp8871
S'&default'
p8872
asg6
S'{HScrolledFrame - horizfraction}\n\nThe fraction of the width of the clipper frame to scroll the interior frame\nwhen the user clicks on the horizontal scrollbar arrows. The &default is\n0.05.'
p8873
sg8
(lp8874
sg10
(lp8875
S'2006/03/23'
p8876
asg12
I0
sg13
(lp8877
sg15
(lp8878
ssS'wid.tkinter.radiobutton.opt.highlightcolor'
p8879
(dp8880
g4
(lp8881
sg6
S'>option.highlightcolor.generic "Radiobutton"'
p8882
sg8
(lp8883
sg10
(lp8884
sg12
I0
sg13
(lp8885
sg15
(lp8886
ssS'name-rules'
p8887
(dp8888
g4
(lp8889
S'&module'
p8890
aS'&form'
p8891
aS'&module'
p8892
aS'&project'
p8893
aS'&form'
p8894
aS'&module'
p8895
aS'&form'
p8896
asg6
S'{HAcceptable names for Modules, Forms and Widgets}\n\nNames chosen for &Modules, &Forms and for Widgets must:\n\n o Start with a letter or underscore "{f_}"\n\n o If longer than one character in length, the additional characters can be\n   letters, digits or underscore   \n\n\no &Module names must be unique within a &project.\n \no &Form names must be unique within their &module.\n\no Widget names must be unique within their &form.'
p8897
sg8
(lp8898
S'name rules'
p8899
asg10
(lp8900
S'<2005/04/07'
p8901
asg12
I0
sg13
(lp8902
sg15
(lp8903
S'Acceptable names for Modules, Forms and Widgets'
p8904
assS'wid.pmw.notebook.opt.pyclass'
p8905
(dp8906
g4
(lp8907
sg6
S'>option.pyclass.generic "NoteBook"'
p8908
sg8
(lp8909
sg10
(lp8910
sg12
I0
sg13
(lp8911
sg15
(lp8912
ssS'wid.tkinter.menu.opt.relief'
p8913
(dp8914
g4
(lp8915
sg6
S'>option.relief.generic "Menu"'
p8916
sg8
(lp8917
sg10
(lp8918
sg12
I0
sg13
(lp8919
sg15
(lp8920
ssS'pack-editor.resizeknobs'
p8921
(dp8922
g4
(lp8923
S'&pack editor'
p8924
asg6
S"{bPack Editor - Resize Knobs} {P$imgpr-help-Resize.ppm}\n\nThese are the &pack editor's resize knobs, both of which can be dragged left\nor right.\n\n o Dragging the first resize knob adjusts the width of the area which shows\n   the option names.\n\n o Dragging the second resize knob adjusts the width of the edit area in\n   which you set the value of the options.\n\n{bNote}: To make the edit area wider, you can drag the second resize knob off\nthe right side of the option editor. Although the resize knob itself stops at\nthe edge of the option editor, the position of the mouse is still being\nfollowed and the edit area will resize appropriately."
p8925
sg8
(lp8926
sg10
(lp8927
S'2005/05/12'
p8928
asg12
I0
sg13
(lp8929
sg15
(lp8930
ssS'option.pmw.labelpos.generic'
p8931
(dp8932
g4
(lp8933
sg6
S'{H@0 - labelpos}\n\nSpecifies where to place the {glabel} component.\n\n o If {gNone}, no {glabel} component is created.\n\n o If not {gNone}, the first letter specifies on which side of the @0 to place\n   the label and the second letter, if any, indicates where on that side to\n   place the label.'
p8934
sg8
(lp8935
sg10
(lp8936
S'2006/03/18'
p8937
asg12
I0
sg13
(lp8938
sg15
(lp8939
ssS'wid.tkinter.scale.opt.repeatdelay'
p8940
(dp8941
g4
(lp8942
sg6
S'>option.repeatdelay.generic "Scale"'
p8943
sg8
(lp8944
sg10
(lp8945
sg12
I0
sg13
(lp8946
sg15
(lp8947
ssS'form-properties-dialog-noname'
p8948
(dp8949
g4
(lp8950
S'=form-properties-dialog-other'
p8951
asg6
S'{HForm "Derive-From"}\n\nThis dialog is where you can change the class from which this form is to be derived.\n\nThe form must derive, directly or indirectly, from either {gToplevel}, {gFrame}, {gScrolledFrame} or from a class\nwhich provides equivalent functionality. If you think you want to derive from {fCanvas}, {fText} or something like\nthat, {lclick here=form-properties-dialog-other}.\n\nThe simple solution is to derive directly from {gToplevel}, {GFrame} or {gScrolledFrame} and if you are not totally\nsure about it, then this is the solution for you; use the following two rules to help you decide between the two:\n\n n Derive from {gToplevel} if this form is designed to live in its own private window on the screen. This is the\n   case for dialogs and other major components of an application.\n\n n Derive from {gFrame} or {gScrolledFrame} if this form is designed to be built into something else. This is the\n   case for user written widgets.\n\nFor advanced user, you can choose to derive from something which was itself derived from either {gToplevel},\n{gFrame} or {gScrolledFrame}. This will be the case if you want to use a class which was derived from one of these\nbut adds additional functionality. To do this choose one of:\n\n o {gA widget derived from Tkinter.Toplevel}\n o {gA widget derived from Tkinter.Frame}\n o {gA widget derived from Pmw.ScrolledFrame}\n\nand then key in the name of the actual class from which to derive. $$ does not check that the class you specify is\nin fact derived from {gToplevel}, {gFrame}, {gScrolledFrame} or something which provides equivalent functionality;\nif you lie about this you will just crash and burn when you go to run the resulting code, OK?'
p8952
sg8
(lp8953
sg10
(lp8954
S'2005/04/30'
p8955
asg12
I0
sg13
(lp8956
sg15
(lp8957
S'Setting the class from which your form derives'
p8958
assS'code-edit.action.outdentblock'
p8959
(dp8960
g4
(lp8961
S'&editor actions'
p8962
asg6
S'{HCode editor - Outdent block}\n\n Key:   $tActionOutdentBlock\n Menu: {fEdit/Indent block}\n\nEvery line in the currently selected block is outdented by the {gindent} amount.\n\nIf any of the lines in the block have too few spaces at the front for the\noutdent to happen then {bnone} of the lines in the block are outdented.\n\nThe indent amount is specified in the &config file.\n\nCode &editor actions'
p8963
sg8
(lp8964
sg10
(lp8965
S'2005/04/07'
p8966
asg12
I0
sg13
(lp8967
sg15
(lp8968
S'Code editor - Outdent block'
p8969
assS'wid.tkinter.entry.opt.cursor'
p8970
(dp8971
g4
(lp8972
sg6
S'>option.cursor.generic "Entry"'
p8973
sg8
(lp8974
sg10
(lp8975
sg12
I0
sg13
(lp8976
sg15
(lp8977
ssS'option-images'
p8978
(dp8979
g4
(lp8980
S'&bitmap'
p8981
asg6
S"{HImages}\n\nSome widgets (eg Buttons, Labels etc,) can display an image. Note that\n&bitmaps and images are different entities although they do a similar job.\n\nYou need the Python Imaging Library (PIL) to put images in widgets. You\nshould refer to the PIL for full documentation but, in brief, a popular way\nto bring in an image is:\n\n t {gMyImage = PhotoImage(file='myimage.ppm')}\n\nThe {fPhotoImage} method can process images in {g.pbm} (black and white),\n{g.pgm} (grayscale) and {g.ppm} (full color) formats. *\n\nAssuming that you now have an image in object {gMyImage} you can put that\nimage on a widget at creation time:\n\n t {gMyButton = Tkinter.Button(image=MyImage,yadayadayada)}\n\nof after a widget has been created:\n\n t {gMyButton['image'] = MyImage}\n\nFor widgets being created by {b$$} you can specify the name of the image\nobject in the widgets image option using the option editor.\n\n - - - - -\n\n*  {fPhotoImage} can in fact handle {f.gif} format file, but gif's -\ninvolving as they do software patents, retch, gag, ralph - are something nobody in\ntheir right mind uses any more. Death to software patents. See:\n\nt {fhttp://lpf.ai.mit.edu/Patents/against-software-patents.html\nt http://www.nosoftwarepatents.com/en/m/intro/index.html}"
p8982
sg8
(lp8983
S'image'
p8984
asg10
(lp8985
S'2005/02/22'
p8986
asg12
I0
sg13
(lp8987
sg15
(lp8988
S'Images'
p8989
assS'wid.tkinter.menubutton.opt.justify'
p8990
(dp8991
g4
(lp8992
sg6
S'>option.justify.generic "Menubutton"'
p8993
sg8
(lp8994
sg10
(lp8995
sg12
I0
sg13
(lp8996
sg15
(lp8997
ssS'wid.tkinter.toplevel.opt.nametop'
p8998
(dp8999
g4
(lp9000
sg6
S'>option.nametop.generic "Toplevel"'
p9001
sg8
(lp9002
sg10
(lp9003
sg12
I0
sg13
(lp9004
sg15
(lp9005
ssS'buffet.widget.scrolledcanvas'
p9006
(dp9007
g4
(lp9008
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledCanvas", \'\', \'wid.pmw.scrolledcanvas.overview\''
p9009
sg8
(lp9010
sg10
(lp9011
sg12
I0
sg13
(lp9012
sg15
(lp9013
ssS'buffet.widget.menu'
p9014
(dp9015
g4
(lp9016
sg6
S'>buffet.widget.generic "Menu"'
p9017
sg8
(lp9018
sg10
(lp9019
sg12
I0
sg13
(lp9020
sg15
(lp9021
ssS'wid.tkinter.label.opt.justify'
p9022
(dp9023
g4
(lp9024
sg6
S'>option.justify.generic "Label"'
p9025
sg8
(lp9026
sg10
(lp9027
sg12
I0
sg13
(lp9028
sg15
(lp9029
ssS'wid.tkinter.checkbutton.opt.width'
p9030
(dp9031
g4
(lp9032
S'&image'
p9033
aS'&bitmap'
p9034
aS'&new mexico tech'
p9035
asg6
S'{hCheckbutton - width}\n\nThe default width of a Checkbutton is determined by the size of the displayed\ntext, &image or &bitmap. You can set this option to a numer of characters and\nthe Checkbutton will always have room for that many characters.\n\n$nmt'
p9036
sg8
(lp9037
sg10
(lp9038
S'2005/04/16'
p9039
asg12
I0
sg13
(lp9040
sg15
(lp9041
ssS'wid.tkinter.text.opt.background'
p9042
(dp9043
g4
(lp9044
sg6
S'>option.background.generic "Text"'
p9045
sg8
(lp9046
sg10
(lp9047
sg12
I0
sg13
(lp9048
sg15
(lp9049
ssS'wid.tkinter.label.opt.highlightcolor'
p9050
(dp9051
g4
(lp9052
sg6
S'>option.highlightcolor.generic "Label"'
p9053
sg8
(lp9054
sg10
(lp9055
sg12
I0
sg13
(lp9056
sg15
(lp9057
ssS'wid.tkinter.scrollbar.opt.jump'
p9058
(dp9059
g4
(lp9060
sg6
S'>option.jump.generic "Scrollbar"'
p9061
sg8
(lp9062
sg10
(lp9063
sg12
I0
sg13
(lp9064
sg15
(lp9065
ssS'code-edit.searchandreplace'
p9066
(dp9067
g4
(lp9068
S'=search.replace-dialog'
p9069
aS'&editor actions'
p9070
asg6
S'{HCode editor - Search and replace}\n\n Key:   $tActionSearchReplace\n Menu: {fSearch/Search and replace}\n\nPuts up a {ldialog=search.replace-dialog} to initiate a search and replace\noperation.\n\nOptions are provided to:\n\n o Be prompted prior to each replacement.\n o Relpace one or all occurences.\n o Search from the first line.\n o Search case sensitive or case insensitive.\n o Search forward or backward.\n o Search for straight text or a sub-set of regular expressions.\n\nCode &editor actions.'
p9071
sg8
(lp9072
sg10
(lp9073
S'2005/04/07'
p9074
asg12
I0
sg13
(lp9075
sg15
(lp9076
S'Code editor - Search and replace'
p9077
assS'wid.tkinter.menubutton.opt.underline'
p9078
(dp9079
g4
(lp9080
sg6
S'>option.underline.generic "Menubutton"'
p9081
sg8
(lp9082
sg10
(lp9083
sg12
I0
sg13
(lp9084
sg15
(lp9085
ssS'wid.tkinter.entry.opt.selectborderwidth'
p9086
(dp9087
g4
(lp9088
sg6
S'>option.selectborderwidth.generic "Entry", "text"'
p9089
sg8
(lp9090
sg10
(lp9091
sg12
I0
sg13
(lp9092
sg15
(lp9093
ssS'wid.tkinter.menu.opt.background'
p9094
(dp9095
g4
(lp9096
S'&new mexico tech'
p9097
asg6
S'{HMeun - background}\n\nThe background color for choices not under the mouse.\n\n$nmt'
p9098
sg8
(lp9099
sg10
(lp9100
S'2005/04/19'
p9101
asg12
I0
sg13
(lp9102
sg15
(lp9103
ssS'wid.pmw.counter.opt.increment'
p9104
(dp9105
g4
(lp9106
sg6
S'{HCounter - increment}\n\nSpecifies how many units should be added or subtracted when\nthe counter is incremented or decremented. If the currently displayed\nvalue is not a multiple of {gincrement}, the value is\nchanged to the next multiple greather or less than the current value.\n\nFor the number datatypes, the value is a number. For the {gtime}\ndatatype, the value is in seconds. For the {gdate} datatype, the value is\nin days.'
p9107
sg8
(lp9108
sg10
(lp9109
S'2006/03/18'
p9110
asg12
I0
sg13
(lp9111
sg15
(lp9112
ssS'wid.tkinter.radiobutton.opt.pyclass'
p9113
(dp9114
g4
(lp9115
sg6
S'>option.pyclass.generic "Radiobutton"'
p9116
sg8
(lp9117
sg10
(lp9118
sg12
I0
sg13
(lp9119
sg15
(lp9120
ssS'wid.tkinter.menubutton.opt.menu'
p9121
(dp9122
g4
(lp9123
sg6
S'>option.menu.generic "Menubutton"'
p9124
sg8
(lp9125
sg10
(lp9126
sg12
I0
sg13
(lp9127
sg15
(lp9128
ssS'project.new.dialog.fileexists'
p9129
(dp9130
g4
(lp9131
S'&project'
p9132
aS'&project'
p9133
aS'&project'
p9134
aS'=project.files'
p9135
aS'&project'
p9136
asg6
S"{HFile warning}\n\nYou are in the process of creating a new $$ &project but - as mentioned in the\ndialog - one or two files already exist that will be wiped out if a &project\nof the requested name is created.\n\nIf you continue then when the &project is saved or built, the file(s) mentioned\nwill be overwritten by the {Lproject's files=project.files}. If you know for\nsure that you don't want to keep the existing files then go ahead and click\n{gKeep going}. In all other cases click {gCancel} and pick a different name\nfor your &project."
p9137
sg8
(lp9138
sg10
(lp9139
S'2005/05/26'
p9140
asg12
I0
sg13
(lp9141
sg15
(lp9142
ssS'wid.tkinter.canvas.opt.xscrollcommand'
p9143
(dp9144
g4
(lp9145
sg6
S'>option.xscrollcommand.generic "Canvas"'
p9146
sg8
(lp9147
sg10
(lp9148
sg12
I0
sg13
(lp9149
sg15
(lp9150
ssS'wid.tkinter.canvas.opt.insertborderwidth'
p9151
(dp9152
g4
(lp9153
sg6
S'>option.insertborderwidth.generic "Canvas"'
p9154
sg8
(lp9155
sg10
(lp9156
sg12
I0
sg13
(lp9157
sg15
(lp9158
ssS'wid.pmw.menubar.opt.hotkeys'
p9159
(dp9160
g4
(lp9161
sg6
S">option.pmw.hotkeys.generic 'MenuBar'"
p9162
sg8
(lp9163
sg10
(lp9164
sg12
I0
sg13
(lp9165
sg15
(lp9166
ssS'wid.tkinter.radiobutton.opt.takefocus'
p9167
(dp9168
g4
(lp9169
sg6
S'>option.takefocus.generic "Radiobutton"'
p9170
sg8
(lp9171
sg10
(lp9172
sg12
I0
sg13
(lp9173
sg15
(lp9174
ssS'wid.tkinter.radiobutton.opt.underline'
p9175
(dp9176
g4
(lp9177
sg6
S'>option.underline.generic "Radiobutton"'
p9178
sg8
(lp9179
sg10
(lp9180
sg12
I0
sg13
(lp9181
sg15
(lp9182
ssS'code-edit.findmatch'
p9183
(dp9184
g4
(lp9185
sg6
S'{HCode editor - find matching}\n\nIf the character to the right of the cursor is a\n\n o Square bracket [ ] \n o Curly bracket   {{ }\n o Parentheses    ( )\n\nthen this action looks for and highlights in red the matching character.'
p9186
sg8
(lp9187
sg10
(lp9188
S'2005/04/16'
p9189
asg12
I0
sg13
(lp9190
sg15
(lp9191
S'Code editor - find matching bracket, brace, parenthesis'
p9192
assS'wid.tkinter.frame.opt.cursor'
p9193
(dp9194
g4
(lp9195
sg6
S'>option.cursor.generic "Frame"'
p9196
sg8
(lp9197
sg10
(lp9198
sg12
I0
sg13
(lp9199
sg15
(lp9200
ssS'wid.tkinter.scrollbar.opt.repeatinterval'
p9201
(dp9202
g4
(lp9203
sg6
S'>option.repeatinterval.generic "Scrollbar"'
p9204
sg8
(lp9205
sg10
(lp9206
sg12
I0
sg13
(lp9207
sg15
(lp9208
ssS'wid.tkinter.checkbutton.opt.onvalue'
p9209
(dp9210
g4
(lp9211
sg6
S'>option.onvalue.generic "Checkbutton"'
p9212
sg8
(lp9213
sg10
(lp9214
sg12
I0
sg13
(lp9215
sg15
(lp9216
ssS'wid.pmw.timecounter.opt.labelpos'
p9217
(dp9218
g4
(lp9219
sg6
S">option.pmw.labelpos.generic 'TimeCounter'"
p9220
sg8
(lp9221
sg10
(lp9222
sg12
I0
sg13
(lp9223
sg15
(lp9224
ssS'wid.tkinter.scale.opt.to'
p9225
(dp9226
g4
(lp9227
sg6
S'>option.to.generic "Scale"'
p9228
sg8
(lp9229
sg10
(lp9230
sg12
I0
sg13
(lp9231
sg15
(lp9232
ssS'wid.pmw.notebook.opt.tabpos'
p9233
(dp9234
g4
(lp9235
S'&default'
p9236
asg6
S"{HNoteBook - tabpos}\n\nSpecifies the location of the tabs. If '{gn}', tabs are created for each page\nand positioned at the top of the notebook. If {gNone}, no tabs are created, in\nwhich case another selection widget can be used to select pages by calling\nthe selectpage()  method. The &default is '{gn}'."
p9237
sg8
(lp9238
sg10
(lp9239
S'2006/03/21'
p9240
asg12
I0
sg13
(lp9241
sg15
(lp9242
ssS'wid.tkinter.listbox.opt.highlightthickness'
p9243
(dp9244
g4
(lp9245
sg6
S'>option.highlightthickness.generic "Listbox"'
p9246
sg8
(lp9247
sg10
(lp9248
sg12
I0
sg13
(lp9249
sg15
(lp9250
ssS'trashbin'
p9251
(dp9252
g4
(lp9253
S'&layout editor'
p9254
aS'&parking lot'
p9255
asg6
S'{HLayout Editor - The Trash Bin}\n\nThe Trash Bin {P$imgpr-trash.ppm} is part of the &Layout Editor.\n\nTo delete a widget, drag it and drop it on the trash bin. Goodbye widget.\n\nThe Trash Bin is {bnot} a "recycle bin"; once dropped on the Trash Bin the widget\nis gone {bforever}. If you want to move a widget off a form but still keep it\nalive, drag it onto the &Parking Lot.'
p9256
sg8
(lp9257
S'trash bin'
p9258
asg10
(lp9259
S'2005/03/17'
p9260
asg12
I0
sg13
(lp9261
sg15
(lp9262
S'The Trash bin is used to delete widgets.'
p9263
assS'wid.pmw.mainmenubar.overview'
p9264
(dp9265
g4
(lp9266
sg6
S"{HWhat is: A MainMenuBar widget}\n\nThis class is a wrapper for the Tkinter.Menu class. It should be used as the\nmain menu of toplevel windows. The class is similar to Pmw.MenuBar, but\nshould be used when native menus are required. See the Tkinter.Menu\ndocumentation for full details.\n\nThis class should be created as the child of a Tkinter.Toplevel and should\nthen be specified as the menu associated with the toplevel, using the\ntoplevel's {fconfigure()} method. For example:\n\nt {f# Create a Pmw.MegaToplevel.\n   megaToplevel = Pmw.MegaToplevel()\n   # Get the Tkinter.Toplevel from Pmw.MegaToplevel.\n   toplevel = megaToplevel.interior()\n   # Create the menu bar for the toplevel.\n   menuBar = Pmw.MainMenuBar(toplevel)\n   # Configure the toplevel to use the menuBar.\n   toplevel.configure(menu = menuBar)}\n\nThere are methods to add menus, both as toplevel menus and sub-menus, and for\nadding menu items to the menus. Each menu item may have help text to be\ndisplayed by a Pmw.Balloon. Each menu and cascaded menu (sub-menu) is\nreferenced by name which is supplied on creation.\n\nThis megawidget is derived from Pmw.MegaArchetype (not Pmw.MegaWidget like\nmost other megawidgets), with the hull class being Tkinter.Menu.\n\n(Note that due to bugs in Tk's menubar functionality, balloon help has not\nbeen implemented and status help does not work properly.)"
p9267
sg8
(lp9268
sg10
(lp9269
S'2006/03/20'
p9270
asg12
I0
sg13
(lp9271
sg15
(lp9272
S'What is: A MainMenuBar widget'
p9273
assS'wid.pmw.messagebar.opt.labelmargin'
p9274
(dp9275
g4
(lp9276
sg6
S">option.pmw.labelmargin.generic 'MessageBar'"
p9277
sg8
(lp9278
sg10
(lp9279
sg12
I0
sg13
(lp9280
sg15
(lp9281
ssS'module'
p9282
(dp9283
g4
(lp9284
S'&form'
p9285
aS'=layout.menu.modules'
p9286
aS'&project'
p9287
aS'&form'
p9288
aS'&project'
p9289
aS'&module'
p9290
aS'&module'
p9291
aS'&module'
p9292
aS'&project'
p9293
aS'&module'
p9294
aS'&project'
p9295
aS'&module'
p9296
aS'&form'
p9297
aS'&module'
p9298
asg6
S'{hModules - Overview}\n\nA $$ module consists of a main code area and zero or more &forms.\n\nUse the {lModules menu=layout.menu.modules} to muck about with modules.\n\nWhen the &project is built, for each module all the code (from the main code area\nplus code from the &forms) is gathered and written to a file named {gx.py} where\n"{gx}" is the name of the module.\n\nEach $$ &project consists of a primary module and zero or more secondary\nmodules. The name of the primary module is always the same as the name of the\nentire &project. The primary module contains the code to start the &project and\nestablish the main {gTk} loop. Secondary modules are reasonably ordinary Python\nmodules consisting of their main code area (which can be virtually anything you\nwant) plus the code associated with each &form in the module.'
p9299
sg8
(lp9300
g9282
asg10
(lp9301
S'2005/05/25'
p9302
asg12
I0
sg13
(lp9303
sg15
(lp9304
S'What is: A module'
p9305
assS'wid.tkinter.scrollbar.opt.borderwidth'
p9306
(dp9307
g4
(lp9308
sg6
S'{HScrollbar - borderwidth}\n\nThe width of the 3-d borders around the entire perimeter of the trough, and\nalso the width of the 3-d effects on the arrowheads and slider.'
p9309
sg8
(lp9310
sg10
(lp9311
S'2005/04/27'
p9312
asg12
I0
sg13
(lp9313
sg15
(lp9314
ssS'buffet.widget.canvas'
p9315
(dp9316
g4
(lp9317
sg6
S'>buffet.widget.generic "Canvas"'
p9318
sg8
(lp9319
sg10
(lp9320
sg12
I0
sg13
(lp9321
sg15
(lp9322
ssS'load.missing.widgets.form'
p9323
(dp9324
S'Links'
p9325
(lp9326
sS'Text'
p9327
S'\n{HMissing library module noticed at load time}\n\nAs mentioned in the dialog, the module<0/s> {g@3} <0was/were> available the last time the form\nwas saved but <0is/are> not available now. As shown in the following list, there <1is/are>\n@2 widget instance<1/s> which <1was/were> drawn from the missing module<0/s>.\n\n@0\n\nIn the list above\n\n{bWidget} is the type of widget involved.\n\n{bName} is the name by which the widget-instance was known inside the form.\n\nIf you choose {gDelete Widgets} then any widgets in the form which were from the missing\nmodule<0/s> will be deleted. All code which is &maintained by $$ will be in good shape after\nthe deletion but any of your code that referenced the deleted widgets will need to be\nrevised.\n\nIf you choose {gCancel} then loading of the form is cancelled.'
p9328
sS'Hotlinks'
p9329
(lp9330
sS'Comments'
p9331
(lp9332
S'2008-09-26'
p9333
aS'@0 The list of references'
p9334
aS'@1 The number of donor modules missing'
p9335
aS'@2 The number of widget instances involved'
p9336
aS'@3 List of missing donor modules'
p9337
asS'Wip'
p9338
I1
sS'Plurals'
p9339
(lp9340
I1
aI2
asS'Abstracts'
p9341
(lp9342
ssS'wid.pmw.labeledwidget.opt.hull'
p9343
(dp9344
g4
(lp9345
sg6
S">option.pmw.hull.generic 'LabeledWidget'"
p9346
sg8
(lp9347
sg10
(lp9348
sg12
I0
sg13
(lp9349
sg15
(lp9350
ssS'wid.tkinter.scale.opt.background'
p9351
(dp9352
g4
(lp9353
S'&color'
p9354
aS'&new mexico tech'
p9355
asg6
S'{HScale - background}\n\nThe background &color of the parts of the widget that are outside the trough.\n\n$nmt'
p9356
sg8
(lp9357
sg10
(lp9358
S'2005/04/27'
p9359
asg12
I0
sg13
(lp9360
sg15
(lp9361
ssS'wid.tkinter.text.opt.pady'
p9362
(dp9363
g4
(lp9364
sg6
S'>option.pady.generic "Text","widget"'
p9365
sg8
(lp9366
sg10
(lp9367
sg12
I0
sg13
(lp9368
sg15
(lp9369
ssS'wid.pmw.counter.opt.buttonaspect'
p9370
(dp9371
g4
(lp9372
sg6
S">option.pmw.buttonaspect.generic 'Counter', 'arrow button'"
p9373
sg8
(lp9374
sg10
(lp9375
sg12
I0
sg13
(lp9376
sg15
(lp9377
ssS'layout-widget-add'
p9378
(dp9379
g4
(lp9380
S'&layout area'
p9381
aS'&widget buffet'
p9382
aS'&parking lot'
p9383
aS'&form'
p9384
aS'&widget buffet'
p9385
aS'&within'
p9386
aS'&frame'
p9387
aS'&frame'
p9388
aS'&frame'
p9389
aS'&frame'
p9390
aS'=layout-frame-create'
p9391
aS'&frame'
p9392
aS'&form'
p9393
aS'&widgetator'
p9394
aS'=option-editor'
p9395
aS'=bind-editor'
p9396
aS'=pack-editor'
p9397
asg6
S"{HAdding Widgets to your form}\n\nWidgets are added to the form in the &layout area by dragging them from the\n&widget buffet (way at the bottom below the &parking lot) and dropping them at\nthe desired location on the &form.\n\nNote that the &widget buffet contains several sets of widgets arranged in\ntabs and that each tab may contain more widgets than can be seen at once.\n\nAll the widgets which you place &within in a single &frame in your form should\nbe arranged either vertically or horizontally within that &frame. You don't\nhave to be all that precise about it - pretty much any attempt on your part\nto make the widgets line up one above the other or one next to the other is\nacceptable - but if they are all over the &frame then $$ isn't sure how you\nwant them packed.\n\nIf you really do want widgets scattered about a &frame, this suggests that you\nneed to add additional sub-frames (which is {Lreally easy to\ndo=layout-frame-create}). Add sub-frames as seems necessary so that the\nwidgets in any one &frame are all horizontal or all vertical.\n\nOnce a widget has been added to your &form you can, over on the left side of\nthe screen in the &Widgetator, look at and set the {Lwidget\noptions=option-editor}, the {Lbindings=bind-editor} and the {Lpack\noptions=pack-editor}."
p9398
sg8
(lp9399
sg10
(lp9400
S'2005/03/05'
p9401
asg12
I0
sg13
(lp9402
sg15
(lp9403
S'How to: Add widgets to your form'
p9404
assS'wid.tkinter.radiobutton.opt.disabledforeground'
p9405
(dp9406
g4
(lp9407
sg6
S'>option.disabledforeground.generic "Radiobutton"'
p9408
sg8
(lp9409
sg10
(lp9410
sg12
I0
sg13
(lp9411
sg15
(lp9412
ssS'wid.tkinter.scale.opt.bigincrement'
p9413
(dp9414
g4
(lp9415
sg6
S'>option.bigincrement.generic "Scale"'
p9416
sg8
(lp9417
sg10
(lp9418
sg12
I0
sg13
(lp9419
sg15
(lp9420
ssS'wid.tkinter.scale.opt.takefocus'
p9421
(dp9422
g4
(lp9423
sg6
S'>option.takefocus.generic "Scale"'
p9424
sg8
(lp9425
sg10
(lp9426
sg12
I0
sg13
(lp9427
sg15
(lp9428
ssS'option.pmw.usehullsize.generic'
p9429
(dp9430
g4
(lp9431
S'&default'
p9432
asg6
S'{H@0 - usehullsize}\n\nIf true, the size of the megawidget is determined solely by the width and\nheight options of the {ghull} component.\n\nOtherwise, the size of the megawidget is determined by the width and height\nof the {g@1} component, along with the size and/or existence of the other\ncomponents, such as the label, the scrollbars and the scrollmargin option.\nAll these affect the overall size of the megawidget. The &default is False.'
p9433
sg8
(lp9434
sg10
(lp9435
S'2006/03/22'
p9436
aS'@1 The name of the main component}'
p9437
asg12
I0
sg13
(lp9438
sg15
(lp9439
ssS'howto.swap.code.layout'
p9440
(dp9441
g4
(lp9442
S'&layout area'
p9443
aS'&layout editor'
p9444
aS'&code editor'
p9445
aS'=layoutarea.formtab'
p9446
asg6
S'{HHow to: swtich between the layout editor and the code editor}\n\nWithin the &layout area there are three ways to switch between the &layout\neditor and the &code editor.\n\n n Press the {g$tActionFormSwapCodeLayout} key, or\n\n n Click on the {ltab=layoutarea.formtab} of the already selected form, or\n\n n Use the {gForms -> Swap-code/layout} menu choice.'
p9447
sg8
(lp9448
sg10
(lp9449
S'2006/03/16'
p9450
asg12
I0
sg13
(lp9451
sg15
(lp9452
S'How to: Switch between the layout editor and the code editor'
p9453
assS'wid.tkinter.scrollbar.opt.activerelief'
p9454
(dp9455
g4
(lp9456
sg6
S'>option.activerelief.generic "Scrollbar"'
p9457
sg8
(lp9458
sg10
(lp9459
sg12
I0
sg13
(lp9460
sg15
(lp9461
ssS'option-font'
p9462
(dp9463
g4
(lp9464
S'=assist-font'
p9465
asg6
S'{HFonts}\n\nAlthough Tkinter supports several ways of specifying fonts, $$ uses\nthe "family-size-modifiers" method via it\'s {Lfont selection=assist-font}\nassist dialog.\n\nIf you must use font objects or X-windows font strings then\nyou can do so by configuring the font manually after all the widgets\nare created.'
p9466
sg8
(lp9467
S'font'
p9468
asg10
(lp9469
S'2005/02/24'
p9470
asg12
I0
sg13
(lp9471
sg15
(lp9472
S'Fonts'
p9473
assS'wid.tkinter.scale.opt.highlightbackground'
p9474
(dp9475
g4
(lp9476
sg6
S'>option.highlightbackground.generic "Scale"'
p9477
sg8
(lp9478
sg10
(lp9479
sg12
I0
sg13
(lp9480
sg15
(lp9481
ssS'wid.tkinter.toplevel.opt.highlightcolor'
p9482
(dp9483
g4
(lp9484
sg6
S'>option.highlightcolor.generic "Toplevel"'
p9485
sg8
(lp9486
sg10
(lp9487
sg12
I0
sg13
(lp9488
sg15
(lp9489
ssS'wid.tkinter.scale.opt.foreground'
p9490
(dp9491
g4
(lp9492
S'&color'
p9493
aS'&new mexico tech'
p9494
asg6
S'{HScale - foreground}\n\nThe &color of the text used for the label and annotations.\n\n$nmt'
p9495
sg8
(lp9496
sg10
(lp9497
S'2005/04/27'
p9498
asg12
I0
sg13
(lp9499
sg15
(lp9500
ssS'option.title.generic'
p9501
(dp9502
g4
(lp9503
S'&new mexico tech'
p9504
asg6
S'{H@0 - title}\n\nNormally, the title of a tear-off menu window will be the same as the text of\nthe menubutton or cascade that lead to this menu. If you want to change the\ntitle of that window, set the {gtitle} option to that string.\n\n$nmt'
p9505
sg8
(lp9506
sg10
(lp9507
S'2005/04/05'
p9508
asg12
I0
sg13
(lp9509
sg15
(lp9510
ssS'wid.pmw.radioselect.opt.hull'
p9511
(dp9512
g4
(lp9513
sg6
S">option.pmw.hull.generic 'RadioSelect'"
p9514
sg8
(lp9515
sg10
(lp9516
sg12
I0
sg13
(lp9517
sg15
(lp9518
ssS'option.name.rebind'
p9519
(dp9520
g4
(lp9521
S'&binding'
p9522
aS'&binding'
p9523
aS'&event'
p9524
aS'&handler'
p9525
aS'&event'
p9526
aS'&handler'
p9527
aS'&binding'
p9528
aS'&event'
p9529
aS'&handler'
p9530
aS'&handler'
p9531
aS'&binding'
p9532
aS'&binding'
p9533
aS'&handler'
p9534
aS'&handler'
p9535
aS'&handler'
p9536
aS'&handler'
p9537
aS'&binding'
p9538
aS'&handler'
p9539
aS'&event'
p9540
aS'&handler'
p9541
asg6
S'{BChanging event handler names when a widget is renamed}\n\nWidgets can have &bindings. &Bindings refer to &event &handlers which are\nmethods in your code. If you have been following our suggestion then your\n&event &handlers will have names of the form {gon_widget_whatever}. For\nexample, if you have a widget named {gButton1} and that widget has a &binding\nto the {f<Motion>} &event then the event &handler would be named\n\nt {gon_Button1_Motion}\n\nIf you change the name of the widget to {gSpam} then there is the question of\nwhat happens to the &handlers. At widget-rename time I check all the widgets\n&bindings and for those &bindings where the &handler name is of the form\n{gon_widget_whatever} I offer to rename the &handler to mention the new\nwidget name. In the case of our example, I would offer to change the name of\nthe &handler and, if you accept the offer, then the name of the &handler\nwould be changed to\n\nt {gon_Spam_Motion}\n\nand any &bindings that refer to that &handler would be adjusted accordingly.\n\n&Event &handler names which do {bnot} follow the recommended format are all\nleft as-is. One more reason to follow the recommended format.'
p9542
sg8
(lp9543
sg10
(lp9544
S'2005/05/15'
p9545
asg12
I0
sg13
(lp9546
sg15
(lp9547
S'Changing event handler names when a widget is renamed'
p9548
assS'buffet.widget.checkbutton'
p9549
(dp9550
g4
(lp9551
sg6
S'>buffet.widget.generic "Checkbutton"'
p9552
sg8
(lp9553
sg10
(lp9554
sg12
I0
sg13
(lp9555
sg15
(lp9556
ssS'wid.pmw.counter.opt.pady'
p9557
(dp9558
g4
(lp9559
S'&default'
p9560
asg6
S'{HCounter - pady}\n\nSpecifies a padding distance to leave around the arrow buttons in the y\ndirection. The &default is 0.'
p9561
sg8
(lp9562
sg10
(lp9563
S'2006/03/20'
p9564
asg12
I0
sg13
(lp9565
sg15
(lp9566
ssS'wid.tkinter.entry.opt.textvariable'
p9567
(dp9568
g4
(lp9569
sg6
S'>option.textvariable.generic "Entry"'
p9570
sg8
(lp9571
sg10
(lp9572
sg12
I0
sg13
(lp9573
sg15
(lp9574
ssS'option.width.generic'
p9575
(dp9576
g4
(lp9577
S'&font'
p9578
asg6
S"{H@0 - width}\n\nThe width of the @0 in {bcharacters}, based on the average size of characters\nin the current &font.\n\nIf zero, the @0's width is set to fit it's contents."
p9579
sg8
(lp9580
sg10
(lp9581
S'2005/04/06'
p9582
aS'Note that Button, Canvas, Checkbutton, Scale and Scrollbar have their own'
p9583
aS'width rules and should have their own specific help topic.'
p9584
asg12
I0
sg13
(lp9585
sg15
(lp9586
ssS'option.insertontime.generic'
p9587
(dp9588
g4
(lp9589
S'&new mexico tech'
p9590
asg6
S'{H@0 - insertontime}\n\nThe number of milliseconds the insertion cursor is on during its blink cycle.\n\nDefault is 600.\n\n$nmt'
p9591
sg8
(lp9592
sg10
(lp9593
S'2005/03/03'
p9594
asg12
I0
sg13
(lp9595
sg15
(lp9596
ssS'wid.pmw.counter.overview'
p9597
(dp9598
g4
(lp9599
sg6
S'{HWhat is: A Counter widget}\n\n A counter contains an entry field and two arrow buttons to increment and\ndecrement the value in the entry field. Standard counting types include\nnumbers, times and dates. A user defined counting function may also be\nsupplied for specialized counting. Counting can be used in combination with\nthe entry field\'s validation. The components may be laid out horizontally or\nvertically.\n\nEach time an arrow button is pressed the value displayed in the entry field\nis incremented or decremented by the value of the increment option. If the\nnew value is invalid (according to the entry field\'s validate option, perhaps\ndue to exceeding minimum or maximum limits), the old value is restored.\n\nWhen an arrow button is pressed and the value displayed is not an exact\nmultiple of the increment, it is "truncated" up or down to the nearest\nincrement.'
p9600
sg8
(lp9601
sg10
(lp9602
S'2006/03/19'
p9603
asg12
I0
sg13
(lp9604
sg15
(lp9605
S'What is: A Counter widget'
p9606
assS'wid.tkinter.menu.opt.tearoffcommand'
p9607
(dp9608
g4
(lp9609
sg6
S'>option.tearoffcommand.generic "Menu"'
p9610
sg8
(lp9611
sg10
(lp9612
sg12
I0
sg13
(lp9613
sg15
(lp9614
ssS'code-edit.action.top'
p9615
(dp9616
g4
(lp9617
S'&editor actions'
p9618
asg6
S'{HCode editor - First Line}\n\n Key:   $tActionTop\n Menu: {fEdit/First Line}\n\nMoves the cursor to the first line of code.\n\nCode &editor actions'
p9619
sg8
(lp9620
sg10
(lp9621
S'2006/01/26'
p9622
asg12
I0
sg13
(lp9623
sg15
(lp9624
S'Code editor - goto first line'
p9625
assS'option.verbatim'
p9626
(dp9627
g4
(lp9628
sg6
S"{HWhat is: A 'verbatim' option}\n\nSome widget options, for example the {gvalidate} option of the {fEntryField}\nwidget, are sufficiently abstruse that $$ attempts no checking and simply\nuses what ever you supply. If what you supply is correct things will go fine.\nIf what you supply is incorrect then a syntax error is likely when you run\nyour project."
p9629
sg8
(lp9630
sg10
(lp9631
S'2006/03/24'
p9632
asg12
I0
sg13
(lp9633
sg15
(lp9634
S"What is: A 'verbatim' option"
p9635
assS'wid.pmw.counter.opt.pyclass'
p9636
(dp9637
g4
(lp9638
sg6
S'>option.pyclass.generic "Counter"'
p9639
sg8
(lp9640
sg10
(lp9641
sg12
I0
sg13
(lp9642
sg15
(lp9643
ssS'form-properties-dialog-other'
p9644
(dp9645
g4
(lp9646
sg6
S'{HWhy forms derive only from Toplevel, Frame or ScrolledFrame}\n\nSo, you want your form to derive from {gCanvas}, {gText} or something like that. I\nthink we have a communication problem.\n\nThe whole point of $$ is to make it easy for you to create rectangular things into\nwhich you place a bunch of widgets and then add code to make them go. We call the\nrectangular things "forms" and they derive from {fToplevel}, {fFrame} or\n{fScrolledFrame} because those are rectangular things into which you place\nwidgets.\n\nThere is nothing wrong with deriving a class from {fCanvas}, {fText} or what have\nyou, but the result is not what $$ considers to be a form. Most likely you are\ntaking an existing class and adding functionality to it. There is nothing\npreventing you from doing this in a $$ project - go to the main code area (or the\nbottom of the code for any form) and write the code for your derived class. But\nwhat you are creating is a derived class and this is {bnot} a form.\n\nOn the other hand if what you want is to create, for example, is a {fCanvas} with\na bunch of buttons and stuff added to it then create a form (derived from\n{fToplevel}, {fFrame} or {fScrolledFrame} as appropriate) and put your {fCanvas},\nthe buttons, the code and whatever else you need into that form.'
p9647
sg8
(lp9648
sg10
(lp9649
S'2005/04/17'
p9650
asg12
I0
sg13
(lp9651
sg15
(lp9652
S'Why forms derive only from Toplevel, Frame or ScrolledFrame'
p9653
assS'wid.tkinter.scrollbar.opt.orient'
p9654
(dp9655
g4
(lp9656
sg6
S'>option.orient.generic "Scrollbar"'
p9657
sg8
(lp9658
sg10
(lp9659
sg12
I0
sg13
(lp9660
sg15
(lp9661
ssS'command.delete.handlertoo'
p9662
(dp9663
g4
(lp9664
S'&command option'
p9665
aS'&command option'
p9666
aS'&command option'
p9667
aS'&binding'
p9668
aS'&event'
p9669
aS'&handler'
p9670
aS'&event'
p9671
aS'&handler'
p9672
aS'&event'
p9673
aS'&handler'
p9674
aS'&command option'
p9675
aS'&binding'
p9676
aS'&event'
p9677
aS'&handler'
p9678
aS'&command option'
p9679
aS'&event'
p9680
aS'&handler'
p9681
aS'&event'
p9682
aS'&handler'
p9683
aS'&handler'
p9684
aS'&command option'
p9685
aS'&event'
p9686
aS'&handler'
p9687
aS'&command option'
p9688
aS'&event'
p9689
aS'&handler'
p9690
asg6
S'{HDeletion of event handler at bind-delete time}\n\nYou just asked to clear a &command option. I notice that once that &command\noption is cleared, no other &command option nor &binding will refer to the\n&event &handler "@0" so you have the opportunity to delete the &event\n&handler as well as clearing the command-option.\n\no If you refer to &event &handler "@0" in your code (I didn\'t check for that)\n  or if you plan to create new &command options or &binding which will refer\n  to that &event &handler then clearly you want to choose {GKeep Handler}.\n  This will clear the &command option but will not delete the &event\n  &handler.\n\no If none of your code calls &event &handler "@0" and you have no proposed\n  use for it then you might as well choose {GDelete Handler} and delete the\n  &handler rather than leaving unused code hanging around your form. This\n  will clear the &command option and delete the &event &handler.\n\no If you\'ve changed your mind and now don\'t want to clear the &command option\n  nor delete the &event &handler then click {gCancel}.'
p9691
sg8
(lp9692
sg10
(lp9693
S'2006/02/04'
p9694
aS'@0 The name of the handler'
p9695
asg12
I0
sg13
(lp9696
sg15
(lp9697
ssS'wid.pmw.counter.opt.initwait'
p9698
(dp9699
g4
(lp9700
sg6
S'{HCounter - initwait}\n\nSpecifies the initial delay in milliseconds before a depressed\narrow button automatically starts to repeat.'
p9701
sg8
(lp9702
sg10
(lp9703
S'2006/03/18'
p9704
asg12
I0
sg13
(lp9705
sg15
(lp9706
ssS'option.cursor.generic'
p9707
(dp9708
g4
(lp9709
S'&cursor'
p9710
asg6
S'{H@0 - cursor}\n\nThe &cursor to be used whenever the mouse is over this @0.'
p9711
sg8
(lp9712
sg10
(lp9713
sg12
I0
sg13
(lp9714
sg15
(lp9715
ssS'buffet.widget.counter'
p9716
(dp9717
g4
(lp9718
sg6
S'>buffet.widget.generic2 "Pmw.Counter", \'\', \'wid.pmw.counter.overview\''
p9719
sg8
(lp9720
sg10
(lp9721
sg12
I0
sg13
(lp9722
sg15
(lp9723
ssS'__substitutions__'
p9724
(dp9725
g4
(lp9726
S'&new mexico tech'
p9727
aS'&new mexico tech'
p9728
asg6
S'$$\nRapyd-Tk\n.end \n$nmt\n\n- - -\n Tkinter documentation provided courtesy of &New Mexico Tech.\n.end\n$hb\nmiddle mouse button\n.end\n$help\nYou can get help about almost everything on the Rapyd-TK screen\nby clicking the middle mouse button\nover it.\n.end\n$hk\nF1 function key\n.end\n$mailto\nrapyd@bitflipper.ca\n.end\n$website\nhttp://www.bitflipper.ca/rapyd\n.end\n$rpj\n"{g.rpj}"\n.end\n$configfile\n{grapyd.config}\n.end'
p9729
sg8
(lp9730
sg10
(lp9731
sg12
I0
sg13
(lp9732
sg15
(lp9733
ssS'wid.tkinter.menu.opt.postcommand'
p9734
(dp9735
g4
(lp9736
sg6
S'>option.postcommand.generic "Menu"'
p9737
sg8
(lp9738
sg10
(lp9739
sg12
I0
sg13
(lp9740
sg15
(lp9741
ssS'widgets-importing-of'
p9742
(dp9743
g4
(lp9744
S'&project'
p9745
aS'&form'
p9746
aS'&project'
p9747
aS'&config file'
p9748
asg6
S'{HWidgets are imported using "from" or "import"}\n\nWhen your &project is run the widgets on a &form have to come from somewhere\nsuch as Tkinter, Pmw or whatever. When a &project is built $$ notes the\nmodules from which widgets are required and it adds generated lines to the\nfront of the main code area to do the necessary importing.\n\nThis code takes one of two possible forms:\n\nt {gfrom yada import *}\n\n  t or\n\nt {gimport yada}\n\nThe form to be used is specified in the {f[Modules]} section of the &config\nfile.'
p9749
sg8
(lp9750
sg10
(lp9751
S'2006/01/29'
p9752
asg12
I0
sg13
(lp9753
sg15
(lp9754
S'Widgets are imported using " from " or " import "'
p9755
assS'wid.pmw.radioselect.opt.pady'
p9756
(dp9757
g4
(lp9758
S'&default'
p9759
asg6
S'{HRadioSelect - pady}\n\nSpecifies a padding distance to leave between each button in the y direction\nand also between the buttons and the outer edge of the radio select. The\n&default is 5.'
p9760
sg8
(lp9761
sg10
(lp9762
S'2006/03/21'
p9763
asg12
I0
sg13
(lp9764
sg15
(lp9765
ssS'wid.pmw.radioselect.opt.padx'
p9766
(dp9767
g4
(lp9768
S'&default'
p9769
asg6
S'{HRadioSelect - padx}\n\nSpecifies a padding distance to leave between each button in the x direction\nand also between the buttons and the outer edge of the radio select. The\n&default is 5.'
p9770
sg8
(lp9771
sg10
(lp9772
S'2006/03/21'
p9773
asg12
I0
sg13
(lp9774
sg15
(lp9775
ssS'option.pmw.labelmargin.generic'
p9776
(dp9777
g4
(lp9778
sg6
S'{H@0 - labelmargin}\n\nIf the {glabelpos} option is not None, this specifies the distance between\nthe {glabel} comnponent and the rest of the megawidget.'
p9779
sg8
(lp9780
sg10
(lp9781
S'2006/03/18'
p9782
asg12
I0
sg13
(lp9783
sg15
(lp9784
ssS'wid.tkinter.listbox.opt.selectforeground'
p9785
(dp9786
g4
(lp9787
sg6
S'>option.selectforeground.generic "Listbox", "text"'
p9788
sg8
(lp9789
sg10
(lp9790
sg12
I0
sg13
(lp9791
sg15
(lp9792
ssS'layout.menu.forms'
p9793
(dp9794
g4
(lp9795
S'&layout area'
p9796
aS'&form'
p9797
aS'&module'
p9798
aS'&project'
p9799
aS'&code editor'
p9800
aS'&layout editor'
p9801
aS'&form'
p9802
aS'=layoutarea.formtab'
p9803
aS'=formseedialog'
p9804
aS'&layout area'
p9805
aS'=forms.derivation.explained'
p9806
aS'=form.main.info'
p9807
aS'&form'
p9808
aS'=forms.derivation.explained'
p9809
aS'=forms.derivation.explained'
p9810
aS'&layout area'
p9811
aS'&option editor'
p9812
asg6
S'{HLayout area - Forms menu}\n\nThe &layout area {GForms} menu is where you mess with &forms. Forms live inside &modules which live inside a\n&project.\n\no {gSwap code/layout}\n   Toggle between the &code editor and and the &layout editor of the current &form. You can achieve the same result\n  using the {g$tActionFormSwapCodeLayout} key or by clicking on the {ltab=layoutarea.formtab} of the already\n  selected form.\n\no {gForm alternate}\n   Alternates between the current form and the form within this module on which you worked last. You can achieve the\n  same result using the {g$tActionFormAlternate} key. Very handy when you are working on two forms within a given\n  module.\n\no {gSelect forms to see}\n   Allows you to {lchoose which forms=formseedialog} have tabs at the top of the &layout area. Handy if you have a\n  lot of forms in a module.\n\no {gAdd new form to the current module}\n   Use this to create a new, blank form for your project. You will be asked for a name for the new form and for the\n  class from which it is to {Lderive=forms.derivation.explained}.\n\no {gImport a Form}\n   Creates a new form in this project by importing a saved form. The form to be imported must previously have been\n  saved from this or some other $$ project. You will be given the opportunity to choose the name to be given to the\n  imported form in this project.\n\no {gExport the Current Form}\n   Saves a copy of the current form so it can later be imported into another project. \n  Exported forms are saved with the file extension {grpf}: {br}apyd {bp}roject {bf}orm.\n  \n  {bNote}: The main form of the\n  main module is {lspecial=form.main.info} and to code necessary to export it has yet to be written.\n\no {gSet "Derive From" class}\n   $$ &forms are classes which have to {Lderive=forms.derivation.explained} from Tkinter {gToplevel}, {gFrame}, Pmw\n  {gScrolledFrame} or equivalent. Use this menu choice to change the class from which an existing form\n  {Lderives=forms.derivation.explained}.\n\no {gDelete the current form}\n   Just like the name says. Keep in mind that deleting a form deletes the visual layout of the form, all it\'s code\n  and all the widget settings. You can\'t un-delete forms, so think before you delete, OK?\n\no {gHow to rename a *form*}\n   The form name is carried by the outermost frame of the form. To rename a form select the outermost frame in the\n  &layout area and then in the &option editor change the {gname} option to be your desired new name; the form will\n  be renamed accordingly.'
p9813
sg8
(lp9814
sg10
(lp9815
S'<2005/05/27'
p9816
asg12
I0
sg13
(lp9817
sg15
(lp9818
S'The Layout area Forms menu'
p9819
aS'How to: Swap between the code editor and the layout editor.'
p9820
aS'How to: Alternate between two forms withing the current module.'
p9821
aS'How to: Alternate between two forms withing the project.'
p9822
aS'How to: Select which forms will have tabs at the top of the layout area.'
p9823
aS'How to: Add a new form to the current module.'
p9824
aS'How to: Set the "derive from" class of a form.'
p9825
aS'How to: Delete the current form'
p9826
assS'wid.pmw.timecounter.opt.repeatrate'
p9827
(dp9828
g4
(lp9829
S'&default'
p9830
asg6
S'{HTimeCounter - repeatrate}\n\nSpecifies the delay (in milliseconds) between automatic counts while an arrow\nbutton is held pressed down. The &default is 50.'
p9831
sg8
(lp9832
sg10
(lp9833
S'2006/03/24'
p9834
asg12
I0
sg13
(lp9835
sg15
(lp9836
ssS'wid.pmw.scrolledtext.opt.border-frame'
p9837
(dp9838
g4
(lp9839
sg6
S'{HScrolledText - borderframe}\n\nIf true, the {gborderframe component} will be created. The default is False.'
p9840
sg8
(lp9841
sg10
(lp9842
S'2006/03/23'
p9843
asg12
I0
sg13
(lp9844
sg15
(lp9845
ssS'wid.tkinter.scale.opt.activebackground'
p9846
(dp9847
g4
(lp9848
S'&color'
p9849
aS'&new mexico tech'
p9850
asg6
S'{HScale - activebackground}\n\nThe &color of the slider when the mouse is over it.\n\n$nmt'
p9851
sg8
(lp9852
sg10
(lp9853
S'2005/04/27'
p9854
asg12
I0
sg13
(lp9855
sg15
(lp9856
ssS'howto.delete.form'
p9857
(dp9858
g4
(lp9859
S'&form'
p9860
aS'&form'
p9861
aS'&form'
p9862
asg6
S"{HHow to: Delete the current form}\n\nKeep in mind that deleting a &form deletes the visual layout of the form, all\nit's code and all the widgets and their settings settings. You can't\nun-delete a &form, so think before you delete, OK?\n\nTo delete the current &form:\n\n n From the {gForms} menu click the {gDelete the current form} choice.\n\n n A menu will popup requesting confirmation. Click the {gDelete} choice."
p9863
sg8
(lp9864
sg10
(lp9865
S'2006/02/09'
p9866
asg12
I0
sg13
(lp9867
sg15
(lp9868
S'How to: Delete the current form'
p9869
assS'wid.tkinter.toplevel.opt.takefocus'
p9870
(dp9871
g4
(lp9872
sg6
S'>option.takefocus.generic "Toplevel"'
p9873
sg8
(lp9874
sg10
(lp9875
sg12
I0
sg13
(lp9876
sg15
(lp9877
ssS'wid.pmw.panedwidget.opt.command'
p9878
(dp9879
g4
(lp9880
S'&command option'
p9881
aS'&event'
p9882
aS'&handler'
p9883
asg6
S'{HPanedWidget - command}\n\nThis &command option specifies the &event &handler to be called whenever the\nsize of any of the panes changes. The function is called with a single\nargument, being a list of the sizes of the panes, in order. For vertical\norientation, the size is the height of the panes. For horizontal orientation,\nthe size is the width of the panes.'
p9884
sg8
(lp9885
sg10
(lp9886
S'2006/03/21'
p9887
asg12
I0
sg13
(lp9888
sg15
(lp9889
ssS'bindassist.eventempty'
p9890
(dp9891
g4
(lp9892
S'&binding'
p9893
aS'&event'
p9894
aS'&handler'
p9895
aS'&binding'
p9896
aS'&binding'
p9897
aS'&event'
p9898
aS'=bind.eventwizard.overview'
p9899
asg6
S'{HBind Assist - Event string empty on close}\n\nYou just clicked on {gOK} but the event string is empty.\n\nTo have a valid &binding, a non-blank &event string and the name of the &handler for\nthe event are required.\n\n o To exit the Bind Assist without changing any bind entries, use the {gCancel} button.\n\n o If you were about to create a new bind entry but changed your mind, use the\n   {gCancel} button\n\n o If you want to delete the current &binding, use the {gDelete} button.\n\n o To make this a valid &binding, supply an &event string, preferably using the\n   "{LEvent Wizard=bind.eventwizard.overview}" button.'
p9900
sg8
(lp9901
sg10
(lp9902
S'2005/03/15'
p9903
asg12
I0
sg13
(lp9904
sg15
(lp9905
ssS'wid.tkinter.text.opt.highlightthickness'
p9906
(dp9907
g4
(lp9908
sg6
S'>option.highlightthickness.generic "Text"'
p9909
sg8
(lp9910
sg10
(lp9911
sg12
I0
sg13
(lp9912
sg15
(lp9913
ssS'wid.pmw.scrolledframe.opt.hscrollmode'
p9914
(dp9915
g4
(lp9916
sg6
S">option.pmw.hscrollmode.generic 'ScrolledFrame'"
p9917
sg8
(lp9918
sg10
(lp9919
sg12
I0
sg13
(lp9920
sg15
(lp9921
ssS'form.delete.confirmation'
p9922
(dp9923
g4
(lp9924
sg6
S"{HDelete current form - Confirmation Dialog}\n\nYou just asked to delete form {b@0} of module {b@1}. Deleting a form\ndeletes it's graphic layout and all the code that goes with it. Once you\nhave deleted a form there is no way to un-delete it so think twice about\nthis, OK?\n\nClick {GDelete} to go ahead and do the deletion or click {GCancel} to keep\nthe form."
p9925
sg8
(lp9926
sg10
(lp9927
S'2006/02/10'
p9928
aS'@0 Name of the current form'
p9929
aS'@1 Name of the current module'
p9930
asg12
I0
sg13
(lp9931
sg15
(lp9932
ssS'wid.tkinter.button.opt.textvariable'
p9933
(dp9934
g4
(lp9935
sg6
S'>option.textvariable.generic "Button"'
p9936
sg8
(lp9937
sg10
(lp9938
sg12
I0
sg13
(lp9939
sg15
(lp9940
ssS'pack-editor'
p9941
(dp9942
g4
(lp9943
S'&select the widget'
p9944
aS'&layout editor'
p9945
aS'&layout editor'
p9946
aS'&form'
p9947
asg6
S'{HThe Pack Editor}\n\nThe pack editor is where you view and change a widget\'s pack settings. The\npack editor presents all the pack settings for the current widget.\nGenerally you &select the widget by clicking on it in the &layout editor,\nalthough there is also a widget selector at the top of the pack editor.\nClicking the $hb over virtually anything in the pack editor will get you\nhelp about that item. Pressing the $hk will get you help about the\ncurrently selected pack option.\n\nWhen a widget is first dropped on the &layout editor it has default\nsetting for all it\'s pack options and you can see what these default\nvalues are by looking at the pack editor. Of course the whole point of the\noption editor is to let you set the pack values as you please.\n\nFrom top to bottom the option editor consists of:\n\n o An option selector dropdown list\n o Two resize knobs\n o The pack options\n\n{bThe Selector}  {p$imgpr-help-Selector.ppm}\n\nIs simply a dropdown list that will show you the names of all the widgets\nof the current &form. Clicking on a widget names selects it as the current\nwidget.\n\n{bThe Resize Knobs}  {p$imgpr-help-Resize.ppm}\n\nJust above the pack edit area are two small resize knobs, both of which\ncan be dragged left or right. Dragging the first resize knob adjusts the\nwidth of the area which shows the option names. Dragging the second resize\nknob adjusts the width of the edit area in which you set the value of the\noptions. {bNote}: To make the edit area wider you can drag the resize knob\nto the right of the option editor. Although the resize knob loses\nvisibility when the mouse leaves the option editor the position of the\nmouse is still being followed and the edit area will resize appropriately.\n\n{bThe Pack Options} {P$imgpr-help-PackEditor.ppm}\n\nLeft to right in the pack option area you see:\n\n o {bThe name of the option.}\n\n o {bThe option edit area.} An area that shows the present value of this\n   pack option. For the numeric pack option you can key in a new value\n   here.\n\n o {P$imgpr-help-Assist.ppm}  For "multiple-choice" pack options, pressing\n   this \'assist\' button pops up a radio button dialog where you can choose\n   your setting.'
p9948
sg8
(lp9949
S'pack editor'
p9950
asg10
(lp9951
S'2005/05/18'
p9952
asg12
I0
sg13
(lp9953
sg15
(lp9954
S'The pack editor / selector / resize knobs / pack options'
p9955
assS'wid.tkinter.entry.opt.insertofftime'
p9956
(dp9957
g4
(lp9958
sg6
S'>option.insertofftime.generic "Entry"'
p9959
sg8
(lp9960
sg10
(lp9961
sg12
I0
sg13
(lp9962
sg15
(lp9963
ssS'wid.tkinter.frame.opt.highlightbackground'
p9964
(dp9965
g4
(lp9966
sg6
S'>option.highlightbackground.generic "Frame"'
p9967
sg8
(lp9968
sg10
(lp9969
sg12
I0
sg13
(lp9970
sg15
(lp9971
ssS'wid.pmw.scrolledlistbox.opt.items'
p9972
(dp9973
g4
(lp9974
S'&default'
p9975
aS'=option.verbatim'
p9976
asg6
S'{HScrolledListBox - items}\n\nA tuple containing the initial items to be displayed by the listbox\ncomponent. The &default is no items.\n\nWhatever you enter in this option is used {lverbatim=option.verbatim}.'
p9977
sg8
(lp9978
sg10
(lp9979
S'2006/03/23'
p9980
asg12
I0
sg13
(lp9981
sg15
(lp9982
ssS'buffet.widget.scrolledfield'
p9983
(dp9984
g4
(lp9985
sg6
S'>buffet.widget.generic2 "Pmw.ScrolledField", \'\', \'wid.pmw.scrolledfield.overview\''
p9986
sg8
(lp9987
sg10
(lp9988
sg12
I0
sg13
(lp9989
sg15
(lp9990
ssS'command.change.choice'
p9991
(dp9992
g4
(lp9993
S'&command option'
p9994
aS'&command option'
p9995
aS'&event'
p9996
aS'&handler'
p9997
aS'&command option'
p9998
aS'&event'
p9999
aS'&handler'
p10000
aS'&command option'
p10001
aS'&binding'
p10002
aS'&handler'
p10003
aS'&handler'
p10004
aS'&binding'
p10005
aS'&command option'
p10006
aS'&handler'
p10007
aS'&handler'
p10008
aS'&binding'
p10009
aS'&command option'
p10010
aS'&command option'
p10011
aS'&handler'
p10012
aS'&handler'
p10013
aS'&handler'
p10014
aS'&binding'
p10015
aS'&command option'
p10016
aS'&handler'
p10017
aS'&command option'
p10018
aS'&handler'
p10019
aS'&binding'
p10020
aS'&command option'
p10021
aS'&event'
p10022
aS'&handler'
p10023
aS'&command option'
p10024
aS'&handler'
p10025
aS'&handler'
p10026
aS'&binding'
p10027
aS'&command option'
p10028
aS'=howto.find.handler.references'
p10029
asg6
S'{HEvent handler name change}\n\nYou just finished revising a &command option. Before you started the\nrevision, the &command option referred to an &event &handler named "@0".\nYou changed the &command option so it now referrs to an &event &handler\nnamed "@1", which doesn\'t yet exist.\n\nIf this &command option were the only &binding that referred to the\n&handler "@0" then we would simply have changed the name of the &handler\nto "@1" and carried on without bothering you. However, @2 other\n&binding</s> or &command option</s> (which could be in this or other\nwidgets) also refer<s/> to &handler "@0" and you need to make a choice\nas to what happens next.\n\no If your intent is to change the name of the &handler so that {ball} the\n  &bindings and &command options (including the current &command option)\n  which used to refer to &handler "@0" now will refer to &handler "@1"\n  then click on the {gChange Name} button. This will change the name of\n  the &handler and update any &bindings and &command options as needed.\n\no If your intent is to create a new &handler named "@1" just for the\n  current &command option, and you want to leave &handler "@0" (and all\n  the &bindings and &command options that refer to it) alone then click on\n  the {gNew Handler} button. This will create a new &event &handler named\n  "@1" and the current &command option will be the only reference to that\n  &handler. The &handler "@0" will continue to exist and any other\n  &bindings and &command options that refer to it will stay as-is.\n\nIf you are wondering where the other reference</s> <is/are> you can {Lfind\nout=howto.find.handler.references}.\n\nIf neither of the above descriptions match what you want to do, then click\nthe {GCancel} button to exit without making any changes.'
p10030
sg8
(lp10031
sg10
(lp10032
S'2006/02/15'
p10033
aS'@0 The original name of the event handler'
p10034
aS'@1 The new name of the event handler'
p10035
aS'@2 The number of other references to the old handler name'
p10036
asg12
I0
sg13
(lp10037
I2
asg15
(lp10038
ssS'wid.pmw.scrolledframe.opt.frame'
p10039
(dp10040
g4
(lp10041
sg6
S'{HScrolledFrame - frame}\n\nThe frame within the clipper to contain the widgets to be scrolled.'
p10042
sg8
(lp10043
sg10
(lp10044
S'2006/03/22'
p10045
asg12
I0
sg13
(lp10046
sg15
(lp10047
ssS'pack.within'
p10048
(dp10049
g4
(lp10050
S'&frame'
p10051
aS'&frame'
p10052
aS'&frame'
p10053
asg6
S'{HWhat is meant by a widget "within a frame"}\n\n&Frames can be nested inside other &frames to any degree. When we talk about\nwidgets being "in a frame" we are referring to the innermost &frame in which\nthe widgets are located. Put another way, a bunch of widgets are said to be\n"in the same frame" if there are no frame-lines between any of the widgets\nconcerned.'
p10054
sg8
(lp10055
S'within'
p10056
asg10
(lp10057
S'2005/05/19'
p10058
asg12
I0
sg13
(lp10059
sg15
(lp10060
S'Widgets are considered to be within the innermost frame'
p10061
assS'wid.pmw.scrolledframe.opt.vertfraction'
p10062
(dp10063
g4
(lp10064
S'&default'
p10065
asg6
S'{HScrolledFrame - vertfraction}\n\nThe fraction of the height of the clipper frame to scroll the interior frame\nwhen the user clicks on the vertical scrollbar arrows. The &default is 0.05.'
p10066
sg8
(lp10067
sg10
(lp10068
S'2006/03/23'
p10069
asg12
I0
sg13
(lp10070
sg15
(lp10071
ssS'wid.tkinter.canvas.opt.selectborderwidth'
p10072
(dp10073
g4
(lp10074
sg6
S'>option.selectborderwidth.generic "Canvas", "items"'
p10075
sg8
(lp10076
sg10
(lp10077
sg12
I0
sg13
(lp10078
sg15
(lp10079
ssS'wid.tkinter.canvas.opt.cursor'
p10080
(dp10081
g4
(lp10082
sg6
S'>option.cursor.generic "Canvas"'
p10083
sg8
(lp10084
sg10
(lp10085
sg12
I0
sg13
(lp10086
sg15
(lp10087
ssS'wid.pmw.radioselect.opt.orient'
p10088
(dp10089
g4
(lp10090
S'&default'
p10091
asg6
S"{HRadioSelect - orient}\n\nSpecifies the direction in which the buttons are laid out. This may be\n'horizontal' or 'vertical'. The &default is 'horizontal'."
p10092
sg8
(lp10093
sg10
(lp10094
S'2006/03/21'
p10095
asg12
I0
sg13
(lp10096
sg15
(lp10097
ssS'wid.tkinter.toplevel.opt.cursor'
p10098
(dp10099
g4
(lp10100
sg6
S'>option.cursor.generic "Toplevel"'
p10101
sg8
(lp10102
sg10
(lp10103
sg12
I0
sg13
(lp10104
sg15
(lp10105
ssS'wid.tkinter.button.opt.anchor'
p10106
(dp10107
g4
(lp10108
sg6
S'>option.anchor.generic "Button"'
p10109
sg8
(lp10110
sg10
(lp10111
sg12
I0
sg13
(lp10112
sg15
(lp10113
ssS'module.rename.dialog.fileexists'
p10114
(dp10115
g4
(lp10116
S'&module'
p10117
aS'&project'
p10118
aS'&module'
p10119
aS'&project'
p10120
aS'&module'
p10121
aS'&module'
p10122
asg6
S'{HFile already exists warning}\n\nYou just asked to rename the current &module from "{b@2}" to "{b@0}". When\nthe &project is made all the code for the renamed module will be gathered\ntogether and written to a file named "{b@1}". However, I note that there is\nalready a file of that name in existence.\n\nIf you go ahead and rename the &module to "@0" then the next time the\n&project is built the existing file "@1" will be overwritten with the code for\nthe renamed &module. If you are OK with this then so am I; just thought I\nshould warn you that an existing file will be wiped out if you keep going.\n\nIf you are {bnot} OK with this, then click {gCancel} and either enter a\ndifferent name for the &module or cancel the rename altogether.'
p10123
sg8
(lp10124
sg10
(lp10125
S'2005/05/25'
p10126
aS'@0 The requested name of the module'
p10127
aS'@1 The path for the python file'
p10128
aS'@2 The current name of the module'
p10129
asg12
I0
sg13
(lp10130
sg15
(lp10131
ssS'option.offvalue.generic'
p10132
(dp10133
g4
(lp10134
S'&new mexico tech'
p10135
asg6
S"{H@0 - offvalue}\n\nNormally, a @0's associated control variable will be set to 0 when it is\ncleared (off). You can supply an alternate value for the off state by setting\noffvalue to that value.\n\n$nmt"
p10136
sg8
(lp10137
sg10
(lp10138
S'2005/03/06'
p10139
asg12
I0
sg13
(lp10140
sg15
(lp10141
ssS'bindassist.general'
p10142
(dp10143
g4
(lp10144
S'&binding'
p10145
aS'&binding'
p10146
aS'&event'
p10147
aS'&handler'
p10148
aS'&event'
p10149
aS'&event'
p10150
aS'&event'
p10151
aS'&event'
p10152
aS'&binding'
p10153
aS'&handler'
p10154
aS'&event'
p10155
aS'&handler'
p10156
aS'&event'
p10157
aS'&handler'
p10158
aS'&handler'
p10159
aS'&handler'
p10160
aS'=bindassist.name-suggestion'
p10161
aS'&binding'
p10162
aS'&handler'
p10163
aS'=bindassist.handlerchange'
p10164
aS'&binding'
p10165
aS'&handler'
p10166
aS'&handler'
p10167
aS'&handler'
p10168
aS'&binding'
p10169
aS'&binding'
p10170
aS'&binding'
p10171
aS'&binding'
p10172
aS'&binding'
p10173
aS'&handler'
p10174
aS'&binding'
p10175
asg6
S'{hBind Assist Dialog}\n\nThis is where you get to create, modify and delete &bindings. Each &binding\nassociates an &event with an event &handler, which is a method in your code.\nIn this help page we talk about regular bindings. Once you are happy with\nregular bindings click {Lhere=bindassist.compound} for additional details on\nbinding to compound (eg Pmw) widgets.\n\nThere are three areas to the bind assist dialog:\n\n n {P$imgpr-help-BindAssistUpper.ppm}\n\n   Below some instructional text is the {GEvent Wizard Button} and an {gEvent\n   Entry Area}. Both of these are different routes to the same destination:\n   the &event description string.\n\n   An &event description string is, not surprisingly, a string which\n   describes the &event to which you want to bind. You can create this string\n   either by clicking on the {gEvent Wizard} button or by keying it in\n   manually in the entry area just below the Wizard button. We recommend the\n   Wizard; it has advantages:\n\n   o You are guaranteed to get a properly formed &event string.\n   o Every step in the Wizard has appropriate help.\n   o Its fast. Most Wizard steps involve clicking on a selection and having\n     made your selection you can press the {gEnter} key to advance to the\n     next step. You can roar through the Wizard pretty fast going {fClick\n     Enter Click Enter}.\n   o If you use the Wizard when creating a new &binding, then on completion\n     the Wizard automatically generates an appropriate suggested name for\n     your event &handler. If you enter the &event description string manually\n     then you have to invent the &handler name manually too, since for all we\n     know you could have keyed in an &event string of "{iMary had a little\n     lamb}" which makes the event &handler name less than obvious.\n\n     On the other hand experts, micro-managers, control-freaks and full-out\n     brainos are welcome to enter the event description string manually.\n\n n {P$imgpr-help-BindAssistLower.ppm}\n\n   Next is a combo box where you can key in or select the name for your event\n   &handler. If you use the Wizard when creating a new event binding then an\n   appropriate name for your &handler will automatically be entered here,\n   although you are welcome to revise the name to anything you like.\n\n   Automatically suggested event handler names are of the form\n   {Gon_widgetname_whatever} and we suggest that you use that format. Click\n   {Lhere=bindassist.name-suggestion} to find out why.\n\n   If you are working on an existing &binding and you change the name of the\n   &handler then there are a number of considerations. Click\n   {lhere=bindassist.handlerchange} for details.\n\n   When you create a new &binding, if there is no existing &handler of the\n   name specified then a new &handler (consisting solely of a {f"pass"}\n   statement) is created for you. &Handlers are automatically kept in\n   alphabetical order in the code to make the easier to find.\n\n n And at the very bottom are the buttons.\n\n   o {GOK} Click this one when you are happy with your new or revised\n     &binding.\n   o {GDelete} Click this to remove the current &binding from the list of\n     &bindings. You will be asked for confirmation before the deletion takes\n     place. If deleting this &binding means that there are no &bindings which\n     refer to the &handler then you are given the option of deleting the\n     handler as well.\n   o {GHelp} Presumably obvious, but do remember that in $$ you can click the\n     $hb over most things to get help about that thing.\n   o {GCancel} Close the Bind Assist without saving any changes to the\n     &binding. Clicking on the window managers "close" icon for the Bind\n     Assist has this same effect.'
p10176
sg8
(lp10177
S'bind assist'
p10178
asg10
(lp10179
S'2005/03/15'
p10180
asg12
I0
sg13
(lp10181
sg15
(lp10182
S'Bind editor - assist dialog'
p10183
assS'wid.pmw.scrolledlistbox.opt.dblclickcommand'
p10184
(dp10185
g4
(lp10186
S'&command option'
p10187
aS'&event'
p10188
aS'&handler'
p10189
asg6
S'{HScrolledListBox - dblclickcommand}\n\nThis &command option specifies the &event &handler to call when mouse button\n1 is double clicked over an entry in the listbox component.'
p10190
sg8
(lp10191
sg10
(lp10192
S'2006/03/23'
p10193
asg12
I0
sg13
(lp10194
sg15
(lp10195
ssS'wid.tkinter.toplevel.opt.background'
p10196
(dp10197
g4
(lp10198
sg6
S'>option.background.generic "Toplevel"'
p10199
sg8
(lp10200
sg10
(lp10201
sg12
I0
sg13
(lp10202
sg15
(lp10203
ssS'wid.pmw.mainmenubar.opt.name'
p10204
(dp10205
g4
(lp10206
sg6
S">option.name.generic 'MainMenuBar'"
p10207
sg8
(lp10208
sg10
(lp10209
sg12
I0
sg13
(lp10210
sg15
(lp10211
ssS'option.state.generic'
p10212
(dp10213
g4
(lp10214
S'&new mexico tech'
p10215
asg6
S"{H@0 - state}\n\nNormally, @0 widgets respond to keyboard and mouse events; set state to\n{Gnormal} to get this behavior. If you set state to {Gdisabled}, the @0\nwidget will not respond, and you won't be able to modify its contents\nprogrammatically either.\n\n$nmt"
p10216
sg8
(lp10217
sg10
(lp10218
S'2005/04/04'
p10219
asg12
I0
sg13
(lp10220
sg15
(lp10221
ssS'wid.pmw.messagebar.opt.entry'
p10222
(dp10223
g4
(lp10224
sg6
S'{HMessageBar - entry}\n\nThe widget where the messages are displayed. Long messages may be scrolled\nhorizontally by dragging with the middle mouse button.'
p10225
sg8
(lp10226
sg10
(lp10227
S'2006/03/20'
p10228
asg12
I0
sg13
(lp10229
sg15
(lp10230
ssS'option-color'
p10231
(dp10232
g4
(lp10233
sg6
S'{HColors}\n\nColors can be specified as:\n\n o A color name, or\n o A numeric color code.\n\n{BColor names}\n\nThe named colors white, black, red, green, blue, cyan, yellow and magenta are\nalways available. Other localy defined color may be available on your system.\n\n{BNumeric colors}\n\nNumeric colors consist of a number sign followed one through four hexadecimal\ndigits for each of red, green and blue thus:\n\n t {f#rgb         } - four bits per color\n t {f#rrggbb      } - eight bits per color\n t {f#rrrgggbbb   } - twelve bits per color\n t {f#rrrrggggbbbb} - sixteen bits per color\n\nAround here eight bits per color is the popular way to go.'
p10234
sg8
(lp10235
S'color'
p10236
asg10
(lp10237
S'2005/02/24'
p10238
asg12
I0
sg13
(lp10239
sg15
(lp10240
S'Colors'
p10241
assS'wid.tkinter.toplevel.opt.borderwidth'
p10242
(dp10243
g4
(lp10244
sg6
S'>option.borderwidth.generic "Toplevel"'
p10245
sg8
(lp10246
sg10
(lp10247
sg12
I0
sg13
(lp10248
sg15
(lp10249
ssS'wid.pmw.scrolledframe.opt.vertflex'
p10250
(dp10251
g4
(lp10252
S'&default'
p10253
asg6
S"{HScrolledFrame - vertiflex}\n\nSpecifies how the height of the scrollable interior frame should be resized\nrelative to the clipping frame.\n\n o If {g'fixed'}, the interior frame is set to the natural height, as requested by\n   the child widgets of the frame. \n\n o If {g'expand'} and the requested height of the\n   interior frame is less than the height of the clipping frame, the interior\n   frame expands to fill the clipping frame. \n   \n o If {g'shrink'} and the requested\n   height of the interior frame is more than the height of the clipping frame,\n   the interior frame shrinks to the height of the clipping frame. \n   \n o If {g'elastic'},\n   the height of the interior frame is always set to the height of the clipping\n   frame. \n   \nThe &default is {g'fixed'}."
p10254
sg8
(lp10255
sg10
(lp10256
S'2006/03/23'
p10257
asg12
I0
sg13
(lp10258
sg15
(lp10259
ssS'wid.pmw.scrolledcanvas.opt.name'
p10260
(dp10261
g4
(lp10262
sg6
S">option.name.generic 'ScrolledCanvas'"
p10263
sg8
(lp10264
sg10
(lp10265
sg12
I0
sg13
(lp10266
sg15
(lp10267
ssS'code-edit.action.cutappend'
p10268
(dp10269
g4
(lp10270
S'&editor actions'
p10271
asg6
S'{HCode editor - Cut append}\n\n Key:   $tActionCutAppend\n Menu: {fEdit/Cut append}\n\nThe currently selected text is cut and appended to any text already in the\nclipboard.\n\nThis is handy when you want to accumulate a number of items to be pasted into\na given location. The clipboard is cleared by plain {gCut} or {gCopy}\nbut not by {gCutAppend} nor by {gCopyAppend}.\n\nCode &editor actions'
p10272
sg8
(lp10273
sg10
(lp10274
S'2005/04/07'
p10275
asg12
I0
sg13
(lp10276
sg15
(lp10277
S'Code editor - cut appened'
p10278
assS'buffet.widget.menubutton'
p10279
(dp10280
g4
(lp10281
sg6
S'>buffet.widget.generic "Menubutton"'
p10282
sg8
(lp10283
sg10
(lp10284
sg12
I0
sg13
(lp10285
sg15
(lp10286
ssS'bindedit.newbutton'
p10287
(dp10288
g4
(lp10289
S'&bind editor'
p10290
aS'=bindassist.general'
p10291
aS'&binding'
p10292
aS'&event'
p10293
aS'&handler'
p10294
asg6
S'{HBind Editor - "Create New Binding" Button}\n\nThis button is part of the &Bind Editor. Clicking on it will bounce you into the\n{LBind Assist=bindassist.general} dialog where you can create a new &binding by\nspecifying the &event you want to respond to and the &handler to implement your\naction.'
p10295
sg8
(lp10296
sg10
(lp10297
S'2005/03/17'
p10298
asg12
I0
sg13
(lp10299
sg15
(lp10300
S'The Create New Binding Button of the Bind Editor'
p10301
assS'event.types'
p10302
(dp10303
g4
(lp10304
S'&event'
p10305
aS'&event'
p10306
aS'&focus'
p10307
aS'&focus'
p10308
aS'&new mexico tech'
p10309
asg6
S'{HBasic Tkinter event types}\n\nThese are the commonly used Tkinter &event types; not included are a number\nof esoteric, infrequently used &events.\n\no {GActivate}  A widget is changing from being inactive to being active. This\n  refers to changes in the state option of a widget such as a button changing\n  from inactive (grayed out) to active.\n\no {gButtonPress}  The user pressed one of the mouse buttons.\n\no {gButtonRelease} The user let up on a mouse button. This is probably a\n  better choice in most cases than the ButtonPress event, because if the user\n  accidentally presses the button, they can move it off the widget to avoid\n  setting off the event.\n\no {GConfigure}  The user changed the size of a widget, for example by\n  dragging a corner or side of the window.\n\no {gDeactivate}  A widget is changing from being active to being inactive.\n  This refers to changes in the state option of a widget such as a\n  radiobutton changing from active to inactive (grayed out).\n\no {gDestroy}  A widget is being destroyed.\n\no {gEnter}  The user moved the mouse pointer into a visible part of a widget.\n  (This is different than the enter key, which is a KeyPress event for a key\n  whose name is actually "return".)\n\no {gExpose}  This event occurs whenever at least some part of your\n  application or widget becomes visible after having been covered up by\n  another window.\n\no {gFocusIn}  A widget got the input &focus. This can happen either in\n  response to a user event (like using the tab key to move focus between\n  widgets) or programmatically (for example, your program calls the\n  {f.focus_set()} on a widget).\n\no {gFocusOut} The input &focus was moved out of a widget. As with FocusIn,\n  the user can cause this event, or your program can cause it.\n\no {gKeyPress}  The user pressed a key on the keyboard.\n\no {gKeyRelease}  The user let up on a key.\n\no {gLeave}  The user moved the mouse pointer out of a widget.\n\no {gMap}  A widget is being mapped, that is, made visible in the application.\n  This will happen, for example, when you call the widget\'s {f.pack()}\n  method.\n\no {gMotion}  The user moved the mouse pointer entirely within a widget.\n\no {gUnmap}  A widget is being unmapped and is no longer visible. This\n  happens, for example, when you use the widget\'s {f.pack_remove()} method.\n\no {gVisibility}  Happens when at least some part of the application window\n  becomes visible on the screen.\n\n$nmt'
p10310
sg8
(lp10311
sg10
(lp10312
S'2006/02/16'
p10313
asg12
I0
sg13
(lp10314
sg15
(lp10315
S'Basic Tkinter event types'
p10316
assS'wid.tkinter.entry.opt.relief'
p10317
(dp10318
g4
(lp10319
sg6
S'>option.relief.generic "Entry"'
p10320
sg8
(lp10321
sg10
(lp10322
sg12
I0
sg13
(lp10323
sg15
(lp10324
ssS'wid.pmw.panedwidget.overview'
p10325
(dp10326
g4
(lp10327
sg6
S'{HWhat is: A PanedWidget}\n\nA paned widget is a container megawidget which manages a number of resizable\nframes, known as panes. Each pane may act as the container for other widgets.\nThe user may interactively resize the panes by dragging a small rectangle\n(the handle) or the line between the panes (the separator). The panes may be\narranged horizontally or vertically. Each pane may have maximum and minimum\nlimits of its size.'
p10328
sg8
(lp10329
sg10
(lp10330
S'2006/03/21'
p10331
asg12
I0
sg13
(lp10332
sg15
(lp10333
S'What is: A PanedWidget'
p10334
assS'widget.drop.missing.handlers'
p10335
(dp10336
g4
(lp10337
S'&parking lot'
p10338
aS'&form'
p10339
aS'&event'
p10340
aS'&handler'
p10341
aS'&handler'
p10342
aS'&handler'
p10343
aS'&handler'
p10344
aS'&binding'
p10345
aS'&command option'
p10346
aS'&handler'
p10347
aS'&binding'
p10348
aS'&handler'
p10349
asg6
S"{HDropped widget seeks handlers}\n\nYou just moved widget @4 from the &parking lot to &form @5 and now it's\nlooking for <0an> &event &handler<0/s> to match up with @0which reference\n<0that/those> &handler<0/s>. The &handler<0/s> it's looking for <0is/are>:\n\n@1\n\no If the @0<1is/are> important then choose {gCreate handler<0/s>}. This will\n  create <0an >empty &handler<0/s> in the code which you can then edit to add\n  whatever action is necessary.\n\no If the @0<1is/are> not important then choose {gDelete reference<1/s>} which\n  will delete any &bindings and clear any &command options in widget @4 which\n  refer to <0this/these> &handler<0/s>.\n\nIf you need to do something else to the &binding<1/s> such as linking\n<1it/them> to <1an> existing &handler<1/s> then choose the {gCreate\nhandler<0/s>} choice and then adjust the binding<1/s> as necessary."
p10350
sg8
(lp10351
sg10
(lp10352
S'2006/02/17'
p10353
aS'@0 "X bindings and Y command options "'
p10354
aS'@1 List of missing handlers'
p10355
aS'@2 Number of missing handlers'
p10356
aS'@3 Total of bindings and command options'
p10357
aS'@4 Name of the widget'
p10358
aS'@5 Name of form'
p10359
asg12
I0
sg13
(lp10360
I2
aI3
asg15
(lp10361
ssS'wid.tkinter.entry.opt.validate'
p10362
(dp10363
g4
(lp10364
sg6
S'>option.validate.generic "Entry"'
p10365
sg8
(lp10366
sg10
(lp10367
sg12
I0
sg13
(lp10368
sg15
(lp10369
ssS'wid.pmw.scrolledtext.opt.labelmargin'
p10370
(dp10371
g4
(lp10372
sg6
S">option.pmw.labelmargin.generic 'ScrolledText'"
p10373
sg8
(lp10374
sg10
(lp10375
sg12
I0
sg13
(lp10376
sg15
(lp10377
ssS'layout.canvas'
p10378
(dp10379
g4
(lp10380
sg6
S'>layout-area'
p10381
sg8
(lp10382
sg10
(lp10383
sg12
I0
sg13
(lp10384
sg15
(lp10385
ssS'wid.tkinter.label.opt.anchor'
p10386
(dp10387
g4
(lp10388
sg6
S'{HLabel - anchor}\n\nWhere the text is placed inside the label. Can be one of:\n\n  o {gCenter}\n  o {gN}\n  o {gS}\n  o {gE}\n  o {gW}\n  o {gNW}\n  o {gNE}\n  o {gSW}\n  o {gTSW}\n\nIf the label is exactly the right size to hold the text then this option has\nno effect. If the label is larger, then the text is place close to the\nspecified side (N, S, E, W) or corner (NW, NE, SW, SE). The default is\nCENTER.'
p10389
sg8
(lp10390
sg10
(lp10391
sg12
I0
sg13
(lp10392
sg15
(lp10393
ssS'wid.pmw.radioselect.opt.pyclass'
p10394
(dp10395
g4
(lp10396
sg6
S'>option.pyclass.generic "RadioSelect"'
p10397
sg8
(lp10398
sg10
(lp10399
sg12
I0
sg13
(lp10400
sg15
(lp10401
ssS'wid.pmw.scrolledtext.opt.vscrollmode'
p10402
(dp10403
g4
(lp10404
sg6
S">option.pmw.vscrollmode.generic 'ScrolledText'"
p10405
sg8
(lp10406
sg10
(lp10407
sg12
I0
sg13
(lp10408
sg15
(lp10409
ssS'wid.tkinter.entry.opt.state'
p10410
(dp10411
g4
(lp10412
sg6
S'>option.state.generic "Entry"'
p10413
sg8
(lp10414
sg10
(lp10415
sg12
I0
sg13
(lp10416
sg15
(lp10417
ssS'wid.tkinter.button.opt.text'
p10418
(dp10419
g4
(lp10420
sg6
S'>option.text.generic "Button"'
p10421
sg8
(lp10422
sg10
(lp10423
sg12
I0
sg13
(lp10424
sg15
(lp10425
ssS'bind-display-compound'
p10426
(dp10427
g4
(lp10428
S'&bind editor'
p10429
aS'=__whatever'
p10430
aS'&bind editor'
p10431
asg6
S'{HBind-editor display with compound (eg Pmw) widgets.}\n\nWith regular old Tkinter widgets you bind to the widget and that\'s the end of\nthe story. With compound widgets, such as the Pmw widgets, each widget has\nseveral component widgets and those component widgets can in turn contain\nadditional widgets. The &bind editor can create bindings to the main widget or\nto any of the components.\n\nHow to create bindings to compound widgets is covered {Lhere=__whatever}; our\npresent topic is how bindings to compound widgets are shown in the bind editor.\n\nConsider the following &bind editor display which relates to a Pmw Counter\nwidget.\n\n{P$imgpr-help-BindEditorCompound.ppm}\n\nThe first line ({fButRel_1...}) shows an ordinary binding against the widget\nitself.\n\nThe second line ({fVis...}) shows binding against a component of the widget.\nThe next line ({f-->entryfield.label}) indicates the exact component of the\nwidget to which the binding pertains, in this case the label component of the\nentryfield component of the Counter widget itself.\n\nThe presence of a line beginning with "{f-->}" indicates that the binding just\nabove is to a component of the widget.'
p10432
sg8
(lp10433
sg10
(lp10434
S'2006/04/13!'
p10435
asg12
I0
sg13
(lp10436
sg15
(lp10437
S'Bind-editor display with compound (eg Pmw) widgets'
p10438
assS'wid.tkinter.canvas.opt.state'
p10439
(dp10440
g4
(lp10441
sg6
S'>option.state.generic "Canvas"'
p10442
sg8
(lp10443
sg10
(lp10444
sg12
I0
sg13
(lp10445
sg15
(lp10446
ssS'wid.pmw.scrolledcanvas.opt.vertscrollbar'
p10447
(dp10448
g4
(lp10449
sg6
S'{HScrolledCanvas - vertscrollbar}\n\nThe vertical scrollbar. Its component group is Scrollbar.'
p10450
sg8
(lp10451
sg10
(lp10452
S'2006/03/22'
p10453
asg12
I0
sg13
(lp10454
sg15
(lp10455
ssS'wid.tkinter.scrollbar.opt.troughcolor'
p10456
(dp10457
g4
(lp10458
sg6
S'>option.troughcolor.generic "Scrollbar"'
p10459
sg8
(lp10460
sg10
(lp10461
sg12
I0
sg13
(lp10462
sg15
(lp10463
ssS'startup.query'
p10464
(dp10465
g4
(lp10466
S'&project'
p10467
aS'&project'
p10468
aS'&project'
p10469
aS'&project'
p10470
asg6
S"{HStartup query}\n\nWhen you start $$ you can specify, on the command line, the name of the &project you want to\nwork on and in that case the &project is opened immediately.\n\nYou didn't specify the name of a &project so right now we need to know if you want to open\nan existing &project or create a new one."
p10471
sg8
(lp10472
sg10
(lp10473
S'2005/05/26'
p10474
asg12
I0
sg13
(lp10475
sg15
(lp10476
ssS'wid.pmw.scrolledfield.opt.name'
p10477
(dp10478
g4
(lp10479
sg6
S">option.name.generic 'ScrolledField'"
p10480
sg8
(lp10481
sg10
(lp10482
sg12
I0
sg13
(lp10483
sg15
(lp10484
ss.